<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <sectionGroup name="weborb">	  
      <section name="logging" type="Weborb.Config.LoggingConfigHandler, weborb" />
      <section name="serviceManagement" type="Weborb.Config.ServiceManagementConfigHandler, weborb" />
      <section name="serviceBrowsers" type="Weborb.Config.ServiceBrowserConfig, weborb" />	 
      <section name="destinationDescriptions" type="Weborb.Config.FlexMessagingDescriptionsConfig, weborb" />
      <section name="codeGenerator" type="Weborb.Config.RemotingCodeGenConfig, weborb" />
      <section name="compression" type="Weborb.Config.CompressionConfigHandler, weborb" />      
      <section name="instrumentation" type="Weborb.Config.InstrumentationConfigHandler, weborb" />      
      <section name="performance" type="Weborb.Config.PerformanceConfigHandler, weborb" />      
      <section name="activators" type="Weborb.Config.ActivatorsConfigHandler, weborb" />      
      <section name="inspectors" type="Weborb.Config.InspectorsConfigHandler, weborb" />
      <section name="invokers" type="Weborb.Config.InvokersConfigHandler, weborb" />
      <section name="services" type="Weborb.Config.ServicesConfigHandler, weborb" />
      <section name="abstractClassMappings" type="Weborb.Config.AbstractMappingsConfigHandler, weborb" />      
      <section name="customWriters" type="Weborb.Config.CustomWritersConfigHandler, weborb" />            
      <section name="security" type="Weborb.Security.SecurityConfigHandler, weborb" />
      <section name="acl" type="Weborb.Security.AclConfigHandler, weborb" />
      <section name="serviceFactories" type="Weborb.Config.ServiceFactoriesConfigHandler, weborb" />
      <section name="argumentFactories" type="Weborb.Config.ArgumentFactoriesConfigHandler, weborb" />
      <section name="alternateConfigPath" type="Weborb.Config.AlternateConfigPathHandler, weborb" />
      <section name="datasets" type="Weborb.Config.DatasetConfigPathHandler, weborb" />
      <section name="protocols" type="Weborb.Config.ProtocolsConfigHandler, weborb" /> 
      <section name="classMappings" type="Weborb.Config.ClassMappingsHandler, weborb" /> 
      <section name="serialization" type="Weborb.Config.SerializationConfigHandler, weborb" />  	  
      <section name="deployment" type="Weborb.Config.DeploymentHandler, weborb" />
      <section name="cross-origin" type="Weborb.Config.CrossOriginConfigHandler, weborb" />     
	    <section name="cluster" type="Weborb.Config.ClusterConfig, weborb" />
      <section name="cloud" type="Weborb.Config.CloudConfig, weborb" />
      <section name="websockets" type="Weborb.Config.WebSocketConfigHandler, weborb" />
    </sectionGroup>
  </configSections>
  
  <weborb version="4.0" hotDeploy="yes">
  
  <!-- =============================================================================== -->
  <!-- ===========                                                   ================= -->
  <!-- ===========             C O M P R E S S I O N                  ================= -->
  <!-- ===========                                                   ================= -->
  <!-- ===============================================================================
   WebORB can automatically compress AMF responses when they are larger than the specified 
   size. WebORB checks if the client accepts a particular compression algorithm. The  
   product supports two compression algortihms: gzip and deflate. The product will use the
   algorithm specified in the "algorithm" element.
  ==================================================================================== -->  
  <compression enable="true">
    <!-- Threshold is the number of bytes in a response when the compression should
         be turned on. Zero (0) is a special value which enables compression for all 
         responses. -->
    <threshold>20480</threshold>
    <algorithm>gzip</algorithm>
  </compression>  
  
  <!-- =============================================================================== -->
  <!-- ===========                                                   ================= -->
  <!-- ===========             L O G G I N G                         ================= -->
  <!-- ===========                                                   ================= -->
  <!-- ===============================================================================
   WebORB logging policies and categories. Logging policies control how log events
   are displayed or persisted. Logging categories control which events are enabled
   To disable a category, change the 'enabled' attribute value to "no"
  ==================================================================================== -->  
  <logging>
  
    <!-- enter the name of the logging policy. the name must match the value from the
    <policyName> element from one of the logging policies listed below -->
    <currentPolicy>Date Based Logging</currentPolicy>

    <!-- parameters to configure logging policies
         dataFormatter - when set to "true", enables output of the date/time timestamp for each log entry
         logThreadName - when set to "true", logs the name of the thread executing the logging call -->
    <parameter>
       <name>dateFormatter</name>
       <value>true</value>
    </parameter>
    <parameter>
       <name>logThreadName</name>
       <value>true</value>
    </parameter>
	
    <!-- File Size Threshold policy - All log events are saved in a file. As soon as the
    file reaches the size specified in the <value> element of the fileSize parameter, the
    policy rolls logging over to a new file -->
    <loggingPolicy>
      <policyName>File Size Threshold</policyName>
      <className>Weborb.Util.Logging.Policies.SizeThresholdPolicy</className>
      <!-- the fileSize parameter specifies the size of the file in KB before a new file is created -->
      <parameter>
        <name>fileSize</name>
        <value>1024</value>
      </parameter>
      <!-- the fileName parameter specifies the prefix of the log file name.
      WebORB adds sequential numbers at the end of the prefix  -->
      <parameter>
        <name>fileName</name>
        <value>webORB_log</value>
      </parameter>
    </loggingPolicy>


    <!-- Date based logging - All log events are saved in a file corresponding to the
    date when the events occurred. When the product is restarted, the same log file is used
    to store the log events. If the date changes while the product is running, log events
    issued on the new date are saved in a new file -->
    <loggingPolicy>
      <policyName>Date Based Logging</policyName>
      <className>Weborb.Util.Logging.Policies.DatePolicy</className>
    </loggingPolicy>

    <loggingPolicy>
      <policyName>Command Line</policyName>
      <className>Weborb.Util.Logging.Policies.ConsoleLoggingPolicy</className>
    </loggingPolicy>
    
    <loggingPolicy>
      <policyName>Specific File</policyName>
      <className>Weborb.Util.Logging.Policies.SpecificFilePolicy</className>
      <parameter>
        <name>fileName</name>
        <value>webORB1_log.txt</value>
      </parameter>
    </loggingPolicy>
  
    <log enable="no">WEBORB INFO</log>
    <log enable="no">WEBORB DEBUG</log>
    <log enable="no">WEBORB ERROR</log>
    <log enable="no">WEBORB SERIALIZATION</log>
    <log enable="no">WEBORB EXCEPTION</log>
    <log enable="no">WEBORB INSTRUMENTATION</log>
    <log enable="no">WEBORB SECURITY</log>
    <log enable="no">WEBORB MESSAGE SERVER</log>
    <log enable="no">WEBORB THREADING</log>
  </logging>  
  
  
  
  
  
  
  <!-- =============================================================================== -->
  <!-- =====                                                              ============ -->
  <!-- =====              S E R V I C E    M A N A G E M E N T            ============ -->
  <!-- =====                                                              ============ -->
  <!-- ===============================================================================
  Service management section includes configuration controlling exposure of services
  through the management console, inclusion in the code generation and availability
  in Flash Builder integration.
  Elements located at assemblies/exclude/assembly are the names of the assemblies
  which must be excluded in the service browser. Additionally classes in these assemblies
  cannot be exposed as remoting services and will not show up as destinations in Flash 
  Builder 'Data' menu.
  ==================================================================================== -->  
  <serviceManagement>
    <assemblies>
      <exclude>
        <assembly>ICSharpCode.NRefactory.dll</assembly>
        <assembly>cpuinfo.dll</assembly>
        <assembly>log4net.dll</assembly>
        <assembly>OpenUrl20.dll</assembly>
        <assembly>SharpHsql.dll</assembly>
        <assembly>Mono.Security.dll</assembly>
        <assembly>Indy.Sockets.dll</assembly>
        <assembly>MySql.Data.dll</assembly>
        <assembly>Npgsql.dll</assembly>
        <assembly>oci.dll</assembly>
        <assembly>Oracle.DataAccess.dll</assembly>
        <assembly>orannzsbb11.dll</assembly>
        <assembly>oraociicus11.dll</assembly>
        <assembly>OraOps11w.dll</assembly>
        
		
		<assembly>Spring.Core.dll</assembly>
		<assembly>Common.Logging.dll</assembly>		
		
		<assembly>Castle.Core.dll</assembly>
		<assembly>Castle.DynamicProxy2.dll</assembly>
		<assembly>Iesi.Collections.dll</assembly>
		<assembly>NHibernate.dll</assembly>
		<assembly>NHibernate.ByteCode.Castle.dll</assembly>
		<assembly>Antlr3.Runtime.dll</assembly>
		<assembly>Apache.NMS.dll</assembly>
		<assembly>Apache.NMS.ActiveMQ.dll</assembly>
		
		
		<assembly>Microsoft.WindowsAzure.CloudDrive.dll</assembly>
		<assembly>Microsoft.WindowsAzure.Diagnostics.dll</assembly>
		<assembly>Microsoft.WindowsAzure.StorageClient.dll</assembly>
      </exclude>
    </assemblies>
  </serviceManagement>



  <!-- =============================================================================== -->
  <!-- =====                                                              ============ -->
  <!-- =====              S E R V I C E    B R O W S E R S                ============ -->
  <!-- =====                                                              ============ -->
  <!-- ===============================================================================
  A service browser is a class responsible for introspection of services of a particular type.
  Each service browser can produce a node in the management console with a tree of related 
  services. For example, AssemblyBrowser scans all the deployed assemblies and displays
  a list of DLLs, classes and methods. New service browsers can be deployed by following
  the XML format below. A service browser class must implement the 
  Weborb.Management.ServiceBrowser.IServiceBrowser interface.
  ==================================================================================== -->
    <serviceBrowsers>
      <serviceBrowser><className>Weborb.Management.ServiceBrowser.Browser.AssemblyBrowser</className></serviceBrowser>
	  <serviceBrowser><className>Weborb.Management.ServiceBrowser.Browser.NHibernateBrowser</className></serviceBrowser>
      <serviceBrowser><className>Weborb.Management.ServiceBrowser.Browser.WCFBrowser</className></serviceBrowser>      
	  <serviceBrowser><className>Weborb.Management.ServiceBrowser.Browser.SpringNETBrowser</className></serviceBrowser> 
      <serviceBrowser>
        <className>Weborb.Management.ServiceBrowser.Browser.WebServiceBrowser</className>
        <properties>
          <property name="service">http://www.weather.gov/forecasts/xml/DWMLgen/wsdl/ndfdXML.wsdl</property>
        </properties>
      </serviceBrowser>
      <!-- <serviceBrowser><className>Weborb.Management.ServiceBrowser.Browser.CFCBrowser</className></serviceBrowser> -->
    </serviceBrowsers>





    <!-- =============================================================================== -->
  <!-- ===========                                                   ================= -->
  <!-- ===========     S E R I A L I Z A T I O N    P R O P S        ================= -->
  <!-- ===========                                                   ================= -->
  <!-- ===============================================================================
  This section contains various serialization related configuration settings. 
  ==================================================================================== -->
  <serialization>
    <serializePrivateFields>no</serializePrivateFields>
    <!-- if set to 'yes', instances of ICollection<T> are serialized as Vector
		 objects for Flex clients. Otherwise (if set to no), ICollection is serialized as 
		 Array or ArrayCollection (depending on below option) -->
    <serializeGenericsAsVector>no</serializeGenericsAsVector>    
    <!-- if set to 'no', instances of ICollection serialized as ArrayCollection 
         objects for Flex clients. Otherwise (if set to yes), ICollection is serialized as 
         array -->
    <legacyCollectionSerialization>yes</legacyCollectionSerialization>
    
    <keywordSubstitution>
      <prefixKeywordsWith>__</prefixKeywordsWith>
      <reservedKeywords>
        <keyword>String</keyword>
		<keyword>Date</keyword>
        <keyword>as</keyword>
        <keyword>break</keyword>
        <keyword>case</keyword>
        <keyword>catch</keyword>
        <keyword>class</keyword>
        <keyword>const</keyword>
        <keyword>continue</keyword>
        <keyword>default</keyword>
        <keyword>delete</keyword>
        <keyword>do</keyword>
        <keyword>else</keyword>
        <keyword>extends</keyword>
        <keyword>false</keyword>
        <keyword>finally</keyword>
        <keyword>for</keyword>
        <keyword>function</keyword>
        <keyword>if</keyword>
        <keyword>implements</keyword>
        <keyword>import</keyword>
        <keyword>in</keyword>
        <keyword>instanceof</keyword>
        <keyword>interface</keyword>
        <keyword>internal</keyword>
        <keyword>is</keyword>
        <keyword>native</keyword>
        <keyword>new</keyword>
        <keyword>null</keyword>
        <keyword>package</keyword>
        <keyword>private</keyword>
        <keyword>protected</keyword>
        <keyword>public</keyword>
        <keyword>return</keyword>
        <keyword>super</keyword>
        <keyword>switch</keyword>
        <keyword>this</keyword>
        <keyword>throw</keyword>
        <keyword>to</keyword>
        <keyword>true</keyword>
        <keyword>try</keyword>
        <keyword>typeof</keyword>
        <keyword>use</keyword>
        <keyword>var</keyword>
        <keyword>void</keyword>
        <keyword>while</keyword>
        <keyword>with</keyword>
		<keyword>each</keyword>
		<keyword>get</keyword>
		<keyword>set</keyword>
		<keyword>include</keyword>
		<keyword>dynamic</keyword>
		<keyword>cast</keyword>
		<keyword>debugger</keyword>
		<keyword>export</keyword>
		<keyword>intrinsic</keyword>
		<keyword>assert</keyword>
		<keyword>boolean</keyword>
		<keyword>final</keyword>
		<keyword>strictfp</keyword>
		<keyword>synchronized</keyword>
		<keyword>throws</keyword>
		<keyword>transient</keyword>
		<keyword>let</keyword>
		<keyword>yield</keyword>
		<keyword>prototype</keyword>
		<keyword>AddHandler</keyword>
		<keyword>AddressOf</keyword>
		<keyword>And</keyword>
		<keyword>AndAlso</keyword>
		<keyword>As</keyword>
		<keyword>Boolean</keyword>
		<keyword>ByRef</keyword>
		<keyword>Byte</keyword>
		<keyword>ByVal</keyword>
		<keyword>Call</keyword>
		<keyword>Case</keyword>
		<keyword>Catch</keyword>
		<keyword>CBool</keyword>
		<keyword>CByte</keyword>
		<keyword>CChar</keyword>
		<keyword>CDate</keyword>
		<keyword>CDec</keyword>
		<keyword>CDbl</keyword>
		<keyword>Char</keyword>
		<keyword>CInt</keyword>
		<keyword>Class</keyword>
		<keyword>CLng</keyword>
		<keyword>CObj</keyword>
		<keyword>Const</keyword>
		<keyword>Continue</keyword>
		<keyword>CSByte</keyword>
		<keyword>CShort</keyword>
		<keyword>CSng</keyword>
		<keyword>CStr</keyword>
		<keyword>CType</keyword>
		<keyword>CUInt</keyword>
		<keyword>CULng</keyword>
		<keyword>CUShort</keyword>
		<keyword>Decimal</keyword>
		<keyword>Declare</keyword>
		<keyword>Default</keyword>
		<keyword>Delegate</keyword>
		<keyword>Dim</keyword>
		<keyword>DirectCast</keyword>
		<keyword>Do</keyword>
		<keyword>Double</keyword>
		<keyword>Each</keyword>
		<keyword>Else</keyword>
		<keyword>ElseIf</keyword>
		<keyword>End</keyword>
		<keyword>EndIf</keyword>
		<keyword>Enum</keyword>
		<keyword>Erase</keyword>
		<keyword>Error</keyword>
		<keyword>Event</keyword>
		<keyword>Exit</keyword>
		<keyword>False</keyword>
		<keyword>Finally</keyword>
		<keyword>For</keyword>
		<keyword>Friend</keyword>
		<keyword>Function</keyword>
		<keyword>Get</keyword>
		<keyword>GetType</keyword>
		<keyword>Global</keyword>
		<keyword>GoSub</keyword>
		<keyword>GoTo</keyword>
		<keyword>Handles</keyword>
		<keyword>If</keyword>
		<keyword>Implements</keyword>
		<keyword>Imports</keyword>
		<keyword>In</keyword>
		<keyword>Inherits</keyword>
		<keyword>Integer</keyword>
		<keyword>Interface</keyword>
		<keyword>Is</keyword>
		<keyword>IsNot</keyword>
		<keyword>Let</keyword>
		<keyword>Lib</keyword>
		<keyword>Like</keyword>
		<keyword>Long</keyword>
		<keyword>Loop</keyword>
		<keyword>Me</keyword>
		<keyword>Mod</keyword>
		<keyword>Module</keyword>
		<keyword>MustInherit</keyword>
		<keyword>MustOverride</keyword>
		<keyword>MyBase</keyword>
		<keyword>MyClass</keyword>
		<keyword>Namespace</keyword>
		<keyword>Narrowing</keyword>
		<keyword>New</keyword>
		<keyword>Next</keyword>
		<keyword>Not</keyword>
		<keyword>Nothing</keyword>
		<keyword>NotInheritable</keyword>
		<keyword>NotOverridable</keyword>
		<keyword>Object</keyword>
		<keyword>Of</keyword>
		<keyword>On</keyword>
		<keyword>Operator</keyword>
		<keyword>Option</keyword>
		<keyword>Optional</keyword>
		<keyword>Or</keyword>
		<keyword>OrElse</keyword>
		<keyword>Overloads</keyword>
		<keyword>Overridable</keyword>
		<keyword>Overrides</keyword>
		<keyword>ParamArray</keyword>
		<keyword>Partial</keyword>
		<keyword>Private</keyword>
		<keyword>Property</keyword>
		<keyword>Protected</keyword>
		<keyword>Public</keyword>
		<keyword>RaiseEvent</keyword>
		<keyword>ReadOnly</keyword>
		<keyword>ReDim</keyword>
		<keyword>REM</keyword>
		<keyword>RemoveHandler</keyword>
		<keyword>Resume</keyword>
		<keyword>Return</keyword>
		<keyword>SByte</keyword>
		<keyword>Select</keyword>
		<keyword>Set</keyword>
		<keyword>Shadows</keyword>
		<keyword>Shared</keyword>
		<keyword>Short</keyword>
		<keyword>ingle</keyword>
		<keyword>Static</keyword>
		<keyword>Step</keyword>
		<keyword>Stop</keyword>
		<keyword>Structure</keyword>
		<keyword>ub</keyword>
		<keyword>SyncLock</keyword>
		<keyword>Then</keyword>
		<keyword>Throw</keyword>
		<keyword>To</keyword>
		<keyword>True</keyword>
		<keyword>Try</keyword>
		<keyword>TryCast</keyword>
		<keyword>TypeOf</keyword>
		<keyword>Variant</keyword>
		<keyword>Wend</keyword>
		<keyword>UInteger</keyword>
		<keyword>ULong</keyword>
		<keyword>UShort</keyword>
		<keyword>Using</keyword>
		<keyword>When</keyword>
		<keyword>While</keyword>
		<keyword>Widening</keyword>
		<keyword>With</keyword>
		<keyword>WithEvents</keyword>
		<keyword>WriteOnly</keyword>
		<keyword>Xor</keyword>
      </reservedKeywords>        
   </keywordSubstitution>
    
    <!-- serializer class responsible for enum type serialization. Consider the following
         enum class and service:
         
         public enum MyColor
         {
            Red = 100,
            Green = 200,
            Blue = 300            
         }
         
         public class MyService
         {
            public MyColor getColor()
            {
               return MyColor.Red;
            }
         }
         
         WebORB provides three options:
         
         1. Weborb.Writer.EnumerationWriter - serializes enum values as strings. 
            For the example above, it will serialize the value as "Red"
            
         2. Weborb.Writer.EnumAsNumberWriter - serializes enum values as numbers. 
            Will serialize the value in the example above as 100;
            
         3. Weborb.Writer.EnumAsObjectWriter - provides a combination of (1) and (2) and serializes
            enum types as a complex type containing both name and code. 
            Will serialize the return value in the example above as a complex type with
            properties "name" and "code":
                name - Red                
                code - 100
                
         To implement a custom enum type writer, create a public class and inherit from 
         Weborb.Writer.EnumerationWriter -->
                
    <enumerationSerializer>Weborb.Writer.EnumerationWriter</enumerationSerializer>    
  </serialization>


  <!-- ================================================================================-->
  <!-- ====                                                                     =======-->
  <!-- ====    		D E S T I N A T I O N   D E S C R I P T I O N S				=======-->
  <!-- ====                                                                     =======-->
  <!-- ================================================================================-->
	<destinationDescriptions>
		<description name="destinationType">destinationType</description>
		<description name="messageHandling">messageHandling</description>
		<description name="channel">channel</description>
	</destinationDescriptions>    
  

  <!-- =============================================================================== -->
  <!-- =====                                                              ============ -->
  <!-- =====        R E M O T I N G   C O D E   G E N E R A T O R         ============ -->
  <!-- =====                                                              ============ -->
  <!-- ===============================================================================
  The codeGenerator section contains configuration properties related to the WebORB code
  generation features. 
  ==================================================================================== -->
    <codeGenerator keepFile="true">
      <flashBuilder>
        <inspectAllClasses>false</inspectAllClasses>
        <enableWebORBAuthenticaction>false</enableWebORBAuthenticaction>
      </flashBuilder>
      <extensibility>
        <serviceScannerListener></serviceScannerListener>
        <serviceSerializerListener></serviceSerializerListener>
      </extensibility>
	  <messagingDestinations>
			<formats>
				<codegenFormat id="0" name="Flex Messaging/AS3" xslt="flex-messaging-as3.xslt" />
				<codegenFormat id="1" name="AJAX Client" xslt="ajax-client.xslt" />
				<codegenFormat id="2" name="Java Client" xslt="java-client.xslt" />
				<codegenFormat id="3" name="Windows Phone Client" xslt="wp7-messaging.xslt" />
				<codegenFormat id="4" name="Silverlight Client" xslt="silverlight-messaging.xslt" />
				<codegenFormat id="5" name="Java Android 2.3" xslt="android-client.xslt" />
				<codegenFormat id="6" name="AIR Mobile Messaging" xslt="air-mobile-messaging.xslt" />
				<codegenFormat id="7" name="AIR Desktop Messaging" xslt="air-desktop-messaging.xslt" />
				<codegenFormat id="8" name="iOS Messaging" xslt="ios-messaging.xslt" />
			</formats>
	 </messagingDestinations>
	 <messagingApplications>
        <formats>
          <codegenFormat id="3" name="Flex Messaging/AS3" xslt="flex-messaging-as3.xslt">
            <features>
              <codegenFeature id="0" />
              <codegenFeature id="1" />
              <codegenFeature id="2" />
              <codegenFeature id="3" />
              <codegenFeature id="4" />
              <codegenFeature id="5" />
            </features>
          </codegenFormat>
		  <codegenFormat id="1" name="AIR Messaging/AS3" xslt="air-messaging-as3.xslt">
            <features>
              <codegenFeature id="0" />
              <codegenFeature id="1" />
              <codegenFeature id="2" />
              <codegenFeature id="3" />
              <codegenFeature id="4" />
              <codegenFeature id="5" />
            </features>
          </codegenFormat>
          <codegenFormat id="2" name="Android AIR Messaging/AS3" xslt="android-air-messaging-as3.xslt">
            <features>
              <codegenFeature id="0" />
              <codegenFeature id="1" />
              <codegenFeature id="2" />
              <codegenFeature id="3" />
              <codegenFeature id="4" />
              <codegenFeature id="5" />
            </features>
          </codegenFormat>
          <codegenFormat id="4" name="iOS Messaging" xslt="ios-messaging-app.xslt">
            <features>
              <codegenFeature id="0" />
              <codegenFeature id="1" />
              <codegenFeature id="2" />
              <codegenFeature id="3" />
              <codegenFeature id="4" />
            </features>
          </codegenFormat>
        </formats>
        <features>
          <codegenFeature id="0" name="Video Broadcast" description="Generates code demonstrating how to perform video broadcase from a webcam for the selected messaging application." />
          <codegenFeature id="1" name="Video Recording" description="Generates code demonstrating how to record video into a file on the server from the client application running in a browser." />
          <codegenFeature id="2" name="Remote Shared Objects" description="Generates code demonstrating how to work with Remote Shared Objects hosted in the selected messaging application" />
          <codegenFeature id="3" name="Data Push from Server" description="Generates code demonstrating how to invoke client-side functions from the server-side code." />
          <codegenFeature id="4" name="Server Method Invocation" description="Generates code demonstrating how to invoke server-side methods from the client application." />
          <codegenFeature id="5" name="Enable Tunneling" description="When selected forces the generated code to use RTMP tunneling." />
        </features>
      </messagingApplications>
      <formats>
        <codegenFormat id="0" name="Flex Remoting/AS3" xslt="flex-remoting-as3.xslt" excludedServiceBrowsers="WCF RIA Services;NHibernate Objects" />
        <codegenFormat id="5" name="Cairngorm" xslt="cairngorm-framework.xslt" excludedServiceBrowsers="WCF RIA Services;NHibernate Objects" /> 
        <codegenFormat id="7" name="AJAX Client" xslt="ajax-client.xslt" extension="Weborb.Management.CodeGen.AjaxGeneratorExtension" excludedServiceBrowsers="WCF RIA Services;NHibernate Objects" /> 
        <codegenFormat id="8" name="PureMVC" xslt="pureMVC.xslt" excludedServiceBrowsers="WCF RIA Services;NHibernate Objects" />
        <codegenFormat id="12" name="Mate" xslt="mate.xslt" excludedServiceBrowsers="WCF RIA Services;NHibernate Objects" />
        <codegenFormat id="13" name="Swiz" xslt="swiz.xslt" excludedServiceBrowsers="WCF RIA Services;NHibernate Objects" />
		<codegenFormat id="16" name="Robotlegs" xslt="robotlegs.xslt" excludedServiceBrowsers="WCF RIA Services;NHibernate Objects" />
        <codegenFormat id="4" name="Flash Remoting/AS3" xslt="flash-remoting-as3.xslt" excludedServiceBrowsers="WCF RIA Services;NHibernate Objects" />         
        <!-- IsDotNetEdition || IsPHPEdition -->
        <codegenFormat id="9" name="Silverlight (C#)" xslt="sl-c-sharp.xslt" excludedServiceBrowsers="WCF RIA Services;NHibernate Objects" />
        <codegenFormat id="10" name="Silverlight (VB)" xslt="sl-c-sharp.xslt" extension="Weborb.Management.CodeGen.SilverlightVBGeneratorExtension" excludedServiceBrowsers="WCF RIA Services;NHibernate Objects" /> 
        <codegenFormat id="11" name="Flex WCF RIA Remoting/AS3" xslt="flex-wcf-ria-services-as3.xslt" excludedServiceBrowsers=".NET Assemblies;WCF Services;Web Services;NHibernate Objects" /> 
        <codegenFormat id="14" name="Flex NHibernate/AS3" xslt="nhibernate-as3.xslt" excludedServiceBrowsers=".NET Assemblies;WCF Services;Web Services;WCF RIA Services;Spring .NET Objects" />  
		<codegenFormat id="15" name="Java Android 2.3" xslt="android-client.xslt" excludedServiceBrowsers="WCF RIA Services;NHibernate Objects" />        
      </formats>    
      <types>
        <dotnet-to-as> 
          <type dotNet="System.Int32&amp;" as="Number" />
          <type dotNet="Nullable&lt;int&gt;" as="Number" />
          <type dotNet="Nullable&lt;float&gt;" as="Number" />
          <type dotNet="Nullable&lt;double&gt;" as="Number" />
          <type dotNet="Nullable&lt;decimal&gt;" as="Number" />
          <type dotNet="Nullable&lt;short&gt;" as="Number" />
          <type dotNet="Nullable&lt;long&gt;" as="Number" />
          <type dotNet="Nullable&lt;byte&gt;" as="Number" />
          <type dotNet="System.DateTime" as="Date" />
          <type dotNet="System.DateTime&amp;" as="Date" />
		  <type dotNet="System.DateTimeOffset" as="Date" />
          <type dotNet="System.String" as="String" />
          <type dotNet="System.StringBuilder" as="String" />
          <type dotNet="System.Array" as="Array" />
          <type dotNet="System.Void" as="void" />
          <type dotNet="int" as="int" />
          <type dotNet="uint" as="Number" />
          <type dotNet="float" as="Number" />
          <type dotNet="double" as="Number" />
          <type dotNet="decimal" as="Number" />
          <type dotNet="short" as="Number" />
          <type dotNet="long" as="Number" />
		  <type dotNet="ulong" as="Number" />
          <type dotNet="byte" as="Number" />
          <type dotNet="bool" as="Boolean" />
		  <type dotNet="System.Char" as="String" />
          <!-- use the byte[] mapping to specify how byte[] should be represented in the generated code -->
          <!--<type dotNet="byte[]" as="ByteArray" />-->
        </dotnet-to-as>
        <dotnet-to-sl>
          <type dotNet="System.Int32&amp;" sl="System.Int32&amp;" />
          <type dotNet="Nullable&lt;int&gt;" sl="Nullable&lt;int&gt;" />
          <type dotNet="Nullable&lt;float&gt;" sl="Nullable&lt;float&gt;" />
          <type dotNet="Nullable&lt;double&gt;" sl="Nullable&lt;double&gt;" />
          <type dotNet="Nullable&lt;decimal&gt;" sl="Nullable&lt;decimal&gt;" />
          <type dotNet="Nullable&lt;short&gt;" sl="Nullable&lt;short&gt;" />
          <type dotNet="Nullable&lt;long&gt;" sl="Nullable&lt;long&gt;" />
          <type dotNet="Nullable&lt;byte&gt;" sl="Nullable&lt;byte&gt;" />
          <type dotNet="System.DateTime" sl="DateTime" />
          <type dotNet="System.DateTime&amp;" sl="DateTime&amp;" />
          <type dotNet="System.DateTimeOffset" sl="DateTimeOffset" />
          <type dotNet="System.String" sl="String" />
          <type dotNet="System.StringBuilder" sl="StringBuilder" />
          <type dotNet="System.Array" sl="Array" />
          <type dotNet="System.Void" sl="Void" />
          <type dotNet="int" sl="int" />
          <type dotNet="uint" sl="uint" />
          <type dotNet="float" sl="float" />
          <type dotNet="double" sl="double" />
          <type dotNet="decimal" sl="decimal" />
          <type dotNet="short" sl="short" />
          <type dotNet="long" sl="long" />
          <type dotNet="byte" sl="byte" />
          <type dotNet="bool" sl="bool" />
          <type dotNet="System.Data.DataTable" sl="List&lt;IDictionary&gt;" />
          <type dotNet="System.Data.DataSet" sl="IDictionary&lt;List&lt;IDictionary&gt;&gt;'" />
          <type dotNet="System.Collections.Specialized.StringDictionary" sl="System.Collections.Generic.Dictionary&lt;string, string&gt;"/>
          <type dotNet="System.Collections.SortedList" sl="System.Collections.Generic.Dictionary&lt;object, object&gt;"/>
          <type dotNet="System.Collections.ArrayList" sl="System.Collections.Generic.List&lt;object&gt;"/>
          <type dotNet="System.Collections.Specialized.HybridDictionary" sl="System.Collections.Generic.Dictionary&lt;object, object&gt;"/>
          <type dotNet="System.Collections.Specialized.ListDictionary" sl="System.Collections.Generic.Dictionary&lt;object, object&gt;"/>
          <type dotNet="System.Collections.Specialized.NameValueCollection" sl="System.Collections.Generic.Dictionary&lt;string, string&gt;"/>
          <type dotNet="System.Collections.Queue" sl="System.Collections.Generic.List&lt;object&gt;"/>
          <type dotNet="System.Collections.Stack" sl="System.Collections.Generic.List&lt;object&gt;"/>
          <type dotNet="System.Collections.Hashtable" sl="System.Collections.Generic.Dictionary&lt;object, object&gt;"/>
        </dotnet-to-sl>		
        <dotnet-to-java> 
          <type dotNet="DateTime" java="java.util.Date" />
          <type dotNet="String" java="java.lang.String" />
          <type dotNet="int" java="int" />
          <type dotNet="System.Char" java="char" />
          <type dotNet="void" java="void" />
          <type dotNet="float" java="float" />
          <type dotNet="double" java="double" />
          <type dotNet="short" java="short" />
          <type dotNet="long" java="long" />
          <type dotNet="byte" java="byte" />
          <type dotNet="bool" java="boolean" />
          <type dotNet="System.Text.StringBuilder" java="java.lang.StringBuilder" />
          <type dotNet="System.Collections.Hashtable" java="java.util.Hashtable" />
          <type dotNet="System.Collections.IList" java="java.util.List" />
          <type dotNet="Nullable&lt;int&gt;" java="int" />
          <type dotNet="Nullable&lt;float&gt;" java="float" />
          <type dotNet="Nullable&lt;double&gt;" java="double" />
          <type dotNet="Nullable&lt;decimal&gt;" java="double" />
          <type dotNet="Nullable&lt;short&gt;" java="short" />
          <type dotNet="Nullable&lt;long&gt;" java="long" />
          <type dotNet="Nullable&lt;byte&gt;" java="byte" />
          <type dotNet="System.Collections.ArrayList" java="java.util.ArrayList&lt;Object&gt;" />
          <type dotNet="System.Array" java="java.util.ArrayList&lt;Object&gt;" />
          <type dotNet="System.Collections.Generic.List`1" java="java.util.List" />
          <type dotNet="System.Collections.Generic.IList`1" java="java.util.List" />
          <type dotNet="System.Collections.Hashtable" java="java.util.Hashtable" />
          <type dotNet="System.Collections.Generic.Dictionary`2" java="java.util.HashMap" />
          <type dotNet="System.Collections.Generic.KeyValuePair`2" java="java.util.AbstractMap.SimpleEntry" />
          <type dotNet="System.Collections.Generic.IDictionary`2" java="java.util.Map" />
          <type dotNet="System.Collections.Generic.ICollection`1" java="java.util.Collection" />
          <type dotNet="System.DateTimeOffset" java="java.util.Date" />
          <type dotNet="System.Object" java="Object" />
          <type dotNet="System.UInt32" java="int" />
          <type dotNet="System.UInt64" java="long" />
          <type dotNet="System.UInt16" java="short" />
          <type dotNet="System.Collections.IDictionary" java="java.util.Map" />
          <type dotNet="System.Collections.ICollection" java="java.util.Collection" />
          <type dotNet="System.Collections.Stack" java="java.util.Stack" />
          <type dotNet="System.Collections.Queue" java="java.util.LinkedList" />
          <type dotNet="System.Guid" java="java.lang.String" />
          <type dotNet="System.Globalization.Calendar" java="java.util.Calendar" />
          <type dotNet="System.Collections.SortedList" java="java.util.TreeMap" />
          <type dotNet="System.Collections.Specialized.StringDictionary" java="java.util.Hashtable" />
        </dotnet-to-java>
      </types>
    </codeGenerator>





    <!-- =============================================================================== -->
  <!-- =====                                                              ============ -->
  <!-- =====     I N V O C A T I O N    I N S T R U M E N T A T I O N     ============ -->
  <!-- =====                                                              ============ -->
  <!-- ===============================================================================
  Object invocations handled by WebORB can be automatically instrumented. WebORB records
  instrumentation data in the Windows Performance Counters. When the feature is enabled,
  the product creates the "WebORB" performance counter category. For each invoked method
  the following counters are available:
    Invocation count
    Last invocation time
    Average invocation time
    Fastest invocation time
    Slowest invocation time
 ==================================================================================== -->
  <instrumentation enable="no" />
  
  
  
  
  <!-- =============================================================================== -->
  <!-- ===========                                                   ================= -->
  <!-- ===========             P E R F O R M A N C E                 ================= -->
  <!-- ===========                                                   ================= -->
  <!-- ===============================================================================
  This section of the config file configures various parts of the product which may impact 
  the overall performance of WebORB. For more details read notes for each element
  ==================================================================================== -->  
  <performance>
    <!-- the responseBuffer element control the Buffer propery on the System.Web.HttpResponse
         object used by WebORB to serialize AMF responses. For more details see:
         http://msdn2.microsoft.com/en-us/library/ms526001.aspx -->
    <responseBuffer enable="yes" />
  </performance>  
  
  
  
  
  <!-- =============================================================================== -->
  <!-- ===========                                                   ================= -->
  <!-- ===========               P R O T O C O L S                   ================= -->
  <!-- ===========                                                   ================= -->
  <!-- ===============================================================================
  WebORB is a multi-protocol presentation server. The same server instance can process
  requests in different formats. Protocol parsers can be plugged in using the protocolHandler
  element below. Protocol handlers must implement the weborb.protocols.IMessageFactory
  interface. Interface implementations must have default no-arg constructor.
  ==================================================================================== -->
  <protocols>
        <!-- WOLF protocol handler -->
        <protocolHandler>Weborb.Protocols.Wolf.RequestParser</protocolHandler>

        <!-- AMF/ Flash Remoting protocol handler -->
        <protocolHandler>Weborb.Protocols.Amf.RequestParser</protocolHandler>
  </protocols>


  <!-- =============================================================================== -->
  <!-- ===========                                                   ================= -->
  <!-- ===========      C L I E N T   C L A S S   M A P P I N G      ================= -->
  <!-- ===========                                                   ================= -->
  <!-- ===============================================================================
  To simplify the translation between client and server-side data classes, WebORB provides a
  class mapping facility. Using the format below you can specify names of the data classes
  used on the client side and map them to the corresponding classes on the server side. These
  mappings take effect under the following conditions:
  1. When a client sends an object of a particular class as an argument to a method call
     and the server-side method's formal argument is an interface, an abstract class or 
     a generic base class. In these cases, the server-side class must be either an 
     implementation of the interface or a assignable from the specified abstract or base class.
     These mappings take the precedence over the "abstractClassMappings" configuration.
  2. When a server as a result of a method invocation returns an object of a class that has
     a mapping below, WebORB will format response such that the client-side system 
     understands which client-side class should be used  
  ==================================================================================== -->
  <classMappings>
        <classMapping>
            <clientClass>weborb.management.messaging.FlexMessagingDestination</clientClass>
            <serverClass>Weborb.Management.Configuration.Destinations.FlexMessagingDestination</serverClass>
        </classMapping>
		<classMapping>
            <clientClass>weborb.management.configuration.websockets.WebSocketServer</clientClass>
            <serverClass>Weborb.Management.Configuration.Websockets.WebSocketServer</serverClass>
        </classMapping>
        <classMapping>
            <clientClass>weborb.management.messaging.DestinationMessageReport</clientClass>
            <serverClass>Weborb.Management.Messaging.DestinationMessageReport</serverClass>
        </classMapping>        
        <classMapping>
            <clientClass>FunctionMetadata</clientClass>
            <serverClass>Weborb.Inspection.MethodDescriptor</serverClass>
        </classMapping>
        <classMapping>
            <clientClass>ServiceMetadata</clientClass>
            <serverClass>Weborb.Inspection.ServiceDescriptor</serverClass>
        </classMapping>
        <classMapping>
            <clientClass>RecordSet</clientClass>
            <serverClass>Weborb.Reader.Dataset.DataSetInfo</serverClass>
        </classMapping>
        <classMapping>
          <clientClass>NetConfigDebug</clientClass>
          <serverClass>System.Object</serverClass>
        </classMapping>        
        <classMapping>
            <clientClass>flex.messaging.messages.AsyncMessage</clientClass>
            <serverClass>Weborb.V3Types.AsyncMessage</serverClass>
        </classMapping>
        <classMapping>
            <clientClass>flex.messaging.messages.CommandMessage</clientClass>
            <serverClass>Weborb.V3Types.CommandMessage</serverClass>
        </classMapping>
        <classMapping>
            <clientClass>flex.messaging.messages.RemotingMessage</clientClass>
            <serverClass>Weborb.V3Types.ReqMessage</serverClass>
        </classMapping>
        <classMapping>
            <clientClass>flex.messaging.messages.AcknowledgeMessage</clientClass>
            <serverClass>Weborb.V3Types.AckMessage</serverClass>
        </classMapping>
        <classMapping>
            <clientClass>flex.data.messages.DataMessage</clientClass>
            <serverClass>Weborb.V3Types.DataMessage</serverClass>
        </classMapping>
        <classMapping>
            <clientClass>flex.data.messages.PagedMessage</clientClass>
            <serverClass>Weborb.V3Types.PagedMessage</serverClass>
        </classMapping>
        <classMapping>
            <clientClass>flex.data.messages.SequencedMessage</clientClass>
            <serverClass>Weborb.V3Types.SeqMessage</serverClass>
        </classMapping>        
        <classMapping>
            <clientClass>flex.messaging.messages.ErrorMessage</clientClass>
            <serverClass>Weborb.V3Types.ErrMessage</serverClass>
        </classMapping>
        <classMapping>
          <clientClass>flex.messaging.messages.DataErrorMessage</clientClass>
          <serverClass>Weborb.V3Types.ErrDataMessage</serverClass>
        </classMapping>    
        <classMapping>
            <clientClass>flex.data.messages.UpdateCollectionMessage</clientClass>
            <serverClass>Weborb.V3Types.UpdateCollMessage</serverClass>
        </classMapping>
        <classMapping>
            <clientClass>flex.data.UpdateCollectionRange</clientClass>
            <serverClass>Weborb.V3Types.UpdateCollRange</serverClass>
        </classMapping>         
        <classMapping>
          <clientClass>flex.messaging.io.ObjectProxy</clientClass>
          <serverClass>Weborb.Util.ObjectProxy</serverClass>
        </classMapping>        
        <classMapping>
          <clientClass>flex.messaging.io.ArrayCollection</clientClass>
          <serverClass>Weborb.Types.WebORBArrayCollection</serverClass>
        </classMapping>        
        <classMapping>
          <clientClass>Weborb.Management.Codegen.CodegenFormat</clientClass>
          <serverClass>Weborb.Management.CodeGen.CodegenFormat</serverClass>
        </classMapping>          
				<classMapping>
					<clientClass>weborb.v3types.V3Message</clientClass>
					<serverClass>Weborb.V3Types.V3Message</serverClass>
				</classMapping>
  </classMappings>

  
  <!-- =============================================================================== -->
  <!-- ===========                                                   ================= -->
  <!-- ===========   A L T E R N A T E   C O N F I G   P A T H       ================= -->
  <!-- ===========                                                   ================= -->
  <!-- ===============================================================================
   When WebORB configuration is updated via Management Console, the product
   automatically attempts to save the changes. If for some reason the file cannot be 
   saved, an alternative location can be specified with the <alternateConfigPath>
   property. In most cases the reason why the original config file cannot be saved
   is because of missing security permissions.
  ==================================================================================== -->  
  <alternateConfigPath>c:\\weborb\\</alternateConfigPath>


  
    
  <!-- =============================================================================== -->
  <!-- ===========                                                   ================= -->
  <!-- ===========           N A M E D    S E R V I C E S            ================= -->
  <!-- ===========                                                   ================= -->
  <!-- ===============================================================================
  Named services is a feature unique to WebORB. It allows to hide the name of the concrete
  class (type) or a web service from the flash client side. A class (type) name is mapped to a
  logical name which is used in the NetConnection.getService call.
  To create a named service definition, create a <service> element. The <name> subelement
  contains the assigned logical name. The <serviceId> element contains the name of the class,
  web service WSDL URL, EJB JNDI location, etc.
  ==================================================================================== -->
  <services>
    <!-- named services defined for console security panel -->
    <service>
        <name>flashorbHttpHandler</name>
        <serviceId>Weborb.ORBHttpHandler</serviceId>
    </service>

    <service>
        <name>flashorbInspector</name>
        <serviceId>Weborb.Dispatch.Inspector</serviceId>
    </service>

    <service>
        <name>flashorbInvoker</name>
        <serviceId>Weborb.Dispatch.Invoker</serviceId>
    </service>

    <service>
        <name>flashorbObjectHandler</name>
        <serviceId>Weborb.Handler.ObjectHandler</serviceId>
    </service>

    <service>
        <name>flashorbWebServiceHandler</name>
        <serviceId>Weborb.Handler.WebServiceHandler</serviceId>
    </service>
        
    <service>
        <name>serverInfo</name>
        <serviceId>Weborb.Console.Info.ServerInfo</serviceId>
    </service>
    
    <service>
        <name>Administration</name>
        <serviceId>Weborb.Config.Administration</serviceId>
    </service>

    <service>
        <name>CallTraceBrowser</name>
        <serviceId>Weborb.Console.CallMonitor.CallTraceBrowser</serviceId>
    </service>

    <service>
        <name>ORBSecurity</name>
        <serviceId>Weborb.Security.ORBSecurity</serviceId>
    </service>

    <service>
        <name>SingleIPRestriction</name>
        <serviceId>Weborb.Security.SingleIPRestriction</serviceId>
    </service>

    <service>
        <name>IPRangeRestriction</name>
        <serviceId>Weborb.Security.IPRangeRestriction</serviceId>
    </service>

    <service>
        <name>HostNameRestriction</name>
        <serviceId>Weborb.Security.HostNameRestriction</serviceId>
    </service>

    <service>
        <name>RoleNameRestriction</name>
        <serviceId>Weborb.Security.RoleNameRestriction</serviceId>
    </service>
    
    <service>
		    <name>AppScopeServiceAlias</name>
		    <serviceId>Weborb.Management.MessagingService</serviceId>
    </service>  
    
    <service>
        <name>autoupdater</name>
        <serviceId>Weborb.Service.AutoUpdater</serviceId>
    </service>    
    
    <!-- MESSAGING SERVICES AND OBJECTS -->
    
    <service>
        <name>streamFilenameGenerator</name>
        <serviceId>Weborb.Messaging.Server.Stream.DefaultStreamFilenameGenerator</serviceId>
    </service>    

    <service>
        <name>consumerService</name>
        <serviceId>Weborb.Messaging.Server.Stream.ConsumerService</serviceId>
    </service>  
            
    <service>
        <name>streamableFileFactory</name>
        <serviceId>Weborb.Messaging.Server.IO.StreamableFileFactory</serviceId>
    </service>              

    <service>
        <name>schedulingService</name>
        <serviceId>Weborb.Messaging.Server.Scheduling.Scheduler</serviceId>
    </service>              

    <service>
        <name>streamService</name>
        <serviceId>Weborb.Messaging.Server.Stream.StreamService</serviceId>
    </service>              

    <service>
        <name>providerService</name>
        <serviceId>Weborb.Messaging.Server.Stream.ProviderService</serviceId>
    </service>              

    <service>
        <name>flowControlService</name>
        <serviceId>Weborb.Messaging.Server.Stream.DummyFlowControlService</serviceId>
    </service>              

    <service>
        <name>videoCodecFactory</name>
        <serviceId>Weborb.Messaging.Server.Stream.VideoCodecFactory</serviceId>
    </service>              
    
    <service>
        <name>sharedObjectService</name>
        <serviceId>Weborb.Messaging.Server.SO.SharedObjectService</serviceId>
    </service>      
    
    <service>
        <name>playlistSubscriberStream</name>
        <serviceId>Weborb.Messaging.Server.Stream.PlaylistSubscriberStream</serviceId>
    </service>  
    
    <service>
        <name>clientBroadcastStream</name>
        <serviceId>Weborb.Messaging.Server.Stream.ClientBroadcastStream</serviceId>
    </service>      
    

<!--
    <service>
        <name>streamSecurityService</name>
        <serviceId></serviceId>
    </service>              
-->            
    
    <!-- Examples  -->
    <service>
        <name>ExamplesActivationSession</name>
        <serviceId>Weborb.Examples.ShoppingCart</serviceId>
    </service>

    <service>
        <name>computerinfo</name>
        <serviceId>Weborb.Examples.ComputerInfoService</serviceId>
    </service>

  </services>
  
  
  <!-- =============================================================================== -->
  <!-- ===========                                                   ================= -->
  <!-- ===========       S E R V I C E    A C T I V A T O R S        ================= -->
  <!-- ===========                                                   ================= -->
  <!-- ===============================================================================
  Service activator is responsible for creating or retrieving an instance of .NET object
  accordingly to a policy. Before a service invocation takes place, an object needs to be
  constructed or retrieved. For example, Session activator retrieves a service object from 
  the HTTP session associated with the client.
  To register an activator, create <activator> element. The <activationModeName> element
  must contain the name of the activation mode the activator will be responding to. The
  <className> element must contain the name of the activator class. The class must implement
  the Weborb.Activation.IActivator interface and must have default no-argument constructor.
  ==================================================================================== -->
  <activators>
    <activator>
      <activationModeName>request</activationModeName>
      <className>Weborb.Activation.RequestActivator</className>
    </activator>

    <activator>
      <activationModeName>session</activationModeName>
      <className>Weborb.Activation.SessionActivator</className>
    </activator>

    <activator>
      <activationModeName>application</activationModeName>
      <className>Weborb.Activation.ApplicationActivator</className>
    </activator>
  </activators>
  
  
  
  
  <!-- =============================================================================== -->
  <!-- ===========                                                   ================= -->
  <!-- ===========       S E R V I C E    I N S P E C T O R S        ================= -->
  <!-- ===========                                                   ================= -->
  <!-- ===============================================================================
   Enter inspector full type name in the <serviceInspector> element.
   Create a separate element for each new service inspector. WebORB uses
   reflection to create instances of custom inspectors. Inspector class must
   have a default no-arg constructor and must implement the
   Weborb.Handler.IInspectionHandler interface
   ==================================================================================== -->
  <inspectors>    
	<serviceInspector>Weborb.Handler.SpringNETHandler</serviceInspector>
	<serviceInspector>Weborb.Handler.WCFObjectHandler</serviceInspector>
    <serviceInspector>Weborb.Handler.ObjectHandler</serviceInspector>
    <serviceInspector>Weborb.Handler.WebServiceHandler</serviceInspector>
    <!-- <serviceInspector>Weborb.Handler.CFCHandler</serviceInspector> -->
  </inspectors>  
 
 
 
 
 

  <!-- =============================================================================== -->
  <!-- ===========                                                   ================= -->
  <!-- ===========       S E R V I C E    I N V O K E R S            ================= -->
  <!-- ===========                                                   ================= -->
  <!-- ===============================================================================
  Enter invoker full type name in the <serviceInvoker> element.
  Create new element for each invoker class. WebORB uses reflection to
  create instances of custom invokers. Invoker class must have default no-arg
  constructor and must implement the Weborb.Handler.IInvocationHandler
  interface
  ==================================================================================== -->
  <invokers>
	<serviceInvoker>Weborb.Handler.NHibernateHandler</serviceInvoker> 
	<serviceInvoker>Weborb.Handler.SpringNETHandler</serviceInvoker> 
	<!--<serviceInvoker>Weborb.Handler.WCFRIAHandler</serviceInvoker> -->
    <serviceInvoker>Weborb.Handler.WCFObjectHandler</serviceInvoker>
    <serviceInvoker>Weborb.Handler.ObjectHandler</serviceInvoker>
    <serviceInvoker>Weborb.Handler.WebServiceHandler</serviceInvoker>   
    <!-- <serviceInvoker>Weborb.Handler.CFCHandler</serviceInvoker> -->
  </invokers>
 
 
 
 
  <!-- =============================================================================== -->
  <!-- ===========                                                   ================= -->
  <!-- ===========      S E R V I C E   F A C T O R I E S            ================= -->
  <!-- ===========                                                   ================= -->
  <!-- ===============================================================================
   Service object factories are responsible for creating new instances of
   objects on which the invocations will take place. By default WebORB
   uses default no-arg constructor to create new instances. Using service
   object factory overrides that mechanism.
   ==================================================================================== -->
  <serviceFactories>
    <!--
     Each service object factory must be declared using the <serviceFactory>
     element. Each element must contain full type name for the actual service 
     object factory class and fully qualified classname for the class (interface) 
     the factory is responsible for creating.
    -->
    <serviceFactory>
      <!-- full type name of the service object. The class must implement 
      Weborb.Util.IServiceObjectFactory -->
      <serviceFactoryClassName></serviceFactoryClassName>
      <!-- fully qualified class name the service object
      factory is responsible for constructing -->
      <className></className>
    </serviceFactory>
    
    <serviceFactory>
      <serviceFactoryClassName>Weborb.Security.ORBSecurityFactory</serviceFactoryClassName>
      <className>Weborb.Security.ORBSecurity</className>
    </serviceFactory>    
  </serviceFactories>
 
 
 
  <!-- =============================================================================== -->
  <!-- ===========                                                   ================= -->
  <!-- ===========      A R G U M E N T   F A C T O R I E S          ================= -->
  <!-- ===========                                                   ================= -->
  <!-- ===============================================================================
   Argument object factories are responsible for creating new instances of
   method arguments which will be passed into method invocations. By default WebORB
   uses argument adaptation logic where Flash ActionScript data types are converted
   into the argument types of the invoked method. Using argument object factories
   overrides the default adaptation logic mechanism.
   ==================================================================================== -->
  <argumentFactories>
    <!--
     Eeach argument object factory must be declared using the <argumentFactory>
     element. Each element must contain type name for the actual argument object 
     factory class and name for the class (interface) the factory is responsible 
     for creating.
    -->
    <argumentFactory>
      <!-- class name of the service object. The class must implement 
      Weborb.Util.IArgumentObjectFactory -->
      <argumentFactoryClassName>Weborb.Management.Security.SecurityRestrictionArgFactory</argumentFactoryClassName>
      <!-- Name of the class the service object factory is responsible for constructing -->
      <className>Weborb.Security.IRestriction</className>
    </argumentFactory>
    
    <argumentFactory>
      <argumentFactoryClassName>Weborb.V3Types.BodyHolderFactory</argumentFactoryClassName>
      <className>Weborb.V3Types.BodyHolder</className>
    </argumentFactory>    

    <argumentFactory>
      <argumentFactoryClassName>Weborb.Service.ArrayUpdateDataObjectFactory</argumentFactoryClassName>
      <className>Weborb.Service.ArrayUpdateData</className>
    </argumentFactory>

    <argumentFactory>
      <argumentFactoryClassName>Weborb.Management.Configuration.Logging.LoggingPolicyArgFactory</argumentFactoryClassName>
      <className>Weborb.Util.Logging.ILoggingPolicy</className>
    </argumentFactory>    
    
    <argumentFactory>
      <argumentFactoryClassName>Weborb.Examples.ArgumentFactory</argumentFactoryClassName>
      <className>System.Collections.Generic.List`1[[Weborb.Examples.Car, weborb, Version=3.1.0.1, Culture=neutral, PublicKeyToken=null]]</className>
    </argumentFactory>    
  </argumentFactories>      
  


<!-- =============================================================================== -->
  <!-- ===========                                                   ================= -->
  <!-- ===========       A B S T R A C T    M A P P I N G S          ================= -->
  <!-- ===========                                                   ================= -->
  <!-- ===============================================================================
  If an abstract class or an interface is used an argument type in a method invocation,
  a concrete class must be used to represent the interface or the abstract class.  
  The abstract class mapping feature is designed to map non-abstract class to an interface 
  or abstract class it implements or extends.
  To create an abstract type mapping, use the <abstractClassMapping> element. The <className>
  subelement must define the name of an abstract class or an interface. The <mappedClassName>
  element must contain the name of the concrete class providing an implementation of the
  specified interface or the abstract class.
  ==================================================================================== -->
  <abstractClassMappings>
    <abstractClassMapping>
        <className>System.Collections.ICollection</className>
        <mappedClassName>System.Collections.ArrayList</mappedClassName>
    </abstractClassMapping>

    <abstractClassMapping>
        <className>System.Collections.IList</className>
        <mappedClassName>System.Collections.ArrayList</mappedClassName>
    </abstractClassMapping>

    <abstractClassMapping>
        <className>System.Collections.IDictionary</className>
        <mappedClassName>System.Collections.Hashtable</mappedClassName>
    </abstractClassMapping>

    <abstractClassMapping>
        <className>System.Collections.Generic.IList`1</className>
        <mappedClassName>System.Collections.Generic.List`1</mappedClassName>
    </abstractClassMapping>  
       
    <!-- UNCOMMENT THIS FOR IESI COLLECTIONS SUPPORT
    <abstractClassMapping>
        <className>Iesi.Collections.ISet</className>
        <mappedClassName>Iesi.Collections.HybridSet</mappedClassName>
    </abstractClassMapping>
    -->
  </abstractClassMappings>
  
  
  
  
  <!-- =============================================================================== -->
  <!-- ===========                                                   ================= -->
  <!-- ===========   C U S T O M   T Y P E   S E R I A L I Z E R S   ================= -->
  <!-- ===========                                                   ================= -->
  <!-- ===============================================================================
  Type serializers are responsible for writing .NET objects to the AMF format. WebORB
  provides support for most common types as well as an ability to override or extend the
  default behavior.
  Use <customWriter> element to register new custom serializers. Each writer must be declared
  as a mapping between the type it is responsible for serializing objects of class defined in \
  <className> and the class name of the actual writer class <writerClassName>. 
  Custom writer class must implement the Weborb.Writer.ITypeWriter interface and must 
  have default no-argument constructor
  ==================================================================================== -->
  <customWriters>
    <!--
    <customWriter>
        <className></className>
        <writerClassName></writerClassName>
    </customWriter>
    -->  
    <customWriter>
        <className>Weborb.Messaging.Channel.SubscriberInfo</className>
        <writerClassName>Weborb.Messaging.Channel.SubscriberInfoWriter</writerClassName>
    </customWriter>

    <customWriter>
        <className>Weborb.Messaging.Channel.SubscribersEvent</className>
        <writerClassName>Weborb.Messaging.Channel.SubscribersEventWriter</writerClassName>
    </customWriter> 
    
    <customWriter>
        <className>Weborb.V3Types.BodyHolder</className>
        <writerClassName>Weborb.V3Types.BodyHolderWriter</writerClassName>
    </customWriter> 
    
    <customWriter>
        <className>Weborb.Messaging.Net.RTMP.Status.StatusObject</className>
        <writerClassName>Weborb.Messaging.Net.RTMP.Status.StatusObjectWriter</writerClassName>
    </customWriter>

    <customWriter>
      <className>Weborb.Messaging.Net.RTMP.Status.Status</className>
      <writerClassName>Weborb.Messaging.Net.RTMP.Status.StatusWriter</writerClassName>
    </customWriter>
    
  </customWriters>
  
  


 <!-- =============================================================================== -->
  <!-- ===========                                                   ================= -->
  <!-- ===========                 D A T A S E T S                   ================= -->
  <!-- ===========                                                   ================= -->
  <!-- ===============================================================================
  The datasets node controls various serialization aspects of System.Data.DataSet.
  These settings apply only to Flash and AJAX clients. Dataset serialization to 
  Flex clients follow different rules. Flex clients receive data sets as AS objects where
  keys are mapped to the table names and values are arrays of objects. Each object 
  represents a row in the corresponding table.
  AJAX and Flash clients receive dataset as a RecordSet object. 
  ==================================================================================== -->
  <datasets>
    <!--  Controls how many records from data tables are returned with the first request.  -->
      <defaultPageSize>10</defaultPageSize>
    <!-- WebORB 3.2 changed how DataSet objects are serialized to Flash and AJAX clients.
         The default serialization logic writes DataSets as AS objects with the table names used
         as the keys and values are arrays of row objects. Use the <legacySerialization>
         node to change the serialization format to the pre-3.2 algorithm, where DataSets are
         serialized as array or arrays. If legacy serialization is set to 'yes', DataSets are 
         serialized as arrays of arrays IF there is more than one table in a dataset. Otherwise, 
         if a dataset has just one table, it is serialized as an array of row objects. -->
    <legacySerialization>yes</legacySerialization>
  </datasets>



    
 <!-- =============================================================================== -->
  <!-- ===========                                                   ================= -->
  <!-- ===========                 S E C U R I T Y                   ================= -->
  <!-- ===========                                                   ================= -->
  <!-- ===============================================================================
  Security configuration consists of declaration of protected resources and
  access constraints. The resources are described by the <secure-resource>
  elements, access constraints are defined with the <access-constraint>
  element. Access constraints are not coupled to the resources, these are
  generic definitions of access limitations. One can define multiple constraints
  for the group of users/computers. A resource lists all the applicable
  constraints via the <constrain-name> elements.
  ==================================================================================== -->
  <security>
  <!--
    the <deploymentMode> element controls how the classes and assemblies in the WebORB-enabled
    application are exposed to the flash remoting clients.
    The 'open system' deployment mode exposes ALL classes in the application to Flash clients. 
    Security restrictions for the individual methods, classes and namespaces can still apply.
    The 'closed system' deployment model denies access to ALL classes except for the ones explicitly
    exposed with the <secure-resource> elements. 
    -->
    <deploymentMode>open</deploymentMode>

    <!--
    Authentication handler is responsible for authenticating user credentials passed along
    with an invocation. If specified, the handler is invoked every time when the credentials
    are passed along with an invocation. Handler invocation takes place before any WebORB 
    does and invocation processing. If the credentials cannot be authenticated, 
    FlashORBAuthenticationException must be thrown to indicate the failure. Error message 
    and error code from passed into the exception constructor are delivered to the client.
    Class specified in the authenticationHandler must implement the Weborb.Security.IAuthenticationHandler
    interface.
    -->
    <authenticationHandler>Weborb.Security.WebORBAuthenticationHandler</authenticationHandler>

    <!--
    Authorization handler is responsible for making a decision whether a request to access a resource
    should be allowed. The default implementation of the authorization handler checks if any of the 
    access constraints associated with the resource grant or deny access to the resource. 
    An authorization handler must implement the Weborb.Security.IAuthorizationHandler interface and 
    must have a default no-argument constructor. To override the global authorization handler, 
    individual services may have their own service-level authorization handler. If one is specified, 
    it takes priority over the the global handler when the resource is accessed.
    -->
    <authorizationHandler>Weborb.Security.WebORBAuthorizationHandler</authorizationHandler>
    
    
    <!--
    The roles provider is a class implementing the Weborb.Security.IRolesProvider interface. An
    implementation must return a list of security roles the application can be secured with.
    Administrator can use the roles in the management console to restrict access to the code.
    -->
    <rolesProvider>Weborb.Security.WebORBRolesProvider</rolesProvider>
    
    
    <secure-resources>
      <secure-resource>
        <!--
        method - name of the method in the format of serviceid.methodname
        service - id of the service to secure (fully qualified class name, WSDL URL)
        assembly name - name of the assembly to secure with the specified containt(s)
        namespace - name of the namespace, in the form of My.Assembly.*        
        named service - name of the resource as it is defined in the named services section
        -->
        <resource>ORBSecurity</resource>

        <!--
        Specify the name of a constraint to secure the resource.
        Multiple constraint-name elements are allowed
        -->
        <constraint-name>localhost constraint</constraint-name>
      </secure-resource>

      <secure-resource>
         <resource>Weborb.Management.*</resource>
         
      <constraint-name>Constraint.Grant.Weborb.Management.*</constraint-name></secure-resource>


      <secure-resource>
         <resource>Weborb.Examples.AccountBalance</resource>
         <constraint-name>noone</constraint-name>
      </secure-resource>

      <secure-resource>
         <resource>Weborb.Examples.InvocationTests.SecureTest</resource>
         <constraint-name>noone</constraint-name>
      </secure-resource>

      
<!--
      <secure-resource>
         <resource>Weborb.Management.*</resource>
         <constraint-name>everyone</constraint-name>
      </secure-resource>

      <secure-resource>
         <resource>WeborbManagement</resource>
         <constraint-name>everyone</constraint-name>
      </secure-resource>

      <secure-resource>
         <resource>WeborbConfiguration</resource>
         <constraint-name>everyone</constraint-name>
      </secure-resource>
-->
      
      <!-- 
      ****************************************************
      Security declaration for the system level resources.
      These declarations must be present in the config file
      when WebORB runs in the 'closed system' mode.
      The default access level is 'everyone', thus exposing
      WebORB itself (but not the deployed application) to
      all potential clients. 
      *****************************************************
      -->
      <secure-resource>
         <resource>flashorbHttpHandler</resource>
         <constraint-name>everyone</constraint-name>
      </secure-resource>
      <secure-resource>
         <resource>flashorbInspector</resource>
         <constraint-name>everyone</constraint-name>
      </secure-resource>
      <secure-resource>
         <resource>flashorbInvoker</resource>
         <constraint-name>everyone</constraint-name>
      </secure-resource>
      <secure-resource>
         <resource>flashorbObjectHandler</resource>
         <constraint-name>everyone</constraint-name>
      </secure-resource>
      <secure-resource>
         <resource>flashorbWebServiceHandler</resource>
         <constraint-name>everyone</constraint-name>
      </secure-resource>                  
      <secure-resource>
         <resource>Weborb.Dispatch.V3Dispatcher</resource>
         <constraint-name>everyone</constraint-name>
      </secure-resource>                        
      
      <!-- end of system level resources -->

      <secure-resource>
         <resource>serverInfo</resource>
         <constraint-name>localhost constraint</constraint-name>
      </secure-resource>
      <secure-resource>
         <resource>Administration</resource>
         <constraint-name>localhost constraint</constraint-name>
      </secure-resource>
      <secure-resource>
         <resource>CallTraceBrowser</resource>
         <constraint-name>localhost constraint</constraint-name>
      </secure-resource>      
      <secure-resource>
         <resource>SingleIPRestriction</resource>
         <constraint-name>localhost constraint</constraint-name>
      </secure-resource>        
      <secure-resource>
         <resource>IPRangeRestriction</resource>
         <constraint-name>localhost constraint</constraint-name>
      </secure-resource>        
      <secure-resource>
         <resource>HostNameRestriction</resource>
         <constraint-name>localhost constraint</constraint-name>
      </secure-resource>        
      <secure-resource>
         <resource>RoleNameRestriction</resource>
         <constraint-name>localhost constraint</constraint-name>
      </secure-resource>        
      <secure-resource>
         <resource>System.*</resource>
         <constraint-name>localhost constraint</constraint-name>
      </secure-resource>
      <secure-resource>
         <resource>Microsoft.*</resource>
         <constraint-name>localhost constraint</constraint-name>
      </secure-resource>
    <secure-resource><resource>Weborb.Examples.Security.SecureProducts.getProducts</resource><constraint-name>Constraint.Grant.Weborb.Examples.Security.SecureProducts.getProducts</constraint-name></secure-resource></secure-resources> 

    <access-constraints>
      <!--
      Define access constaints with the <access-constraint> elements.
      The action attribute is required. valid values are "grant" and "reject".
      A single access-constraint element may have a combination of the following
      constraints:
            - zero or more IP address
            - zero or more IP range
            - zero or more hostnames
            - zero or more user roles
            - zero or more java package name patterns
      A constraint element must have a name, so it can be reused for securing
      multiple resources
      -->
      <access-constraint action="grant">

        <!--
        Name of the access constraint
        -->
        <name>localhost constraint</name>
        <!--
        This can be either a single ip address (212.45.21.112)
        or a mask of ip addresses (212.45.*.*)
        Multiple IP elements allowed

        <IP></IP>
        -->

        <!--
        Range of ip addresses. Use either specific addresses or masks.
        Multiple IPrange elements allowed

        <IPrange>
          <subnet-address></subnet-address>
          <subnet-mask></subnet-mask>
        </IPrange>
        -->

        <!--
        this can be either a single hostname (themidnightcoders.com),
        or a pattern of host names (*.themidnightcoders.com)
        Multiple hostname elements allowed
        -->
        <hostname>localhost</hostname>

        <!--
        Define role-based access constrains using the role element. The roles must be
        defined using in acl.xml file. Multiple <role> elements allowed

        <role></role>
        -->
      </access-constraint>
      <access-constraint action="grant">
        <name>everyone</name>
        <IP>*.*.*.*</IP>
      </access-constraint>
      
      <access-constraint action="grant">
        <name>everyone</name>
        <IP>*.*.*.*</IP>
      </access-constraint>

     <access-constraint action="reject">
       <name>noone</name>
       <IP>*.*.*.*</IP>
     </access-constraint>
    <access-constraint action="grant"><name>Constraint.Grant.Weborb.Examples.Security.SecureProducts.getProducts</name><role>administrator</role></access-constraint><access-constraint action="grant"><name>Constraint.Grant.Weborb.Management.*</name><hostname>127.0.0.1</hostname></access-constraint></access-constraints>
  </security> 
  
  <acl>
    <user>
        <name>admin</name>
        <password>changeme</password>
        <role>administrator</role>
    </user>
    <user>
        <name>testuser</name>
        <password>password</password>
        <role>examplesuser</role>
    </user>
  </acl>

  <deployment>
    <enableConsoleUpload>true</enableConsoleUpload>
  </deployment>

  <!-- =============================================================================== -->
  <!-- ===========                                                   ================= -->
  <!-- ===========   C R O S S - O R I G I N   S E C U R I T Y       ================= -->
  <!-- ===========                                                   ================= -->
  <!-- ===============================================================================
  For an explanation of cross-origin access control see the following page:
  https://developer.mozilla.org/en/http_access_control
  WebORB cross-origin access control configuration provides a way to grant access to the 
  AJAX requests for the pages loaded from a server other than the one where WebORB is running.
  This also includes the scenario when a page is loaded from the file system rather than 
  a web server. The <cross-origin> element may have any number of <origin> child elements.
  Each <origin> element contains confiruation applicable to a particular origin. Each origin
  is identified by the host name configured in the <host> element. The <method> element
  lists the HTTP methods allowed for the given origin. The <allow-headers> element is a collection 
  of custom headers allowed for the origin. If the value is REQUEST, the headers allowed from the
  origin will be copied from the request. Finally the <max-age> element specifies the number
  or seconds the client will cache the results of a preflight request for.
  ==================================================================================== -->
  <cross-origin>
    <origin>
      <host>*</host>
      <methods>GET,POST</methods>
      <allow-headers>REQUEST</allow-headers>
      <max-age>1728000</max-age>
    </origin>
  </cross-origin>  
    
  <cluster name="cluster-1">
      <enabled>false</enabled>
      <uri>weborb5</uri>
      <nodeAddress>10.0.1.*</nodeAddress>
  </cluster>

  <cloud>
    <weborb.emailaddress></weborb.emailaddress>
    <weborb.subscriber.id></weborb.subscriber.id>
  </cloud>  
  
  <websockets>
   </websockets>
    
</weborb>
</configuration>
