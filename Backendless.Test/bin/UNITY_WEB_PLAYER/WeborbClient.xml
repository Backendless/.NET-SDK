<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WeborbClient</name>
    </assembly>
    <members>
        <member name="T:Weborb.Messaging.Server.Persistence.RamPersistence">
            Persistence implementation that stores the objects in memory.
            This serves as default persistence if nothing has been configured.
        </member>
        <member name="T:Weborb.Messaging.Api.Persistance.IPersistenceStore">
            Storage for persistent objects. 
        </member>
        <member name="M:Weborb.Messaging.Api.Persistance.IPersistenceStore.save(Weborb.Messaging.Api.Persistance.IPersistable)">
            Persist given object.
             
            @param obj
            		Object to store
            @return     <code>true</code> on success, <code>false</code> otherwise
        </member>
        <member name="M:Weborb.Messaging.Api.Persistance.IPersistenceStore.load(System.String)">
            Load a persistent object with the given name.  The object must provide
            either a constructor that takes an input stream as only parameter or an
            empty constructor so it can be loaded from the persistence store.
            
            @param name
            		the name of the object to load
            @return The loaded object or <code>null</code> if no such object was
                    found
        </member>
        <member name="M:Weborb.Messaging.Api.Persistance.IPersistenceStore.load(Weborb.Messaging.Api.Persistance.IPersistable)">
            Load state of an already instantiated persistent object.
            
            @param obj
            		the object to initializ
            @return true if the object was initialized, false otherwise
        </member>
        <member name="M:Weborb.Messaging.Api.Persistance.IPersistenceStore.remove(Weborb.Messaging.Api.Persistance.IPersistable)">
            Delete the passed persistent object.
             
            @param obj
            		the object to delete
            @return        <code>true</code> if object was persisted and thus can be removed, <code>false</code> otherwise
        </member>
        <member name="M:Weborb.Messaging.Api.Persistance.IPersistenceStore.remove(System.String)">
            Delete the persistent object with the given name.
             
            @param name
            		the name of the object to delete
            @return        <code>true</code> if object was persisted and thus can be removed, <code>false</code> otherwise
        </member>
        <member name="M:Weborb.Messaging.Api.Persistance.IPersistenceStore.getObjectNames">
            Return iterator over the names of all already loaded objects in the
            storage.
            
            @return Iterator over all object names
        </member>
        <member name="M:Weborb.Messaging.Api.Persistance.IPersistenceStore.getObjects">
            Return iterator over the already loaded objects in the storage.
            
            @return Iterator over all objects
        </member>
        <member name="F:Weborb.Messaging.Server.Persistence.RamPersistence.PERSISTENCE_NO_NAME">
            This is used in the id for objects that have a name of <code>null</code> *
        </member>
        <member name="F:Weborb.Messaging.Server.Persistence.RamPersistence.objects">
            Map for persistable objects
        </member>
        <member name="M:Weborb.Messaging.Server.Persistence.RamPersistence.#ctor(Weborb.Messaging.Api.IScope)">
            Creates RAM persistence object from scope
            @param scope                Scope
        </member>
        <!-- Badly formed XML comment ignored for member "M:Weborb.Messaging.Server.Persistence.RamPersistence.getObjectName(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Weborb.Messaging.Server.Persistence.RamPersistence.getObjectPath(System.String,System.String)" -->
        <member name="M:Weborb.Messaging.Server.Persistence.RamPersistence.getObjectId(Weborb.Messaging.Api.Persistance.IPersistable)">
            Get object id
            @param object               Persistable object whose id is asked for
            @return                     Given persistable object id
        </member>
        <member name="M:Weborb.Messaging.Server.Persistence.RamPersistence.save(Weborb.Messaging.Api.Persistance.IPersistable)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Persistence.RamPersistence.load(System.String)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Persistence.RamPersistence.load(Weborb.Messaging.Api.Persistance.IPersistable)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Persistence.RamPersistence.remove(Weborb.Messaging.Api.Persistance.IPersistable)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Persistence.RamPersistence.remove(System.String)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Persistence.RamPersistence.getObjectNames">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Persistence.RamPersistence.getObjects">
            {@inheritDoc} 
        </member>
        <member name="T:Weborb.Messaging.Server.IO.IStreamableFileFactory">
            Scope service extension that provides method to get streamable file services set
        </member>
        <member name="T:Weborb.Messaging.Api.IScopeService">
            <summary>
            Base marker interface for all scope services. Used by the <see cref="T:Weborb.Messaging.Api.ScopeUtils"/> to lookup services 
            defined as beans in Spring.NET application context. A scope service usually can perform various 
            tasks on a scope like managing shared objects, streams, etc.
            </summary>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.IStreamableFileFactory.getServices">
             Getter for services
            
             @return  Set of streamable file services
        </member>
        <member name="M:Weborb.Messaging.Server.IO.IStreamableFile.getReader">
             Returns a reader to parse and read the tags inside the file.
            
             @return the reader
        </member>
        <member name="M:Weborb.Messaging.Server.IO.IStreamableFile.getWriter">
             Returns a writer that creates a new file or truncates existing contents.
            
             @return the writer
        </member>
        <member name="M:Weborb.Messaging.Server.IO.IStreamableFile.getAppendWriter">
             Returns a Writer which is setup to append to the file.
            
             @return the writer
        </member>
        <member name="T:Weborb.Messaging.Api.ICastingAttributeStore">
            Attribute storage with automatic object casting support.
        </member>
        <member name="M:Weborb.Messaging.Api.IAttributeStore.getAttributeNames">
            Get the attribute names
            @return set containing all attribute names
        </member>
        <member name="M:Weborb.Messaging.Api.IAttributeStore.getAttributes">
            Get the attributes. The resulting map will be read-only.
            
            @return map containing all attributes
        </member>
        <member name="M:Weborb.Messaging.Api.IAttributeStore.setAttribute(System.String,System.Object)">
            Set an attribute on this object
            @param name  the name of the attribute to change
            @param value the new value of the attribute
            @return true if the attribute value changed otherwise false
        </member>
        <member name="M:Weborb.Messaging.Api.IAttributeStore.setAttributes(System.Collections.Generic.IDictionary{System.String,System.Object})">
            Set multiple attributes on this object
            @param values the attributes to set
        </member>
        <member name="M:Weborb.Messaging.Api.IAttributeStore.setAttributes(Weborb.Messaging.Api.IAttributeStore)">
            Set multiple attributes on this object
            @param values the attributes to set
        </member>
        <member name="M:Weborb.Messaging.Api.IAttributeStore.getAttribute(System.String)">
            Return the value for a given attribute.
            @param name the name of the attribute to get
            @return the attribute value or null if the attribute doesn't exist
        </member>
        <!-- Badly formed XML comment ignored for member "M:Weborb.Messaging.Api.IAttributeStore.getAttribute(System.String,System.Object)" -->
        <member name="M:Weborb.Messaging.Api.IAttributeStore.hasAttribute(System.String)">
            Check the object has an attribute
            @param name the name of the attribute to check
            @return true if the attribute exists otherwise false
        </member>
        <member name="M:Weborb.Messaging.Api.IAttributeStore.removeAttribute(System.String)">
            Removes an attribute
            @param name the name of the attribute to remove
            @return true if the attribute was found and removed otherwise false
        </member>
        <member name="M:Weborb.Messaging.Api.IAttributeStore.removeAttributes">
            Remove all attributes
        </member>
        <member name="M:Weborb.Messaging.Api.ICastingAttributeStore.getBoolAttribute(System.String)">
            Get Boolean attribute by name
            
            @param name
                       Attribute name
            @return		Attribute
        </member>
        <member name="M:Weborb.Messaging.Api.ICastingAttributeStore.getByteAttribute(System.String)">
            Get Byte attribute by name
            
            @param name
                       Attribute name
            @return		Attribute
        </member>
        <member name="M:Weborb.Messaging.Api.ICastingAttributeStore.getDoubleAttribute(System.String)">
            Get Double attribute by name
            
            @param name
                       Attribute name
            @return		Attribute
        </member>
        <member name="M:Weborb.Messaging.Api.ICastingAttributeStore.getIntAttribute(System.String)">
            Get Integer attribute by name
            
            @param name
                       Attribute name
            @return		Attribute
        </member>
        <member name="M:Weborb.Messaging.Api.ICastingAttributeStore.getListAttribute(System.String)">
            Get List attribute by name
            
            @param name
                       Attribute name
            @return		Attribute
        </member>
        <member name="M:Weborb.Messaging.Api.ICastingAttributeStore.getLongAttribute(System.String)">
            Get boolean attribute by name
            
            @param name
                       Attribute name
            @return		Attribute
        </member>
        <member name="M:Weborb.Messaging.Api.ICastingAttributeStore.getMapAttribute(System.String)">
            Get Long attribute by name
            
            @param name
                       Attribute name
            @return		Attribute
        </member>
        <member name="M:Weborb.Messaging.Api.ICastingAttributeStore.getSetAttribute(System.String)">
            Get Set attribute by name
            
            @param name
                       Attribute name
            @return		Attribute
        </member>
        <member name="M:Weborb.Messaging.Api.ICastingAttributeStore.getShortAttribute(System.String)">
            Get Short attribute by name
            
            @param name
                       Attribute name
            @return		Attribute
        </member>
        <member name="M:Weborb.Messaging.Api.ICastingAttributeStore.getStringAttribute(System.String)">
            Get String attribute by name
            
            @param name
                       Attribute name
            @return		Attribute
        </member>
        <member name="F:Weborb.Messaging.Server.AttributeStore.attributes">
            Map for attributes
        </member>
        <member name="M:Weborb.Messaging.Server.AttributeStore.filterNull(System.Collections.Generic.Dictionary{System.String,System.Object})">
            Filter <code>null</code> keys and values from given map.
            
            @param values		the map to filter
            @return filtered map
        </member>
        <member name="M:Weborb.Messaging.Server.AttributeStore.#ctor">
            Creates empty attribute store. Object is not associated with a persistence storage.
        </member>
        <member name="M:Weborb.Messaging.Server.AttributeStore.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            Creates attribute store with initial values. Object is not associated with a persistence storage.
            @param values map
        </member>
        <member name="M:Weborb.Messaging.Server.AttributeStore.#ctor(Weborb.Messaging.Api.IAttributeStore)">
            Creates attribute store with initial values. Object is not associated with a persistence storage.
            @param values map
        </member>
        <member name="M:Weborb.Messaging.Server.AttributeStore.getAttributeNames">
             Get the attribute names. The resulting set will be read-only.
            
             @return set containing all attribute names
        </member>
        <member name="M:Weborb.Messaging.Server.AttributeStore.getAttributes">
             Get the attributes. The resulting map will be read-only.
            
             @return map containing all attributes
        </member>
        <member name="M:Weborb.Messaging.Server.AttributeStore.getAttribute(System.String)">
             Return the value for a given attribute.
            
             @param name the name of the attribute to get
             @return the attribute value or null if the attribute doesn't exist
        </member>
        <!-- Badly formed XML comment ignored for member "M:Weborb.Messaging.Server.AttributeStore.getAttribute(System.String,System.Object)" -->
        <member name="M:Weborb.Messaging.Server.AttributeStore.hasAttribute(System.String)">
             Check the object has an attribute.
            
             @param name the name of the attribute to check
             @return true if the attribute exists otherwise false
        </member>
        <member name="M:Weborb.Messaging.Server.AttributeStore.setAttribute(System.String,System.Object)">
             Set an attribute on this object.
            
             @param name  the name of the attribute to change
             @param value the new value of the attribute
             @return true if the attribute value changed otherwise false
        </member>
        <member name="M:Weborb.Messaging.Server.AttributeStore.setAttributes(System.Collections.Generic.IDictionary{System.String,System.Object})">
             Set multiple attributes on this object.
            
             @param values the attributes to set
        </member>
        <member name="M:Weborb.Messaging.Server.AttributeStore.setAttributes(Weborb.Messaging.Api.IAttributeStore)">
             Set multiple attributes on this object.
            
             @param values the attributes to set
        </member>
        <member name="M:Weborb.Messaging.Server.AttributeStore.removeAttribute(System.String)">
             Remove an attribute.
            
             @param name the name of the attribute to remove
             @return true if the attribute was found and removed otherwise false
        </member>
        <member name="M:Weborb.Messaging.Server.AttributeStore.removeAttributes">
            Remove all attributes.
        </member>
        <member name="M:Weborb.Messaging.Server.AttributeStore.getBoolAttribute(System.String)">
             Get Boolean attribute by name
            
             @param name Attribute name
             @return Attribute
        </member>
        <member name="M:Weborb.Messaging.Server.AttributeStore.getByteAttribute(System.String)">
             Get Byte attribute by name
            
             @param name Attribute name
             @return Attribute
        </member>
        <member name="M:Weborb.Messaging.Server.AttributeStore.getDoubleAttribute(System.String)">
             Get Double attribute by name
            
             @param name Attribute name
             @return Attribute
        </member>
        <member name="M:Weborb.Messaging.Server.AttributeStore.getIntAttribute(System.String)">
             Get Integer attribute by name
            
             @param name Attribute name
             @return Attribute
        </member>
        <member name="M:Weborb.Messaging.Server.AttributeStore.getListAttribute(System.String)">
             Get List attribute by name
            
             @param name Attribute name
             @return Attribute
        </member>
        <member name="M:Weborb.Messaging.Server.AttributeStore.getLongAttribute(System.String)">
             Get boolean attribute by name
            
             @param name Attribute name
             @return Attribute
        </member>
        <member name="M:Weborb.Messaging.Server.AttributeStore.getMapAttribute(System.String)">
             Get Long attribute by name
            
             @param name Attribute name
             @return Attribute
        </member>
        <member name="M:Weborb.Messaging.Server.AttributeStore.getSetAttribute(System.String)">
             Get Set attribute by name
            
             @param name Attribute name
             @return Attribute
        </member>
        <member name="M:Weborb.Messaging.Server.AttributeStore.getShortAttribute(System.String)">
             Get Short attribute by name
            
             @param name Attribute name
             @return Attribute
        </member>
        <member name="M:Weborb.Messaging.Server.AttributeStore.getStringAttribute(System.String)">
             Get String attribute by name
            
             @param name Attribute name
             @return Attribute
        </member>
        <member name="M:Weborb.Messaging.Api.IFlowControllable.getParentFlowControllable">
            Return parent IFlowControllable object
            
            @return	parent     Parent flow controllable
        </member>
        <member name="M:Weborb.Messaging.Api.IFlowControllable.getBandwidthConfigure">
            Return bandwidth configuration object. Bandwidth configuration
            allows you to set bandwidth size for audio, video and total amount.
            
            @return	Bandwidth configuration object
        </member>
        <member name="M:Weborb.Messaging.Api.IFlowControllable.setBandwidthConfigure(Weborb.Messaging.Api.IBandwidthConfigure)">
             Setter for bandwidth configuration
            
             @param config Value to set for bandwidth configuration
        </member>
        <member name="M:Weborb.Messaging.Api.IClient.getId">
            Get the unique ID for this client, this will be generated by the server
            if not passed with connect
            @return String containing the id
        </member>
        <member name="M:Weborb.Messaging.Api.IClient.getCreationTime">
            Get the creation time for this client object
            @return long representing the time in milliseconds when this object was
            created
        </member>
        <member name="M:Weborb.Messaging.Api.IClient.getScopes">
            Get a set of scopes
        </member>
        <member name="M:Weborb.Messaging.Api.IClient.getConnections">
            Get a set of connections
        </member>
        <member name="M:Weborb.Messaging.Api.IClient.getConnections(Weborb.Messaging.Api.IScope)">
            Get a set of connections of a given scope.
            
            @param scope
            			scope to get connections for
            @return Set of connections to the passed scope
        </member>
        <member name="M:Weborb.Messaging.Api.IClient.disconnect">
            Closes all the connections
        </member>
        <member name="F:Weborb.Messaging.Server.Client.bandwidthConfig">
              Bandwith configuration context. For each connection server-side application may vary
              broadcasting quality preferences. These are stored in special object of type IBandwidthConfigure
            
              @see  org.red5.server.api.stream.support.SimpleBandwidthConfigure
        </member>
        <member name="M:Weborb.Messaging.Server.Client.getConnections(Weborb.Messaging.Api.IScope)">
             Return client connections to given scope
            
             @param scope           Scope
             @return                Set of connections for that scope
        </member>
        <member name="M:Weborb.Messaging.Server.Client.getBandwidthConfigure">
            Return bandwidth configuration context, that is, broadcasting bandwidth and quality settings for this client
            @return      Bandwidth configuration context
        </member>
        <member name="M:Weborb.Messaging.Server.Client.getParentFlowControllable">
             Parent flow controllable object, that is, parent object that is used to determine client broadcast bandwidth
             settings. In case of base Client class parent is host.
            
             @return     IFlowControllable instance
        </member>
        <member name="M:Weborb.Messaging.Server.Client.setBandwidthConfigure(Weborb.Messaging.Api.IBandwidthConfigure)">
            Set new bandwidth configuration context
            @param config             Bandwidth configuration context
        </member>
        <member name="M:Weborb.Messaging.Server.Client.getContextFromConnection">
             Get the context from anyone of the IConnection.
            
             @return            Context
        </member>
        <member name="M:Weborb.Messaging.Api.Event.IEventHandler.handleEvent(Weborb.Messaging.Api.Event.IEvent)">
            Handle an event
            @param event event to handle
            @return true if event was handled, false if it should bubble
        </member>
        <member name="M:Weborb.Messaging.Api.IConnection.getType">
             Get the connection type
            
             @return string containing one of connection types
        </member>
        <member name="M:Weborb.Messaging.Api.IConnection.getEncoding">
            Get the object encoding (AMF version) for this connection.
            
            @return the used encoding.
        </member>
        <member name="M:Weborb.Messaging.Api.IConnection.initialize(Weborb.Messaging.Api.IClient)">
            Initialize the connection
        </member>
        <member name="M:Weborb.Messaging.Api.IConnection.connect(Weborb.Messaging.Api.IScope)">
            Try to connect to the scope
        </member>
        <member name="M:Weborb.Messaging.Api.IConnection.connect(Weborb.Messaging.Api.IScope,System.Object[])">
            Try to connect to the scope with a list of connection parameters.
        </member>
        <member name="M:Weborb.Messaging.Api.IConnection.isConnected">
             Is the client connected to the scope
            
             @return true if the connection is persistent or polling, otherwise false
        </member>
        <member name="M:Weborb.Messaging.Api.IConnection.close">
            Close this connection, this will disconnect the client from the
            associated scope
        </member>
        <member name="M:Weborb.Messaging.Api.IConnection.getConnectParams">
            Return the parameters that were given in the call to "connect".
            
            @return                 Connection parameters passed from client-side (Flex/Flash application)
        </member>
        <member name="M:Weborb.Messaging.Api.IConnection.getClient">
             Get the client object associated with this connection
            
             @return client object
        </member>
        <member name="M:Weborb.Messaging.Api.IConnection.getHost">
             Get the hostname that the client is connected to. If they connected to an
             IP, the IP address will be returned as a String.
            
             @return String containing the hostname
        </member>
        <member name="M:Weborb.Messaging.Api.IConnection.getRemoteAddress">
            Get the IP address the client is connected from.
            
            @return The IP address of the client
        </member>
        <member name="M:Weborb.Messaging.Api.IConnection.getRemoteAddresses">
            Get the IP addresses the client is connected from. If a client is connected
            through RTMPT and uses a proxy to connect, this will contain all hosts the
            client used to connect to the server.
            
            @return The IP addresses of the client
        </member>
        <member name="M:Weborb.Messaging.Api.IConnection.getRemotePort">
            Get the port the client is connected from.
            
            @return The port of the client
        </member>
        <member name="M:Weborb.Messaging.Api.IConnection.getPath">
             Get the path for this connection
             This is not updated if you switch scope
            
             @return path
        </member>
        <member name="M:Weborb.Messaging.Api.IConnection.getSessionId">
             Get the session id, this may be null
            
             @return session id
        </member>
        <member name="M:Weborb.Messaging.Api.IConnection.getReadMessages">
            Total number of messages read from the connection.
            
            @return          Number of read messages
        </member>
        <member name="M:Weborb.Messaging.Api.IConnection.getWrittenMessages">
            Total number of messages written to the connection.
            
            @return          Number of written messages
        </member>
        <member name="M:Weborb.Messaging.Api.IConnection.getDroppedMessages">
            Total number of messages that have been dropped.
            
            @return          Number of dropped messages
        </member>
        <member name="M:Weborb.Messaging.Api.IConnection.getPendingMessages">
            Total number of messages that are pending to be sent to the connection.
            
            @return          Number of pending messages
        </member>
        <member name="M:Weborb.Messaging.Api.IConnection.getClientBytesRead">
            Return number of written bytes the client reports to have received.
            This is the last value of the BytesRead message received from a client.
            
            @see org.red5.server.net.rtmp.event.BytesRead
            @return number of written bytes received by the client
        </member>
        <member name="M:Weborb.Messaging.Api.IConnection.ping">
            Start measuring the roundtrip time for a packet on the connection.
        </member>
        <member name="M:Weborb.Messaging.Api.IConnection.getLastPingTime">
            Return roundtrip time of last ping command.
            
            @return roundtrip time in milliseconds
        </member>
        <member name="F:Weborb.Messaging.Server.BaseConnection.type">
            Connection type
        </member>
        <member name="F:Weborb.Messaging.Server.BaseConnection.host">
            Connection host
        </member>
        <member name="F:Weborb.Messaging.Server.BaseConnection.remoteAddress">
            Connection remote address
        </member>
        <member name="F:Weborb.Messaging.Server.BaseConnection.remoteAddresses">
            Connection remote addresses
        </member>
        <member name="F:Weborb.Messaging.Server.BaseConnection.remotePort">
            Remote port
        </member>
        <member name="F:Weborb.Messaging.Server.BaseConnection.path">
            Path of scope client connected to
        </member>
        <member name="F:Weborb.Messaging.Server.BaseConnection.sessionId">
            Connection session identifier
        </member>
        <member name="F:Weborb.Messaging.Server.BaseConnection.readMessages">
            Number of read messages
        </member>
        <member name="F:Weborb.Messaging.Server.BaseConnection.writtenMessages">
            Number of written messages
        </member>
        <member name="F:Weborb.Messaging.Server.BaseConnection.droppedMessages">
            Number of dropped messages
        </member>
        <member name="F:Weborb.Messaging.Server.BaseConnection.parms">
              Connection params passed from client with NetConnection.connect call
            
             @see  NetConnection in Flash Media Server Server-side ActionScript guide
        </member>
        <member name="F:Weborb.Messaging.Server.BaseConnection.client">
            Client bound to connection
        </member>
        <member name="F:Weborb.Messaging.Server.BaseConnection.scope">
            Scope that connection belongs to
        </member>
        <member name="F:Weborb.Messaging.Server.BaseConnection.basicScopes">
            Set of basic scopes.
        </member>
        <member name="M:Weborb.Messaging.Server.BaseConnection.#ctor(System.String,System.String,System.String,System.Int32,System.String,System.String,System.Collections.IDictionary)">
            @param type                Connection type
            @param host                Host
            @param remoteAddress       Remote address
            @param remotePort          Remote port
            @param path                Scope path on server
            @param sessionId           Session id
            @param params              Params passed from client
        </member>
        <member name="M:Weborb.Messaging.Server.BaseConnection.initialize(Weborb.Messaging.Api.IClient)">
            Initializes client
            @param client        Client bound to connection
        </member>
        <member name="M:Weborb.Messaging.Server.BaseConnection.getType">
            
             @return
        </member>
        <member name="M:Weborb.Messaging.Server.BaseConnection.getHost">
            
             @return
        </member>
        <member name="M:Weborb.Messaging.Server.BaseConnection.getRemoteAddress">
            
             @return
        </member>
        <member name="M:Weborb.Messaging.Server.BaseConnection.getRemotePort">
            
             @return
        </member>
        <member name="M:Weborb.Messaging.Server.BaseConnection.getPath">
            
             @return
        </member>
        <member name="M:Weborb.Messaging.Server.BaseConnection.getSessionId">
            
             @return
        </member>
        <member name="M:Weborb.Messaging.Server.BaseConnection.getConnectParams">
            Return connection parameters
            @return
        </member>
        <member name="M:Weborb.Messaging.Server.BaseConnection.getClient">
            
             @return
        </member>
        <member name="M:Weborb.Messaging.Server.BaseConnection.isConnected">
            Check whether connection is alive
            @return       true if connection is bound to scope, false otherwise
        </member>
        <member name="M:Weborb.Messaging.Server.BaseConnection.connect(Weborb.Messaging.Api.IScope)">
            Connect to another scope on server
            @param newScope     New scope
            @return             true on success, false otherwise
        </member>
        <member name="M:Weborb.Messaging.Server.BaseConnection.connect(Weborb.Messaging.Api.IScope,System.Object[])">
            Connect to another scope on server with given parameters
            @param newScope        New scope
            @param params          Parameters to connect with
            @return                true on success, false otherwise
        </member>
        <member name="M:Weborb.Messaging.Server.BaseConnection.getScope">
            
             @return
        </member>
        <member name="M:Weborb.Messaging.Server.BaseConnection.close">
            Closes connection
        </member>
        <member name="M:Weborb.Messaging.Server.BaseConnection.notifyEvent(Weborb.Messaging.Api.Event.IEvent)">
            Notified on event
            @param event       Event
        </member>
        <member name="M:Weborb.Messaging.Server.BaseConnection.dispatchEvent(Weborb.Messaging.Api.Event.IEvent)">
            Dispatches event
            @param event       Event
        </member>
        <member name="M:Weborb.Messaging.Server.BaseConnection.handleEvent(Weborb.Messaging.Api.Event.IEvent)">
            Handles event
            @param event        Event
            @return             true if associated scope was able to handle event, false otherwise
        </member>
        <member name="M:Weborb.Messaging.Server.BaseConnection.getBasicScopes">
            
             @return
        </member>
        <member name="M:Weborb.Messaging.Server.BaseConnection.registerBasicScope(Weborb.Messaging.Api.IBasicScope)">
            Registers basic scope
            @param basicScope      Basic scope to register
        </member>
        <member name="M:Weborb.Messaging.Server.BaseConnection.unregisterBasicScope(Weborb.Messaging.Api.IBasicScope)">
             Unregister basic scope
            
             @param basicScope      Unregister basic scope
        </member>
        <member name="M:Weborb.Messaging.Server.BaseConnection.getReadBytes">
            
             @return
        </member>
        <member name="M:Weborb.Messaging.Server.BaseConnection.getWrittenBytes">
            
             @return
        </member>
        <member name="M:Weborb.Messaging.Server.BaseConnection.getReadMessages">
            
             @return
        </member>
        <member name="M:Weborb.Messaging.Server.BaseConnection.getWrittenMessages">
            
             @return
        </member>
        <member name="M:Weborb.Messaging.Server.BaseConnection.getDroppedMessages">
            
             @return
        </member>
        <member name="M:Weborb.Messaging.Server.BaseConnection.getPendingMessages">
            
             @return
        </member>
        <member name="M:Weborb.Messaging.Server.BaseConnection.getPendingVideoMessages(System.Int32)">
            
             @param streamId
             @return
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Status.StatusObject.#ctor">
            Constructs a new Status. 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Status.StatusObject.#ctor(System.String)">
            Creates status object with given status code
            @param code            Status code
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Status.RuntimeStatusObject.setDetails(System.String)">
             Setter for details.
            
             @param details  Status event details
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Status.RuntimeStatusObject.getDetails">
             Getter for details
            
             @return  Status event details
        </member>
        <member name="T:Weborb.Messaging.Net.RTMP.BaseRTMPHandler">
            Base class for all RTMP handlers.
        </member>
        <member name="T:Weborb.Messaging.Net.RTMP.IRTMPHandler">
            RTMP events handler
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.IRTMPHandler.connectionOpened(Weborb.Messaging.Net.RTMP.RTMPConnection,Weborb.Messaging.Net.RTMP.Codec.RTMP)">
            Connection open event
            @param conn          Connection
            @param state         RTMP state
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.IRTMPHandler.messageReceived(Weborb.Messaging.Net.RTMP.RTMPConnection,Weborb.Messaging.Net.RTMP.ProtocolState,System.Object)">
            Message recieved
            @param conn          Connection
            @param state         RTMP state
            @param message       Message
            @throws Exception    Exception
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.IRTMPHandler.messageSent(Weborb.Messaging.Net.RTMP.RTMPConnection,System.Object)">
            Message sent
            @param conn          Connection
            @param message       Message
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.IRTMPHandler.connectionClosed(Weborb.Messaging.Net.RTMP.RTMPConnection,Weborb.Messaging.Net.RTMP.Codec.RTMP)">
            Connection closed
            @param conn          Connection
            @param state         RTMP state
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.BaseRTMPHandler.getStreamId">
             Getter for stream ID.
            
             @return  Stream ID
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.BaseRTMPHandler.setStreamId(System.Int32)">
             Setter for stream Id.
            
             @param id  Stream id
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.BaseRTMPHandler.connectionOpened(Weborb.Messaging.Net.RTMP.RTMPConnection,Weborb.Messaging.Net.RTMP.Codec.RTMP)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.BaseRTMPHandler.messageReceived(Weborb.Messaging.Net.RTMP.RTMPConnection,Weborb.Messaging.Net.RTMP.ProtocolState,System.Object)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.BaseRTMPHandler.messageSent(Weborb.Messaging.Net.RTMP.RTMPConnection,System.Object)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.BaseRTMPHandler.connectionClosed(Weborb.Messaging.Net.RTMP.RTMPConnection,Weborb.Messaging.Net.RTMP.Codec.RTMP)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.BaseRTMPHandler.getHostname(System.String)">
            Return hostname for URL
            @param url          URL
            @return             Hostname from that URL
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.BaseRTMPHandler.onChunkSize(Weborb.Messaging.Net.RTMP.RTMPConnection,Weborb.Messaging.Net.RTMP.Channel,Weborb.Messaging.Net.RTMP.Message.Header,Weborb.Messaging.Net.RTMP.Event.ChunkSize)">
            Chunk size change event handler. Abstract, to be implemented in subclasses.
            @param conn         Connection
            @param channel      Channel
            @param source       Header
            @param chunkSize    New chunk size
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.BaseRTMPHandler.handlePendingCallResult(Weborb.Messaging.Net.RTMP.RTMPConnection,Weborb.Messaging.Net.RTMP.Event.Notify)">
            Handler for pending call result. Dispatches results to all pending call handlers.
            @param conn         Connection
            @param invoke       Pending call result event context
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.BaseRTMPHandler.onInvoke(Weborb.Messaging.Net.RTMP.RTMPConnection,Weborb.Messaging.Net.RTMP.Channel,Weborb.Messaging.Net.RTMP.Message.Header,Weborb.Messaging.Net.RTMP.Event.Notify,Weborb.Messaging.Net.RTMP.Codec.RTMP)">
            Invocation event handler
            @param conn         Connection
            @param channel      Channel
            @param source       Header
            @param invoke       Invocation event context
            @param rtmp		   RTMP connection state
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.BaseRTMPHandler.onPing(Weborb.Messaging.Net.RTMP.RTMPConnection,Weborb.Messaging.Net.RTMP.Channel,Weborb.Messaging.Net.RTMP.Message.Header,Weborb.Messaging.Net.RTMP.Event.Ping)">
            Ping event handler
            @param conn         Connection
            @param channel      Channel
            @param source       Header
            @param ping         Ping event context
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.BaseRTMPHandler.onStreamBytesRead(Weborb.Messaging.Net.RTMP.RTMPConnection,Weborb.Messaging.Net.RTMP.Channel,Weborb.Messaging.Net.RTMP.Message.Header,Weborb.Messaging.Net.RTMP.Event.BytesRead)">
            Stream bytes read event handler
            @param conn              Connection
            @param channel           Channel
            @param source            Header
            @param streamBytesRead   Bytes read event context
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.BaseRTMPHandler.onSharedObject(Weborb.Messaging.Net.RTMP.RTMPConnection,Weborb.Messaging.Net.RTMP.Channel,Weborb.Messaging.Net.RTMP.Message.Header,Weborb.Messaging.Server.SO.SharedObjectMessage)">
            Shared object event handler
            @param conn              Connection
            @param channel           Channel
            @param source            Header
            @param object            Shared object event context
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.BaseRTMPClient.ioHandler">
            I/O handler
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.BaseRTMPClient.sharedObjects">
            Shared objects map
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.BaseRTMPClient.serviceProvider">
            Service provider
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.BaseRTMPClient.serviceInvoker">
            Service invoker
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.BaseRTMPClient.connect(System.String,System.Int32,System.String)">
            Connect RTMP client to server's application via given port
            @param server                 Server
            @param port                   Connection port
            @param application            Application at that server
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.BaseRTMPClient.connect(System.String,System.Int32,System.String,System.Object[])">
            Connect RTMP client to server's application via given port
            @param server                 Server
            @param port                   Connection port
            @param application            Application at that server
            @param parameters             Parameters passed into the application handler
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.BaseRTMPClient.connect(System.String,System.Int32,System.String,System.Object[],Weborb.Messaging.Api.Service.IPendingServiceCallback)">
            Connect RTMP client to server's application via given port with given connection callback
            @param server                Server
            @param port                  Connection port
            @param application           Application at that server
            @param parameters            Parameters passed into the application handler
            @param connectCallback       Connection callback
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.BaseRTMPClient.connect(System.String,System.Int32)">
            Connect RTMP client to server via given port and with given connection parameters
            @param server                 Server
            @param port                   Connection port
            @param connectionParams       Connection parameters
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.BaseRTMPClient.connect(System.String,System.Int32,Weborb.Messaging.Api.Service.IPendingServiceCallback)">
            
            @param server
            @param port
            @param connectionParams
            @param connectCallback
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.BaseRTMPClient.setServiceProvider(System.Object)">
            Register object that provides methods that can be called by the server.
            
            @param serviceProvider         Service provider
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.BaseRTMPClient.invoke(System.String,Weborb.Messaging.Api.Service.IPendingServiceCallback)">
            Invoke a method on the server.
            
            @param method                  Method name
            @param callback                Callback handler
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.BaseRTMPClient.invoke(System.String,System.Object[],Weborb.Messaging.Api.Service.IPendingServiceCallback)">
            Invoke a method on the server and pass parameters.
            
            @param method                 Method
            @param params                 Method call parameters
            @param callback               Callback object
        </member>
        <member name="P:Weborb.Messaging.Net.RTMP.BaseRTMPClient.State">
            <summary>
            Return RTMP state
            </summary>
            <example>
            BaseRTMPClient RTMPClient = new RTMPClient(host, port, app);
            if(RTMPClient.State == Weborb.Messaging.Net.RTMP.Codec.RTMP.STATE_HANDSHAKE
            {
               doSomthing();
            }
            </example>
        </member>
        <member name="M:Weborb.Messaging.Net.RTMPT.RTMPTClient.rawBufferRecieved(Weborb.Messaging.Net.RTMP.RTMPConnection,Weborb.Messaging.Net.RTMP.ProtocolState,Weborb.Messaging.Util.ByteBuffer)">
            Handle raw buffer receipt
            
            @param conn
                       RTMP connection
            @param state
                       Protocol state
            @param in
                       IoBuffer with input raw data
        </member>
        <member name="T:Weborb.Messaging.Constants">
            <summary>
            Summary description for MessageServerConstants.
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Constants.TRANSIENT_PREFIX">
            Prefix for attribute names that should not be made persistent.
        </member>
        <member name="T:Weborb.Messaging.Api.Stream.IStreamPlaybackSecurity">
            Interface for handlers that control access to stream playback.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamPlaybackSecurity.isPlaybackAllowed(Weborb.Messaging.Api.IScope,System.String,System.Int32,System.Int32,System.Boolean)">
            Check if playback of a stream with the given name is allowed.
            
            @param scope
            			Scope the stream is about to be played back from.
            @param name
            			Name of the stream to play.
            @param start
            			Position to start playback from (in milliseconds).
            @param length
            			Duration to play (in milliseconds).
            @param flushPlaylist
            			Flush playlist?
            @return <code>True</code> if playback is allowed, otherwise <code>False</code>
        </member>
        <member name="T:Weborb.Messaging.Api.Stream.IStreamAwareScopeHandler">
            A scope handler that is stream aware.
            
            @author The Red5 Project (red5@osflash.org)
            @author Steven Gong (steven.gong@gmail.com)
        </member>
        <member name="M:Weborb.Messaging.Api.IScopeHandler.start(Weborb.Messaging.Api.IScope)">
            Called when a scope is created for the first time
            @param scope the new scope object
        </member>
        <member name="M:Weborb.Messaging.Api.IScopeHandler.stop(Weborb.Messaging.Api.IScope)">
            Called just before a scope is disposed
        </member>
        <member name="M:Weborb.Messaging.Api.IScopeHandler.connect(Weborb.Messaging.Api.IConnection,Weborb.Messaging.Api.IScope,System.Object[])">
            Called just before every connection to a scope
            @param conn connection object
        </member>
        <member name="M:Weborb.Messaging.Api.IScopeHandler.disconnect(Weborb.Messaging.Api.IConnection,Weborb.Messaging.Api.IScope)">
             Called just after the a connection is disconnected
            
             @param conn connection object
        </member>
        <member name="M:Weborb.Messaging.Api.IScopeHandler.join(Weborb.Messaging.Api.IClient,Weborb.Messaging.Api.IScope)">
            Called just before a client enters the scope
            @param client client object
        </member>
        <member name="M:Weborb.Messaging.Api.IScopeHandler.leave(Weborb.Messaging.Api.IClient,Weborb.Messaging.Api.IScope)">
            Called just after the client leaves the scope
            @param client client object
        </member>
        <member name="M:Weborb.Messaging.Api.IScopeHandler.serviceCall(Weborb.Messaging.Api.IConnection,Weborb.Messaging.Api.Service.IServiceCall)">
            Called when a service is called
            @param call the call object
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamAwareScopeHandler.streamPublishStart(Weborb.Messaging.Api.Stream.IBroadcastStream)">
            A broadcast stream starts being published. This will be called
            when the first video packet has been received.
            
            @param stream
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamAwareScopeHandler.streamRecordStart(Weborb.Messaging.Api.Stream.IBroadcastStream)">
            A broadcast stream starts being recorded. This will be called
            when the first video packet has been received.
            
            @param stream
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamAwareScopeHandler.streamBroadcastStart(Weborb.Messaging.Api.Stream.IBroadcastStream)">
            Notified when a broadcaster starts.
            
            @param stream
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamAwareScopeHandler.streamBroadcastClose(Weborb.Messaging.Api.Stream.IBroadcastStream)">
            Notified when a broadcaster closes.
            
            @param stream
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamAwareScopeHandler.streamSubscriberStart(Weborb.Messaging.Api.Stream.ISubscriberStream)">
            Notified when a subscriber starts.
            
            @param stream
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamAwareScopeHandler.streamSubscriberClose(Weborb.Messaging.Api.Stream.ISubscriberStream)">
            Notified when a subscriber closes.
            
            @param stream
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamAwareScopeHandler.streamPlayItemPlay(Weborb.Messaging.Api.Stream.ISubscriberStream,Weborb.Messaging.Api.Stream.IPlayItem,System.Boolean)">
            Notified when a playlist item plays.
            
            @param stream
            @param item
            @param isLive
                       TODO
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamAwareScopeHandler.streamPlayItemStop(Weborb.Messaging.Api.Stream.ISubscriberStream,Weborb.Messaging.Api.Stream.IPlayItem)">
            Notified when a playlist item stops.
            
            @param stream
            @param item
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamAwareScopeHandler.streamPlayItemPause(Weborb.Messaging.Api.Stream.ISubscriberStream,Weborb.Messaging.Api.Stream.IPlayItem,System.Int32)">
            Notified when a playlist vod item pauses.
            
            @param stream
            @param item
            @param position
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamAwareScopeHandler.streamPlayItemResume(Weborb.Messaging.Api.Stream.ISubscriberStream,Weborb.Messaging.Api.Stream.IPlayItem,System.Int32)">
            Notified when a playlist vod item resumes.
            
            @param stream
            @param item
            @param position
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamAwareScopeHandler.streamPlayItemSeek(Weborb.Messaging.Api.Stream.ISubscriberStream,Weborb.Messaging.Api.Stream.IPlayItem,System.Int32)">
            Notified when a playlist vod item seeks.
            
            @param stream
            @param item
            @param position
        </member>
        <member name="T:Weborb.Messaging.Api.Stream.ISingleItemSubscriberStream">
            A subscriber stream that has only one item for play. 
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStream.getName">
            Get the name of the stream. The name is unique across the server. This is
            just an id of the stream and NOT the name that is used at client side to
            subscribe to the stream. For that name, use
            {@link IBroadcastStream#getPublishedName()}
            
            @return the name of the stream
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStream.getCodecInfo">
            Get Codec info for a stream.
            
            @return
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStream.getScope">
            Get the scope this stream is associated with.
            
            @return scope object
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStream.start">
            Start this stream.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStream.stop">
            Stop this stream.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStream.close">
            Close this stream.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStream.getCreationTime">
            Returns the timestamp at which the stream was created.
            
            @return creation timestamp
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IClientStream.getStreamId">
            Get stream id allocated in a connection.
            
            @return
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IClientStream.getConnection">
            Get connection containing the stream.
            
            @return
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IClientStream.getStreamFlow">
            Get the flow settings for this stream.
            
            @return
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IClientStream.setClientBufferDuration(System.Int32)">
            Set the buffer duration for this stream as requested by the client.
            
            @param bufferTime duration in ms the client wants to buffer
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IClientStream.getClientBufferDuration">
            Get the buffer duration for this stream as requested by the client.
            
            @return bufferTime duration in ms the client wants to buffer
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.ISubscriberStream.play">
            Start playing.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.ISubscriberStream.pause(System.Int32)">
            Pause at a position for current playing item.
            
            @param position
                       Position for pause in millisecond.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.ISubscriberStream.resume(System.Int32)">
            Resume from a position for current playing item.
            
            @param position
                       Position for resume in millisecond.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.ISubscriberStream.stop">
            Stop playing.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.ISubscriberStream.seek(System.Int32)">
            Seek into a position for current playing item.
            
            @param position
                       Position for seek in millisecond.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.ISubscriberStream.isPaused">
            Check if the stream is currently paused.
            
            @return
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.ISubscriberStream.receiveVideo(System.Boolean)">
            Should the stream send video to the client?
            
            @param receive
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.ISubscriberStream.receiveAudio(System.Boolean)">
            Should the stream send audio to the client?
            
            @param receive
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.ISubscriberStream.getState">
            Return the streams state enum.
            
            @return current state
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.ISubscriberStream.setState(Weborb.Messaging.Server.Stream.PlayListStreamStateEnum)">
            Sets the streams state enum.
            
            @param state sets current state
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.ISubscriberStream.onChange(Weborb.Messaging.Server.Stream.PlayListStreamStateEnum,System.Object[])">
            Notification of state change and associated parameters.
            
            @param state new state
            @param changed parameters associated with the change
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.ISingleItemSubscriberStream.setPlayItem(Weborb.Messaging.Api.Stream.IPlayItem)">
             Setter for property 'playItem'.
            
             @param item Value to set for property 'playItem'.
        </member>
        <member name="M:Weborb.Messaging.Api.SO.ISharedObjectService.getSharedObjectNames(Weborb.Messaging.Api.IScope)">
            <summary>
            Get a set of the shared object names
            </summary>
            
            <param name="scope">Scope object</param>
            
            <returns>set containing the shared object names</returns>
        </member>
        <member name="M:Weborb.Messaging.Api.SO.ISharedObjectService.createSharedObject(Weborb.Messaging.Api.IScope,System.String,System.Boolean)">
            <summary>
            Create a new shared object
            </summary>
            
            <param name="scope">Scope object</param>
            <param name="name">the name of the shared object</param>
            <param name="persistent">persistent will the shared object be persistent</param>
            
            <returns><code>true</code> if the shared object was created, otherwise <code>false</code></returns>
        </member>
        <member name="M:Weborb.Messaging.Api.SO.ISharedObjectService.getSharedObject(Weborb.Messaging.Api.IScope,System.String)">
            <summary>
            Get a shared object by name
            </summary>
            
            <param name="scope">Scope object</param>
            <param name="name">the name of the shared object</param>
            
            <returns>shared object, or <code>null</code> if not found</returns>
        </member>
        <member name="M:Weborb.Messaging.Api.SO.ISharedObjectService.getSharedObject(Weborb.Messaging.Api.IScope,System.String,System.Boolean)">
            <summary>
            Get a shared object by name and create it if it doesn't exist.
            </summary>
            
            <param name="scope">the scope to get the shared object from</param>
            <param name="name">the name of the shared object</param>
            <param name="persistent">should the shared object be created persistent</param>
            
            <returns>the shared object</returns>
        </member>
        <member name="M:Weborb.Messaging.Api.SO.ISharedObjectService.hasSharedObject(Weborb.Messaging.Api.IScope,System.String)">
            <summary>
            Check if a shared object exists.
            </summary>
            
            <param name="scope">the scope to check for the shared object</param>
            <param name="name">the name of the shared object</param>
            
            <returns><code>true</code> if the shared object exists, otherwise <code>false</code></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Weborb.Messaging.Api.SO.ISharedObjectService.clearSharedObjects(Weborb.Messaging.Api.IScope,System.String)" -->
        <member name="T:Weborb.Messaging.Api.SO.ISharedObjectListener">
            Notifications about shared object updates.
        </member>
        <member name="M:Weborb.Messaging.Api.SO.ISharedObjectListener.onSharedObjectConnect(Weborb.Messaging.Api.SO.ISharedObjectBase)">
            Called when a client connects to a shared object.
            
            @param so
                       the shared object
        </member>
        <member name="M:Weborb.Messaging.Api.SO.ISharedObjectListener.onSharedObjectDisconnect(Weborb.Messaging.Api.SO.ISharedObjectBase)">
            Called when a client disconnects from a shared object.
            
            @param so
                       the shared object
        </member>
        <member name="M:Weborb.Messaging.Api.SO.ISharedObjectListener.onSharedObjectUpdate(Weborb.Messaging.Api.SO.ISharedObjectBase,System.String,System.Object)">
            Called when a shared object attribute is updated.
            
            @param so
                       the shared object
            @param key
                       the name of the attribute
            @param value
                       the value of the attribute
        </member>
        <member name="M:Weborb.Messaging.Api.SO.ISharedObjectListener.onSharedObjectUpdate(Weborb.Messaging.Api.SO.ISharedObjectBase,Weborb.Messaging.Api.IAttributeStore)">
            Called when multiple attributes of a shared object are updated.
            
            @param so
                       the shared object
            @param values
                       the new attributes of the shared object
        </member>
        <member name="M:Weborb.Messaging.Api.SO.ISharedObjectListener.onSharedObjectUpdate(Weborb.Messaging.Api.SO.ISharedObjectBase,System.Collections.Generic.IDictionary{System.String,System.Object})">
            Called when multiple attributes of a shared object are updated.
            
            @param so
                       the shared object
            @param values
                       the new attributes of the shared object
        </member>
        <member name="M:Weborb.Messaging.Api.SO.ISharedObjectListener.onSharedObjectDelete(Weborb.Messaging.Api.SO.ISharedObjectBase,System.String)">
            Called when an attribute is deleted from the shared object.
            
            @param so
                       the shared object
            @param key
                       the name of the attribute to delete
        </member>
        <member name="M:Weborb.Messaging.Api.SO.ISharedObjectListener.onSharedObjectClear(Weborb.Messaging.Api.SO.ISharedObjectBase)">
            Called when all attributes of a shared object are removed.
            
            @param so
                       the shared object
        </member>
        <member name="M:Weborb.Messaging.Api.SO.ISharedObjectListener.onSharedObjectSend(Weborb.Messaging.Api.SO.ISharedObjectBase,System.String,System.Collections.IList)">
            Called when a shared object method call is sent.
            
            @param so
                       the shared object
            @param method
                       the method name to call
            @param params
                       the arguments
        </member>
        <member name="T:Weborb.Messaging.Api.Messaging.IPipe">
             A pipe is an object that connects message providers and
             message consumers. Its main function is to transport messages
             in kind of ways it provides.
            
             Pipes fire events as they go, these events are common way to work with pipes for
             higher level parts of server.
        </member>
        <member name="T:Weborb.Messaging.Api.Messaging.IMessageInput">
            Input Endpoint for a consumer to connect.
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.IMessageInput.pullMessage">
            Pull message from this input endpoint. Return
            w/o waiting.
            @return The pulled message or <tt>null</tt> if message is
            not available.
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.IMessageInput.pullMessage(System.Int64)">
            Pull message from this input endpoint. Wait
            <tt>wait</tt> milliseconds if message is not available.
            @param wait milliseconds to wait when message is not
            available.
            @return The pulled message or <tt>null</tt> if message is
            not available.
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.IMessageInput.subscribe(Weborb.Messaging.Api.Messaging.IConsumer,System.Collections.IDictionary)">
            Connect to a consumer.
            
            @param consumer         Consumer
            @param paramMap         Parameters map
            @return <tt>true</tt> when successfully subscribed,
            <tt>false</tt> otherwise.
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.IMessageInput.unsubscribe(Weborb.Messaging.Api.Messaging.IConsumer)">
            Disconnect from a consumer.
            
            @param consumer    Consumer to disconnect
            @return <tt>true</tt> when successfully unsubscribed,
            <tt>false</tt> otherwise.
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.IMessageInput.getConsumers">
             Getter for consumers list.
            
             @return Consumers.
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.IMessageInput.sendOOBControlMessage(Weborb.Messaging.Api.Messaging.IConsumer,Weborb.Messaging.Server.Messaging.OOBControlMessage)">
            Send OOB Control Message to all providers on the other side of pipe.
            
            @param consumer
                       The consumer that sends the message
            @param oobCtrlMsg
                       Out-of-band control message
        </member>
        <member name="T:Weborb.Messaging.Api.Messaging.IMessageOutput">
            Output Endpoint for a provider to connect.
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.IMessageOutput.pushMessage(Weborb.Messaging.Api.Messaging.IMessage)">
            Push a message to this output endpoint. May block
            the pusher when output can't handle the message at
            the time.
            @param message Message to be pushed.
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.IMessageOutput.subscribe(Weborb.Messaging.Api.Messaging.IProvider,System.Collections.IDictionary)">
            Connect to a provider. Note that params passed has nothing to deal with
             NetConnection.connect in client-side Flex/Flash RIA.
            
            @param provider       Provider
            @param paramMap       Params passed with connection
            @return <tt>true</tt> when successfully subscribed,
            <tt>false</tt> otherwise.
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.IMessageOutput.unsubscribe(Weborb.Messaging.Api.Messaging.IProvider)">
            Disconnect from a provider.
            
            @param provider       Provider
            @return <tt>true</tt> when successfully unsubscribed,
            <tt>false</tt> otherwise.
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.IMessageOutput.getProviders">
             Getter for providers
            
             @return  Providers
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.IMessageOutput.sendOOBControlMessage(Weborb.Messaging.Api.Messaging.IProvider,Weborb.Messaging.Server.Messaging.OOBControlMessage)">
            Send OOB Control Message to all consumers on the other side of pipe.
            
            @param provider
                       The provider that sends the message
            @param oobCtrlMsg
                       Out-of-band control message
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.IPipe.addPipeConnectionListener(Weborb.Messaging.Api.Messaging.IPipeConnectionListener)">
            Add connection event listener to pipe
            @param listener          Connection event listener
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.IPipe.removePipeConnectionListener(Weborb.Messaging.Api.Messaging.IPipeConnectionListener)">
            Add connection event listener to pipe
            @param listener          Connection event listener
        </member>
        <member name="T:Weborb.Messaging.Api.Messaging.AbstractMessage">
             Abstract base for all messages
            
             @see org.red5.server.messaging.IMessage
        </member>
        <member name="T:Weborb.Messaging.Api.Messaging.IMessage">
             Common interface for all messages.
             <p>Structure of messages is designed according to
             JMS Message interface. Message is composed of header and body.
             Header contains commonly used pre-defined headers
             and extensible headers.</p>
            
             <p>Each message has correlation ID that is never used so far and is subject to be removed in future.</p>
            
             <p>Message has type and number of properties.</p>
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.IMessage.getMessageID">
            Return message id
            @return           Message id
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.IMessage.setMessageID(System.String)">
            Setter for new message id
            @param id        Message id
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.IMessage.getCorrelationID">
            Return correlation id
            @return         Correlation id
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.IMessage.setCorrelationID(System.String)">
            Setter for correlation id
            @param id       Correlation id
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.IMessage.getMessageType">
            Return message type
            @return            Message type
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.IMessage.setMessageType(System.String)">
            Setter for message type
            @param type        Message type
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.IMessage.getBooleanProperty(System.String)">
            Getter for boolean property
            @param name     Boolean property name
            @return         Boolean property
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.IMessage.setBooleanProperty(System.String,System.Boolean)">
                     * Add boolean property to message
                      * @param name    Boolean property name
                     * @param value    Boolean property value
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.IMessage.getByteProperty(System.String)">
            Add byte property to message
            @param name     Byte property name
            @return         Byte property value
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.IMessage.setByteProperty(System.String,System.Byte)">
            Add byte property to message
            @param name     Byte property name
            @param value    Byte property value
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.IMessage.getDoubleProperty(System.String)">
            Return double property by name
            @param name     Double property name
            @return         Double property value
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.IMessage.setDoubleProperty(System.String,System.Double)">
            Add double property to message
            @param name     Double property name
            @param value    Double property value
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.IMessage.getFloatProperty(System.String)">
            Return float property by name
            @param name     Float property name
            @return         Float property value
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.IMessage.setFloatProperty(System.String,System.Single)">
            Add float property to message
            @param name     Float property name
            @param value    Float property value
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.IMessage.getIntProperty(System.String)">
            Return int property by name
            @param name     Int property name
            @return         Int property value
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.IMessage.setIntProperty(System.String,System.Int32)">
            Add int property to message
            @param name     Int property name
            @param value    Int property value
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.IMessage.getLongProperty(System.String)">
            Return long property to message
            @param name     Long property name
            @return         Long property value
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.IMessage.setLongProperty(System.String,System.Int64)">
            Add long property to message
            @param name     Long property name
            @param value    Long property value
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.IMessage.getShortProperty(System.String)">
            Return short property to message
            @param name     Short property name
            @return         Short property value
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.IMessage.setShortProperty(System.String,System.Int16)">
            Add short property to message
            @param name     Short property name
            @param value    Short property value
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.IMessage.getStringProperty(System.String)">
            Return string property to message
            @param name     String property name
            @return         String property value
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.IMessage.setStringProperty(System.String,System.String)">
            Add string property to message
            @param name     String property name
            @param value    String property value
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.IMessage.getObjectProperty(System.String)">
            Return object property to message
            @param name     Object property name
            @return         Object property value
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.IMessage.setObjectProperty(System.String,System.Object)">
            Add object property to message
            @param name     Object property name
            @param value    Object property value
        </member>
        <member name="F:Weborb.Messaging.Api.Messaging.AbstractMessage.messageID">
            {@inheritDoc}
        </member>
        <member name="F:Weborb.Messaging.Api.Messaging.AbstractMessage.correlationID">
            {@inheritDoc}
        </member>
        <member name="F:Weborb.Messaging.Api.Messaging.AbstractMessage.messageType">
            {@inheritDoc}
        </member>
        <member name="F:Weborb.Messaging.Api.Messaging.AbstractMessage.extraHeaders">
            {@inheritDoc}
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.AbstractMessage.getMessageID">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.AbstractMessage.setMessageID(System.String)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.AbstractMessage.getCorrelationID">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.AbstractMessage.setCorrelationID(System.String)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.AbstractMessage.getMessageType">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.AbstractMessage.setMessageType(System.String)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.AbstractMessage.getBooleanProperty(System.String)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.AbstractMessage.setBooleanProperty(System.String,System.Boolean)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.AbstractMessage.getByteProperty(System.String)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.AbstractMessage.setByteProperty(System.String,System.Byte)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.AbstractMessage.getDoubleProperty(System.String)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.AbstractMessage.setDoubleProperty(System.String,System.Double)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.AbstractMessage.getFloatProperty(System.String)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.AbstractMessage.setFloatProperty(System.String,System.Single)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.AbstractMessage.getIntProperty(System.String)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.AbstractMessage.setIntProperty(System.String,System.Int32)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.AbstractMessage.getLongProperty(System.String)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.AbstractMessage.setLongProperty(System.String,System.Int64)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.AbstractMessage.getShortProperty(System.String)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.AbstractMessage.setShortProperty(System.String,System.Int16)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.AbstractMessage.getStringProperty(System.String)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.AbstractMessage.setStringProperty(System.String,System.String)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.AbstractMessage.getObjectProperty(System.String)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.AbstractMessage.setObjectProperty(System.String,System.Object)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.IMetaService.write(Weborb.Messaging.Api.IO.FLV.Meta.IMetaData)">
             Initiates writing of the MetaData
            
             @param meta
             @return void
             @throws IOException
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.IMetaService.writeMetaData(Weborb.Messaging.Api.IO.FLV.Meta.IMetaData)">
             Writes the MetaData
            
             @param IMetaData metaData
             @return void
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.IMetaService.writeMetaCue">
             Writes the Meta Cue Points
            
             @return void
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.IMetaService.readMetaData(Weborb.Messaging.Util.ByteBuffer)">
             Read the MetaData
            
             @return IMetaData metaData
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.IMetaService.readMetaCue">
             Read the Meta Cue Points
            
             @return IMetaCue[] metaCue[]
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.MetaService.getResolver">
            @return Returns the resolver.
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.MetaService.setResolver(Weborb.Messaging.Api.IO.FLV.Meta.Resolver)">
            @param resolver The resolver to set.
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.MetaService.getDeserializer">
            @return Returns the deserializer.
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.MetaService.setDeserializer(Weborb.Messaging.Api.IO.IDeserializer)">
            @param deserializer The deserializer to set.
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.MetaService.getSerializer">
            @return Returns the serializer.
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.MetaService.setSerializer(Weborb.Messaging.Api.IO.ISerializer)">
            @param serializer The serializer to set.
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.MetaService.mergeMeta(Weborb.Messaging.Api.IO.FLV.Meta.IMetaData,Weborb.Messaging.Api.IO.FLV.Meta.IMetaData)">
             Merges the two Meta objects according to user
            
             @param metaData
             @param md
             @return
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.MetaService.injectMetaCue(Weborb.Messaging.Api.IO.FLV.Meta.IMetaCue,Weborb.Messaging.Server.IO.ITag)">
             Injects metadata (Cue Points) into a tag
            
             @param cue
             @param writer
             @param tag
             @return ITag tag
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.MetaService.getTimeInMilliseconds(Weborb.Messaging.Api.IO.FLV.Meta.IMetaCue)">
             Returns a timestamp in milliseconds
            
             @param object
             @return int time
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.MetaService.main(System.String[])">
            @param args
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.MetaService.getFile">
            @return Returns the file.
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.MetaService.setFile(System.IO.FileInfo)">
            @param file The file to set.
        </member>
        <member name="T:Weborb.Messaging.Server.Stream.Support.SimplePlayItem">
            Simple playlist item implementation
        </member>
        <member name="T:Weborb.Messaging.Api.Stream.IPlayItem">
            Playlist item. Each playlist item has name, start time, length in milliseconds and
            message input source.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IPlayItem.getName">
            Get name of item.
            The VOD or Live stream provider is found according
            to this name.
            @return
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IPlayItem.getStart">
            Start time in millisecond.
            
            @return
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IPlayItem.getLength">
            Play length in millisecond.
            
            @return
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IPlayItem.getMessageInput">
            Get a message input for play.
            This object overrides the default algorithm for finding
            the appropriate VOD or Live stream provider according to
            the item name.
            @return
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.Support.SimplePlayItem.length">
            Length
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.Support.SimplePlayItem.size">
            Size
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.Support.SimplePlayItem.name">
            Playlist item name
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.Support.SimplePlayItem.start">
            Start mark
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.Support.SimplePlayItem.msgInput">
            Message source
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.Support.SimplePlayItem.getLength">
            Returns play item length in milliseconds
            
            @return	Play item length in milliseconds
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.Support.SimplePlayItem.getMessageInput">
            Returns IMessageInput object. IMessageInput is an endpoint for a consumer
            to connect.
            
            @return	IMessageInput object
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.Support.SimplePlayItem.getName">
            Returns item name
            
            @return	item name
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.Support.SimplePlayItem.getStart">
            Returns boolean value that specifies whether item can be played
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.Support.SimplePlayItem.getMsgInput">
            Alias for getMessageInput
            
            @return      Message input source
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.Support.SimplePlayItem.setMsgInput(Weborb.Messaging.Api.Messaging.IMessageInput)">
             Setter for message input
            
             @param msgInput Message input
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.Support.SimplePlayItem.setLength(System.Int64)">
             Setter for length
            
             @param length Item length.
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.Support.SimplePlayItem.getSize">
            Returns size in bytes
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.Support.SimplePlayItem.setSize(System.Int64)">
            Set the size in bytes
            
            @param size size in bytes
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.Support.SimplePlayItem.setName(System.String)">
             Setter name
            
             @param name Item name
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.Support.SimplePlayItem.setStart(System.Int64)">
             Setter for start.
            
             @param start Start position.
        </member>
        <member name="T:Weborb.Messaging.Api.Persistance.IPersistable">
            Base interface for objects that can be made persistent.
            
            Every object that complies to this interface must provide either a
            constructor that takes an input stream as only parameter or an empty
            constructor so it can be loaded from the persistence store.
            
            However this is not required for objects that are created by the application
            and initialized afterwards.
            
            @see org.red5.io.object.Input
            @see IPersistenceStore#load(String)
        </member>
        <member name="M:Weborb.Messaging.Api.Persistance.IPersistable.isPersistent">
            Returns <code>true</code> if the object is persistent,
            <code>false</code> otherwise.
            
            @return <code>true</code> if object is persistent, <code>false</code> otherwise
        </member>
        <member name="M:Weborb.Messaging.Api.Persistance.IPersistable.setPersistent(System.Boolean)">
            Set the persistent flag of the object.
            
            @param persistent
            		<code>true</code> if object is persistent, <code>false</code> otherwise
        </member>
        <member name="M:Weborb.Messaging.Api.Persistance.IPersistable.getName">
            Returns the name of the persistent object.
            
            @return Object name
        </member>
        <member name="M:Weborb.Messaging.Api.Persistance.IPersistable.setName(System.String)">
            Set the name of the persistent object.
            
            @param name
            		New object name
        </member>
        <member name="M:Weborb.Messaging.Api.Persistance.IPersistable.getType">
            Returns the type of the persistent object.
            
            @return Object type
        </member>
        <member name="M:Weborb.Messaging.Api.Persistance.IPersistable.getPath">
            Returns the path of the persistent object.
            
            @return Persisted object path
        </member>
        <member name="M:Weborb.Messaging.Api.Persistance.IPersistable.setPath(System.String)">
            Set the path of the persistent object.
            
            @param path
            		New persisted object path
        </member>
        <member name="M:Weborb.Messaging.Api.Persistance.IPersistable.getLastModified">
            Returns the timestamp when the object was last modified.
            
            @return      Last modification date in milliseconds
        </member>
        <member name="M:Weborb.Messaging.Api.Persistance.IPersistable.getStore">
            Returns the persistence store this object is stored in
            
            @return      This object's persistence store
        </member>
        <member name="M:Weborb.Messaging.Api.Persistance.IPersistable.setStore(Weborb.Messaging.Api.Persistance.IPersistenceStore)">
            Store a reference to the persistence store in the object.
            
            @param store
            		Store the object is saved in
        </member>
        <member name="M:Weborb.Messaging.Api.Persistance.IPersistable.serialize(System.IO.Stream)">
            Write the object to the passed output stream.
            
            @param output
            		Output stream to write to
            @throws java.io.IOException     Any I/O exception
        </member>
        <member name="M:Weborb.Messaging.Api.Persistance.IPersistable.deserialize(System.IO.Stream)">
            Load the object from the passed input stream.
            
            @param input
            		Input stream to load from
            @throws java.io.IOException      Any I/O exception
        </member>
        <member name="F:Weborb.Messaging.Server.SO.SharedObject.name">
            Shared Object name (identifier)
        </member>
        <member name="F:Weborb.Messaging.Server.SO.SharedObject.path">
            SO path
        </member>
        <member name="F:Weborb.Messaging.Server.SO.SharedObject.persistent">
            true if the SharedObject was stored by the persistence framework (NOT in database,
            just plain serialization to the disk) and can be used later on reconnection
        </member>
        <member name="F:Weborb.Messaging.Server.SO.SharedObject.persistentSO">
            true if the client / server created the SO to be persistent
        </member>
        <member name="F:Weborb.Messaging.Server.SO.SharedObject.storage">
            Object that is delegated with all storage work for persistent SOs
        </member>
        <member name="F:Weborb.Messaging.Server.SO.SharedObject.version">
            Version. Used on synchronization purposes.
        </member>
        <member name="F:Weborb.Messaging.Server.SO.SharedObject.updateCounter">
            Number of pending update operations
        </member>
        <member name="F:Weborb.Messaging.Server.SO.SharedObject.modified">
            Has changes? flag
        </member>
        <member name="F:Weborb.Messaging.Server.SO.SharedObject.lastModified">
            Last modified timestamp
        </member>
        <member name="F:Weborb.Messaging.Server.SO.SharedObject.ownerMessage">
            Owner event
        </member>
        <member name="F:Weborb.Messaging.Server.SO.SharedObject.syncEvents">
            Synchronization events
        </member>
        <member name="F:Weborb.Messaging.Server.SO.SharedObject.listeners">
            Listeners
        </member>
        <member name="F:Weborb.Messaging.Server.SO.SharedObject.source">
            Event listener, actually RTMP connection
        </member>
        <member name="F:Weborb.Messaging.Server.SO.SharedObject.acquireCount">
            Number of times the SO has been acquired
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObject.#ctor">
            Constructs a new SharedObject. 
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObject.#ctor(System.IO.Stream)">
             Constructs new SO from Input object
             @param input              Input source
             @throws IOException       I/O exception
            
             @see org.red5.io.object.Input
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObject.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.Boolean)">
             Creates new SO from given data map, name, path and persistence option
            
             @param data               Data
             @param name               SO name
             @param path               SO path
             @param persistent         SO persistence
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObject.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.Boolean,Weborb.Messaging.Api.Persistance.IPersistenceStore)">
            Creates new SO from given data map, name, path, storage object and persistence option
            @param data               Data
            @param name               SO name
            @param path               SO path
            @param persistent         SO persistence
            @param storage            Persistence storage
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObject.getName">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObject.setName(System.String)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObject.getPath">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObject.setPath(System.String)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObject.getType">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObject.getLastModified">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObject.isPersistentObject">
             Getter for persistent object
            
             @return  Persistent object
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObject.isPersistent">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObject.setPersistent(System.Boolean)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObject.sendUpdates">
            Send update notification over data channel of RTMP connection
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObject.notifyModified">
            Send notification about modification of SO
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObject.setAttribute(System.String,System.Object)">
            Set value of attribute with given name
            @param name         Attribute name
            @param value        Attribute value
            @return             <code>true</code> if there's such attribute and value was set, <code>false</code> otherwise
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObject.setAttributes(System.Collections.Generic.IDictionary{System.String,System.Object})">
             Set attributes as map.
            
             @param values  Attributes.
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObject.setAttributes(Weborb.Messaging.Api.IAttributeStore)">
             Set attributes as attributes store.
            
             @param values  Attributes.
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObject.removeAttribute(System.String)">
            Removes attribute with given name
            @param name    Attribute
            @return        <code>true</code> if there's such an attribute and it was removed, <code>false</code> otherwise
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObject.sendMessage(System.String,System.Collections.ICollection)">
            Broadcast event to event handler
            @param handler         Event handler
            @param arguments       Arguments
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObject.getVersion">
             Getter for version.
            
             @return  SO version.
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObject.updateVersion">
            Increases version by one
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObject.removeAttributes">
            Remove all attributes (clear Shared Object)
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObject.register(Weborb.Messaging.Api.Event.IEventListener)">
            Register event listener
            @param listener        Event listener
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObject.checkRelease">
            Check if shared object must be released.
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObject.unregister(Weborb.Messaging.Api.Event.IEventListener)">
            Unregister event listener
            @param listener        Event listener
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObject.getListeners">
             Get event listeners.
            
             @return Value for property 'listeners'.
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObject.beginUpdate">
            Begin update of this Shared Object.
            Increases number of pending update operations
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObject.beginUpdate(Weborb.Messaging.Api.Event.IEventListener)">
            Begin update of this Shared Object and setting listener
            @param listener      Update with listener
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObject.endUpdate">
            End update of this Shared Object. Decreases number of pending update operations and
            broadcasts modified event if it is equal to zero (i.e. no more pending update operations).
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObject.serialize(System.IO.Stream)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObject.deserialize(System.IO.Stream)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObject.setStore(Weborb.Messaging.Api.Persistance.IPersistenceStore)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObject.getStore">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObject.clear">
            Deletes all the attributes and sends a clear event to all listeners. The
            persistent data object is also removed from a persistent shared object.
            
            @return <code>true</code> on success, <code>false</code> otherwise
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObject.close">
            Detaches a reference from this shared object, reset it's state, this will destroy the
            reference immediately. This is useful when you don't want to proxy a
            shared object any longer.
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObject.acquire">
            Prevent shared object from being released. Each call to <code>acquire</code>
            must be paired with a call to <code>release</code> so the SO isn't held
            forever. This is only valid for non-persistent SOs.
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObject.isAcquired">
            Check if shared object currently is acquired.
            
            @return <code>true</code> if the SO is acquired, otherwise <code>false</code>
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObject.release">
            Release previously acquired shared object. If the SO is non-persistent,
            no more clients are connected the SO isn't acquired any more, the data
            is released. 
        </member>
        <member name="T:Weborb.Messaging.Api.SO.ISharedObjectBase">
            Base interface for shared objects. Changes to the shared objects are
            propagated to all subscribed clients.
            
            If you want to modify multiple attributes and notify the clients about all
            changes at once, you can use code like this:
            <p>
            <code>
            SharedObject.beginUpdate();<br />
            SharedObject.setAttribute("One", '1');<br />
            SharedObject.setAttribute("Two", '2');<br />
            SharedObject.removeAttribute("Three");<br />
            SharedObject.endUpdate();<br />
            </code>
            </p>
            
            All changes between "beginUpdate" and "endUpdate" will be sent to the clients
            using one notification event.
        </member>
        <member name="T:Weborb.Messaging.Api.SO.ISharedObjectHandlerProvider">
            Supports registration and lookup of shared object handlers.
        </member>
        <member name="T:Weborb.Messaging.Api.Service.IServiceHandlerProvider">
            Supports registration and lookup of service handlers.
        </member>
        <!-- Badly formed XML comment ignored for member "M:Weborb.Messaging.Api.Service.IServiceHandlerProvider.registerServiceHandler(System.String,System.Object)" -->
        <member name="M:Weborb.Messaging.Api.Service.IServiceHandlerProvider.unregisterServiceHandler(System.String)">
            Unregister service handler.
            
            @param name
            			the name of the handler
        </member>
        <member name="M:Weborb.Messaging.Api.Service.IServiceHandlerProvider.getServiceHandler(System.String)">
            Return a previously registered service handler.
            
            @param name
            			the name of the handler to return
            @return the previously registered handler
        </member>
        <member name="M:Weborb.Messaging.Api.Service.IServiceHandlerProvider.getServiceHandlerNames">
            Get list of registered service handler names.
            
            @return the names of the registered handlers
        </member>
        <member name="M:Weborb.Messaging.Api.SO.ISharedObjectHandlerProvider.registerServiceHandler(System.Object)">
            Register an object that provides methods which handle calls without
            a service name to a shared object.
            
            @param handler
            			the handler object
        </member>
        <member name="M:Weborb.Messaging.Api.SO.ISharedObjectBase.getVersion">
            Returns the version of the shared object. The version is incremented
            automatically on each modification.
            
            @return the version of the shared object
        </member>
        <member name="M:Weborb.Messaging.Api.SO.ISharedObjectBase.isPersistentObject">
            Check if the object has been created as persistent shared object by the
            client.
            
            @return true if the shared object is persistent, false otherwise
        </member>
        <member name="M:Weborb.Messaging.Api.SO.ISharedObjectBase.getData">
            Return a map containing all attributes of the shared object. <br />
            NOTE: The returned map will be read-only.
            
            @return a map containing all attributes of the shared object
        </member>
        <member name="M:Weborb.Messaging.Api.SO.ISharedObjectBase.sendMessage(System.String,System.Collections.ICollection)">
            Send a message to a handler of the shared object.
            
            @param handler
                       the name of the handler to call
            @param arguments
                       a list of objects that should be passed as arguments to the
                       handler
        </member>
        <member name="M:Weborb.Messaging.Api.SO.ISharedObjectBase.beginUpdate">
            Start performing multiple updates to the shared object from serverside
            code.
        </member>
        <member name="M:Weborb.Messaging.Api.SO.ISharedObjectBase.beginUpdate(Weborb.Messaging.Api.Event.IEventListener)">
            Start performing multiple updates to the shared object from a connected
            client.
            @param source      Update events listener
        </member>
        <member name="M:Weborb.Messaging.Api.SO.ISharedObjectBase.endUpdate">
            The multiple updates are complete, notify clients about all changes at
            once.
        </member>
        <member name="M:Weborb.Messaging.Api.SO.ISharedObjectBase.addSharedObjectListener(Weborb.Messaging.Api.SO.ISharedObjectListener)">
            Register object that will be notified about update events.
            
            @param listener
            				the object to notify
        </member>
        <member name="M:Weborb.Messaging.Api.SO.ISharedObjectBase.hasSharedObjectListener(Weborb.Messaging.Api.SO.ISharedObjectListener)">
            Checks if shared object listener is already registered
        </member>
        <member name="M:Weborb.Messaging.Api.SO.ISharedObjectBase.removeSharedObjectListener(Weborb.Messaging.Api.SO.ISharedObjectListener)">
            Unregister object to not longer receive update events.
             
            @param listener
            				the object to unregister
        </member>
        <member name="M:Weborb.Messaging.Api.SO.ISharedObjectBase.getSharedObjectListeners">
            Returns a list of shared object listeners
        </member>
        <member name="M:Weborb.Messaging.Api.SO.ISharedObjectBase.lockSO">
            Locks the shared object instance. Prevents any changes to this object by
            clients until the SharedObject.unlock() method is called.
        </member>
        <member name="M:Weborb.Messaging.Api.SO.ISharedObjectBase.unlockSO">
            Unlocks a shared object instance that was locked with
            SharedObject.lock().
        </member>
        <member name="M:Weborb.Messaging.Api.SO.ISharedObjectBase.isLocked">
            Returns the locked state of this SharedObject.
            
            @return true if in a locked state; false otherwise
        </member>
        <member name="M:Weborb.Messaging.Api.SO.ISharedObjectBase.clear">
            Deletes all the attributes and sends a clear event to all listeners. The
            persistent data object is also removed from a persistent shared object.
            
            @return true if successful; false otherwise
        </member>
        <member name="M:Weborb.Messaging.Api.SO.ISharedObjectBase.close">
            Detaches a reference from this shared object, this will destroy the
            reference immediately. This is useful when you don't want to proxy a
            shared object any longer.
        </member>
        <member name="M:Weborb.Messaging.Api.SO.IClientSharedObject.connect(Weborb.Messaging.Api.IConnection)">
            Connect the shared object using the passed connection.
            
            @param conn connect to connect to
        </member>
        <member name="M:Weborb.Messaging.Api.SO.IClientSharedObject.isConnected">
            Check if the shared object is connected to the server.
            
            @return is connected
        </member>
        <member name="M:Weborb.Messaging.Api.SO.IClientSharedObject.disconnect">
            Disconnect the shared object.
        </member>
        <member name="F:Weborb.Messaging.Server.SO.ClientSharedObject.initialSyncReceived">
            Initial synchronization flag
        </member>
        <member name="F:Weborb.Messaging.Server.SO.ClientSharedObject.solisteners">
            Set of listeners
        </member>
        <member name="F:Weborb.Messaging.Server.SO.ClientSharedObject.handlers">
            Set of event handlers
        </member>
        <member name="M:Weborb.Messaging.Server.SO.ClientSharedObject.#ctor(System.String,System.Boolean)">
            Create new client SO with
            
            @param name Shared Object name
            @param persistent Persistence flag
        </member>
        <member name="M:Weborb.Messaging.Server.SO.ClientSharedObject.connect(Weborb.Messaging.Api.IConnection)">
            Connect the shared object using the passed connection.
            
            @param conn Attach SO to given connection
        </member>
        <member name="M:Weborb.Messaging.Server.SO.ClientSharedObject.notifyConnect">
            Notify listeners on event
        </member>
        <member name="M:Weborb.Messaging.Server.SO.ClientSharedObject.notifyDisconnect">
            Notify listeners on disconnect
        </member>
        <member name="M:Weborb.Messaging.Server.SO.ClientSharedObject.notifyUpdate(System.String,System.Object)">
            Notify listeners on update
            
            @param key
                       Updated attribute key
            @param value
                       Updated attribute value
        </member>
        <member name="M:Weborb.Messaging.Server.SO.ClientSharedObject.notifyUpdate(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            Notify listeners on map attribute update
            
            @param key
                       Updated attribute key
            @param value
                       Updated attribute value
        </member>
        <member name="M:Weborb.Messaging.Server.SO.ClientSharedObject.notifyDelete(System.String)">
            Notify listeners on attribute delete
            
            @param key
                       Attribute name
        </member>
        <member name="M:Weborb.Messaging.Server.SO.ClientSharedObject.notifyClear">
            Notify listeners on clear
        </member>
        <member name="M:Weborb.Messaging.Server.SO.ClientSharedObject.notifySendMessage(System.String,System.Collections.IList)">
            Broadcast send event to listeners
            
            @param method
                       Method name
            @param params
                       Params
        </member>
        <member name="M:Weborb.Messaging.Server.SO.ClientSharedObject.registerServiceHandler(System.Object)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.SO.ClientSharedObject.unregisterServiceHandler(System.String)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.SO.ClientSharedObject.registerServiceHandler(System.String,System.Object)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.SO.ClientSharedObject.getServiceHandler(System.String)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.SO.ClientSharedObject.getServiceHandlerNames">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.SO.ClientSharedObject.getAttribute(System.String,System.Object)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.SO.ClientSharedObject.lockSO">
            Locks the shared object instance. Prevents any changes to this object by
            clients until the SharedObject.unlock() method is called.
        </member>
        <member name="M:Weborb.Messaging.Server.SO.ClientSharedObject.unlockSO">
            Unlocks a shared object instance that was locked with
            SharedObject.lock().
        </member>
        <member name="M:Weborb.Messaging.Server.SO.ClientSharedObject.isLocked">
             Returns the locked state of this SharedObject.
            
             @return true if in a locked state; false otherwise
        </member>
        <member name="M:Weborb.Messaging.Server.SO.ClientSharedObject.getBoolAttribute(System.String)">
             Get Boolean attribute by name
            
             @param name Attribute name
             @return Attribute
        </member>
        <member name="M:Weborb.Messaging.Server.SO.ClientSharedObject.getByteAttribute(System.String)">
             Get Byte attribute by name
            
             @param name Attribute name
             @return Attribute
        </member>
        <member name="M:Weborb.Messaging.Server.SO.ClientSharedObject.getDoubleAttribute(System.String)">
             Get Double attribute by name
            
             @param name Attribute name
             @return Attribute
        </member>
        <member name="M:Weborb.Messaging.Server.SO.ClientSharedObject.getIntAttribute(System.String)">
             Get Integer attribute by name
            
             @param name Attribute name
             @return Attribute
        </member>
        <member name="M:Weborb.Messaging.Server.SO.ClientSharedObject.getListAttribute(System.String)">
             Get List attribute by name
            
             @param name Attribute name
             @return Attribute
        </member>
        <member name="M:Weborb.Messaging.Server.SO.ClientSharedObject.getLongAttribute(System.String)">
             Get boolean attribute by name
            
             @param name Attribute name
             @return Attribute
        </member>
        <member name="M:Weborb.Messaging.Server.SO.ClientSharedObject.getMapAttribute(System.String)">
             Get Long attribute by name
            
             @param name Attribute name
             @return Attribute
        </member>
        <member name="M:Weborb.Messaging.Server.SO.ClientSharedObject.getSetAttribute(System.String)">
             Get Set attribute by name
            
             @param name Attribute name
             @return Attribute
        </member>
        <member name="M:Weborb.Messaging.Server.SO.ClientSharedObject.getShortAttribute(System.String)">
             Get Short attribute by name
            
             @param name Attribute name
             @return Attribute
        </member>
        <member name="M:Weborb.Messaging.Server.SO.ClientSharedObject.getStringAttribute(System.String)">
             Get String attribute by name
            
             @param name Attribute name
             @return Attribute
        </member>
        <member name="F:Weborb.Messaging.Server.ConnectionHub.START_TIME">
            Server start time
        </member>
        <member name="M:Weborb.Messaging.Server.ConnectionHub.#ctor(Weborb.Messaging.Net.RTMP.RTMPConnection)">
            Create a new hub object using given connection
            @param conn connection object
        </member>
        <member name="M:Weborb.Messaging.Server.ConnectionHub.#ctor">
            Create a new ConnectionHub object using the connection local to the current thread
            A bit of magic that lets you access the red5 scope from anywhere
        </member>
        <member name="M:Weborb.Messaging.Server.ConnectionHub.getConnectionLocal">
             Get the connection associated with the current thread
            
             @return connection object
        </member>
        <member name="M:Weborb.Messaging.Server.ConnectionHub.getConnection">
             Get the connection object
            
             @return connection object
        </member>
        <member name="M:Weborb.Messaging.Server.ConnectionHub.getScope">
             Get the scope
            
             @return scope object
        </member>
        <member name="M:Weborb.Messaging.Server.ConnectionHub.getClient">
             Get the client
            
             @return client object
        </member>
        <member name="M:Weborb.Messaging.Server.ConnectionHub.getContext">
             Get the spring application context
            
             @return application context
        </member>
        <member name="T:Weborb.Messaging.Net.RTMP.Event.Invoke">
            Remote invocation event
        </member>
        <member name="T:Weborb.Messaging.Net.RTMP.Event.BaseEvent">
            Base abstract class for all RTMP events
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.IRTMPEvent.setSource(Weborb.Messaging.Api.Event.IEventListener)">
             Setter for source
            
             @param source Source
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.IRTMPEvent.getSourceType">
             Getter for source type
            
             @return  Source type
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.IRTMPEvent.setSourceType(System.Byte)">
             Setter for source type
            
             @param sourceType 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.IRTMPEvent.getHeader">
             Getter for header
            
             @return  RTMP packet header
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.IRTMPEvent.setHeader(Weborb.Messaging.Net.RTMP.Message.Header)">
             Setter for header
            
             @param header RTMP packet header
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.IRTMPEvent.getTimestamp">
             Getter for timestamp
            
             @return  Event timestamp
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.IRTMPEvent.setTimestamp(System.Int32)">
             Setter for timestamp
            
             @param timestamp  New event timestamp
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.IRTMPEvent.retain">
            Retain event
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.IRTMPEvent.release">
            Hook to free buffers allocated by the event.
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Event.BaseEvent.type">
            Event type
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Event.BaseEvent.obj">
            Event target object
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Event.BaseEvent.source">
            Event listener
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Event.BaseEvent.timestamp">
            Event listener
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Event.BaseEvent.header">
            Event RTMP packet header
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Event.BaseEvent.refcount">
            Event references count
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Event.BaseEvent.sourceType">
            Source type
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.BaseEvent.#ctor(Weborb.Messaging.Api.Event.EventType)">
            Create new event of given type
            @param type             Event type
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.BaseEvent.#ctor(Weborb.Messaging.Api.Event.EventType,Weborb.Messaging.Api.Event.IEventListener)">
            Create new event of given type
            @param type             Event type
            @param source           Event source
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.BaseEvent.getType">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.BaseEvent.getObject">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.BaseEvent.getHeader">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.BaseEvent.setHeader(Weborb.Messaging.Net.RTMP.Message.Header)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.BaseEvent.hasSource">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.BaseEvent.getSource">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.BaseEvent.setSource(Weborb.Messaging.Api.Event.IEventListener)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.BaseEvent.getDataType">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.BaseEvent.getTimestamp">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.BaseEvent.setTimestamp(System.Int32)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.BaseEvent.retain">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.BaseEvent.release">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.BaseEvent.releaseInternal">
            Rekease event
        </member>
        <member name="T:Weborb.Messaging.Api.Stream.IStreamData">
            Stream data packet
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamData.getData">
             Getter for property 'data'.
            
             @return Value for property 'data'.
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Event.Notify.call">
            Service call
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Event.Notify.data">
            Event data
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Event.Notify.invokeId">
            Invoke id
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Event.Notify.connectionParams">
            Connection parameters
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.Notify.#ctor">
            Constructs a new Notify. 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.Notify.#ctor(Weborb.Messaging.Util.ByteBuffer)">
            Create new notification event with given byte buffer
            @param data       Byte buffer
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.Notify.#ctor(Weborb.Messaging.Api.Service.IServiceCall)">
            Create new notification event with given service call
            @param call        Service call
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.Notify.getDataType">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.Notify.setData(Weborb.Messaging.Util.ByteBuffer)">
             Setter for data
            
             @param data  Data
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.Notify.setCall(Weborb.Messaging.Api.Service.IServiceCall)">
             Setter for call
            
             @param call Service call
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.Notify.getCall">
             Getter for service call
            
             @return  Service call
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.Notify.getData">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.Notify.getInvokeId">
             Getter for invoke id
            
             @return  Invoke id
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.Notify.setInvokeId(System.Int32)">
             Setter for invoke id
            
             @param invokeId  Invoke id
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.Notify.doRelease">
            Release event (nullify call object)
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.Notify.getConnectionParams">
             Getter for connection parameters
            
             @return Connection parameters
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.Notify.setConnectionParams(System.Collections.IDictionary)">
             Setter for connection parameters
            
             @param connectionParams  Connection parameters
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.Notify.ToString">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.Notify.Equals(System.Object)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.Notify.releaseInternal">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.Notify.duplicate">
            Duplicate this Notify message to future injection
            Serialize to memory and deserialize, safe way.
            
            @return  duplicated Notify event
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.Invoke.#ctor(Weborb.Messaging.Util.ByteBuffer)">
            Create new invocation event with given data
            @param data        Event data
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.Invoke.#ctor(Weborb.Messaging.Api.Service.IPendingServiceCall)">
            Create new invocation event with given pending service call
            @param call         Pending call
        </member>
        <member name="T:Weborb.Messaging.Api.Stream.IBroadcastScope">
            Broadcast scope is marker interface that represents object that works as basic scope and
            has pipe connection event dispatching capabilities.
        </member>
        <member name="M:Weborb.Messaging.Api.IBasicScope.hasParent">
            Does this scope have a parent
            @return true if this scope has a parent
        </member>
        <member name="M:Weborb.Messaging.Api.IBasicScope.getParent">
            Get this scopes parent
            @return parent scope, or null if this scope doesn't have a parent
        </member>
        <member name="M:Weborb.Messaging.Api.IBasicScope.getDepth">
            Get the scopes depth, how far down the scope tree is it
            @return depth
        </member>
        <member name="T:Weborb.Messaging.Api.Stream.IStreamService">
            This interface represents the stream methods that can be called throug RTMP.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamService.createStream">
            Create a stream and return a corresponding id.
            
            @return     ID of created stream
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamService.closeStream">
            Close the stream but not deallocate the resources.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamService.deleteStream(System.Int32)">
            Close the stream if not been closed.
            Deallocate the related resources.
            @param streamId          Stram id
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamService.deleteStream(Weborb.Messaging.Api.Stream.IStreamCapableConnection,System.Int32)">
            Delete stream
            @param conn            Stream capable connection
            @param streamId        Stream id
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamService.play(System.Boolean)">
            Play stream without initial stop
            @param dontStop         Stoppage flag
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamService.play(System.String)">
            Play stream with name
            @param name          Stream name
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamService.play(System.String,System.Int32)">
            Play stream with name from start position
            @param name          Stream name
            @param start         Start position
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamService.play(System.String,System.Int32,System.Int32)">
            Play stream with name from start position and for given amount if time
            @param name          Stream name
            @param start         Start position
            @param length        Playback length
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamService.play(System.String,System.Int32,System.Int32,System.Boolean)">
            Publishes stream from given position for given amount of time
            @param name                      Stream published name
            @param start                     Start position
            @param length                    Playback length
            @param flushPlaylist             Flush playlist?
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamService.publish(System.String)">
            Publishes stream with given name
            @param name             Stream published name
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamService.publish(System.String,System.String)">
            Publishes stream with given name and mode
            @param name            Stream published name
            @param mode            Stream publishing mode
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamService.publish(System.Boolean)">
            Publish
            @param dontStop      Whether need to stop first
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamService.seek(System.Int32)">
            Seek to position
            @param position         Seek position
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamService.pause(System.Object,System.Int32)">
            Pauses playback
            @param pausePlayback           Pause flah
            @param position                Pause position
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamService.receiveVideo(System.Boolean)">
            Can recieve video?
            @param receive       Boolean flag
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamService.receiveAudio(System.Boolean)">
            Can recieve audio?
            @param receive       Boolean flag
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamService.closeStream">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamService.closeStream(Weborb.Messaging.Api.IConnection,System.Int32)">
            Close stream.
            This method can close both IClientBroadcastStream (coming from Flash Player to Red5)
            and ISubscriberStream (from Red5 to Flash Player).
            Corresponding application handlers (streamSubscriberClose, etc.) are called as if
            close was initiated by Flash Player.
            
            It is recommended to remember stream id in application handlers, ex.:
            <pre>
            public void streamBroadcastStart(IBroadcastStream stream) {
            	super.streamBroadcastStart(stream);
            	if (stream instanceof IClientBroadcastStream) {
            		int publishedStreamId = ((ClientBroadcastStream)stream).getStreamId();
            		Red5.getConnectionLocal().setAttribute(PUBLISHED_STREAM_ID_ATTRIBUTE, publishedStreamId);
            	}
            }
            </pre>
            <pre>
            public void streamPlaylistItemPlay(IPlaylistSubscriberStream stream, IPlayItem item, boolean isLive) {
            	super.streamPlaylistItemPlay(stream, item, isLive);
            	Red5.getConnectionLocal().setAttribute(WATCHED_STREAM_ID_ATTRIBUTE, stream.getStreamId());
            }
            </pre>
            When stream is closed, corresponding NetStream status will be sent to stream provider / consumers.
            Implementation is based on Red5's StreamService.close()
            @param connection client connection
            @param streamId stream ID (number: 1,2,...)
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamService.createStream">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamService.deleteStream(System.Int32)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamService.deleteStream(Weborb.Messaging.Api.Stream.IStreamCapableConnection,System.Int32)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamService.pauseRaw(System.Boolean,System.Int32)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamService.pause(System.Object,System.Int32)">
            Pause at given position. Required as "pausePlayback" can be "null" if no flag is passed by the
            client
            @param pausePlayback         Pause playback or not
            @param position              Pause position
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamService.play(System.String,System.Int32,System.Int32,System.Object)">
            {@inheritDoc}
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamService.play(System.String,System.Int32,System.Int32,System.Boolean)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamService.play(System.String,System.Int32,System.Int32)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamService.play(System.String,System.Int32)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamService.play(System.String)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamService.play(System.Boolean)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamService.publish(System.Boolean)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamService.publish(System.String,System.String)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamService.publish(System.String)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamService.seek(System.Int32)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamService.receiveVideo(System.Boolean)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamService.receiveAudio(System.Boolean)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamService.getCurrentStreamId">
             Getter for current stream id.
            
             @return  Current stream id
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamService.getBroadcastScope(Weborb.Messaging.Api.IScope,System.String)">
            Return broadcast scope object for given scope and child scope name
            @param scope          Scope object
            @param name           Child scope name
            @return               Broadcast scope
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamService.sendNSFailed(Weborb.Messaging.Net.RTMP.RTMPConnection,System.String,System.String,System.Int32)">
            Send a <code>NetStream.Failed</code> message to the client.
            
            @param conn
            @param description
            @param name
            @param streamId
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamService.sendNSStatus(Weborb.Messaging.Api.IConnection,System.String,System.String,System.String,System.Int32)">
            Send <code>NetStream.Status</code> to client (Flash Player)
            @param conn
            @param statusCode see StatusCodes class
            @param description
            @param name
            @param streamId
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamService.sendNetStreamStatus(Weborb.Messaging.Api.IConnection,System.String,System.String,System.String,System.String,System.Int32)">
            Send <code>NetStream.Status</code> to client (Flash Player)
             
            @param conn connection
            @param statusCode NetStream status code
            @param description description
            @param name name
            @param status The status - error, warning, or status
            @param streamId stream id
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.AbstractStream.name">
            Stream name
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.AbstractStream.codecInfo">
            Stream audio and video codecs information
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.AbstractStream.scope">
            Stream scope
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.AbstractStream.creationTime">
            Timestamp the stream was created.
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.AbstractStream.getName">
            Return stream name
            @return     Stream name
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.AbstractStream.getCodecInfo">
            Return codec information
            @return              Stream codec information
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.AbstractStream.getScope">
            Return scope
            @return         Scope
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.AbstractStream.getCreationTime">
            Returns timestamp at which the stream was created.
            
            @return creation timestamp
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.AbstractStream.setName(System.String)">
            Setter for name
            @param name     Stream name
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.AbstractStream.setCodecInfo(Weborb.Messaging.Api.Stream.IStreamCodecInfo)">
            Setter for codec info
            @param codecInfo     Codec info
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.AbstractStream.setScope(Weborb.Messaging.Api.IScope)">
            Setter for scope
            @param scope         Scope
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.AbstractStream.getStreamAwareHandler">
            Return stream aware scope handler or null if scope is null
            @return      IStreamAwareScopeHandler implementation
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.AbstractClientStream.streamId">
            Stream identifier. Unique across server.
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.AbstractClientStream.broadcastStreamPublishName">
            Stream name of the broadcasting stream.
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.AbstractClientStream.conn">
            Connection that works with streams
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.AbstractClientStream.bwConfig">
            Bandwidth configuration
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.AbstractClientStream.streamFlow">
            Stream flow
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.AbstractClientStream.clientBufferDuration">
            Buffer duration in ms as requested by the client
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.AbstractClientStream.getStreamId">
            Return stream id
            @return           Stream id
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.AbstractClientStream.getConnection">
            Return connection associated with stream
            @return           Stream capable connection object
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.AbstractClientStream.getBandwidthConfigure">
            Return stream bandwidth configuration
            @return            Bandwidth config
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.AbstractClientStream.setBandwidthConfigure(Weborb.Messaging.Api.IBandwidthConfigure)">
            Setter for bandwidth config
            @param config              Bandwidth config
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.AbstractClientStream.setStreamId(System.Int32)">
            Setter for stream id
            @param streamId       Stream id
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.AbstractClientStream.setConnection(Weborb.Messaging.Api.Stream.IStreamCapableConnection)">
            Setter for stream capable connection
            @param conn           IStreamCapableConnection object
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.AbstractClientStream.setStreamFlow(Weborb.Messaging.Api.Stream.IStreamFlow)">
            Setter fpr stream flow
            @param streamFlow     IStreamFlow object
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.AbstractClientStream.getStreamFlow">
            Return stream flow
            @return               IStreamFlow object
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.AbstractClientStream.setClientBufferDuration(System.Int32)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.AbstractClientStream.getClientBufferDuration">
             Get duration in ms as requested by the client.
            
             @return value
        </member>
        <member name="T:Weborb.Messaging.Server.Messaging.OOBControlMessage">
             Out-of-band control message used by inter-components communication
             which are connected with pipes.
             Out-of-band data is a separate data stream used for specific purposes (in TCP
             it's referenced as "urgent data"), like lifecycle control.
            
             <tt>'Target'</tt> is used to represent the receiver who may be
             interested for receiving. It's a string of any form.
             XXX shall we design a standard form for Target, like "class.instance"?
        </member>
        <member name="F:Weborb.Messaging.Server.Messaging.OOBControlMessage.target">
            Target
        </member>
        <member name="F:Weborb.Messaging.Server.Messaging.OOBControlMessage.serviceName">
            Service name
        </member>
        <member name="F:Weborb.Messaging.Server.Messaging.OOBControlMessage.serviceParamMap">
            Service params name
        </member>
        <member name="F:Weborb.Messaging.Server.Messaging.OOBControlMessage.result">
            Result
        </member>
        <member name="M:Weborb.Messaging.Server.Messaging.OOBControlMessage.getServiceName">
             Getter for property 'serviceName'.
            
             @return Value for property 'serviceName'.
        </member>
        <member name="M:Weborb.Messaging.Server.Messaging.OOBControlMessage.setServiceName(System.String)">
             Setter for property 'serviceName'.
            
             @param serviceName Value to set for property 'serviceName'.
        </member>
        <member name="M:Weborb.Messaging.Server.Messaging.OOBControlMessage.getServiceParamMap">
             Getter for property 'serviceParamMap'.
            
             @return Value for property 'serviceParamMap'.
        </member>
        <member name="M:Weborb.Messaging.Server.Messaging.OOBControlMessage.setServiceParamMap(System.Collections.IDictionary)">
             Setter for property 'serviceParamMap'.
            
             @param serviceParamMap Value to set for property 'serviceParamMap'.
        </member>
        <member name="M:Weborb.Messaging.Server.Messaging.OOBControlMessage.getTarget">
             Getter for property 'target'.
            
             @return Value for property 'target'.
        </member>
        <member name="M:Weborb.Messaging.Server.Messaging.OOBControlMessage.setTarget(System.String)">
             Setter for property 'target'.
            
             @param target Value to set for property 'target'.
        </member>
        <member name="M:Weborb.Messaging.Server.Messaging.OOBControlMessage.getResult">
             Getter for property 'result'.
            
             @return Value for property 'result'.
        </member>
        <member name="M:Weborb.Messaging.Server.Messaging.OOBControlMessage.setResult(System.Object)">
             Setter for property 'result'.
            
             @param result Value to set for property 'result'.
        </member>
        <member name="T:Weborb.Messaging.Server.IO.IStreamableFileService">
            Provides access to files that can be streamed. 
        </member>
        <member name="M:Weborb.Messaging.Server.IO.IStreamableFileService.getPrefix">
             Getter for prefix. Prefix is used in filename composition to fetch real file name.
            
             @return  Prefix
        </member>
        <member name="M:Weborb.Messaging.Server.IO.IStreamableFileService.getExtension">
             Getter for extension of file
            
             @return  File extension that is used
        </member>
        <member name="M:Weborb.Messaging.Server.IO.IStreamableFileService.prepareFilename(System.String)">
            Prepair given string to conform filename requirements, for example, add
            extension to the end if missing.
            @param name            String to format
            @return                Correct filename
        </member>
        <member name="M:Weborb.Messaging.Server.IO.IStreamableFileService.canHandle(System.IO.FileInfo)">
            Check whether file can be used by file service, that is, it does exist and have valid extension
            @param file            File object
            @return                <code>true</code> if file exist and has valid extension,
                                   <code>false</code> otherwise
        </member>
        <member name="M:Weborb.Messaging.Server.IO.IStreamableFileService.getStreamableFile(System.IO.FileInfo)">
             Return streamable file reference. For FLV files returned streamable file already has
             generated metadata injected.
            
             @param file             File resource
             @return                 Streamable file resource
             @throws IOException     Thrown if there were problems accessing given file
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Event.ServerBW.bandwidth">
            Bandwidth
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.ServerBW.#ctor(System.Int32)">
            Server bandwidth event
            @param bandwidth      Bandwidth
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.ServerBW.getBandwidth">
             Getter for bandwidth
            
             @return  Bandwidth
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.ServerBW.setBandwidth(System.Int32)">
             Setter for bandwidth
            
             @param bandwidth  New bandwidth.
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Event.BytesRead.bytesRead">
            Bytes read
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.BytesRead.#ctor(System.Int32)">
            Creates new event with given bytes number
            @param bytesRead       Number of bytes read
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.BytesRead.getBytesRead">
             Return number of bytes read
            
             @return  Number of bytes
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.BytesRead.setBytesRead(System.Int32)">
             Setter for bytes read
            
             @param bytesRead  Number of bytes read
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.BytesRead.doRelease">
            Release event (set bytes read to zero)
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.Abort.ToString">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IPlaylistController.nextItem(Weborb.Messaging.Api.Stream.IPlaylist,System.Int32)">
            Get next item to play.
            
            @param playlist
                       The related play list.
            @param itemIndex
                       The current item index. <tt>-1</tt> indicates to retrieve
                       the first item for play.
            @return The next item index to play. <tt>-1</tt> reaches the end.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IPlaylistController.previousItem(Weborb.Messaging.Api.Stream.IPlaylist,System.Int32)">
            Get previous item to play.
            
            @param playlist
                       The related play list.
            @param itemIndex
                       The current item index. <tt>IPlaylist.itemSize</tt>
                       indicated to retrieve the last item for play.
            @return The previous item index to play. <tt>-1</tt> reaches the
                    beginning.
        </member>
        <member name="F:Weborb.Messaging.Api.ScopeUtils.SLASH">
            Constant for slash symbol
        </member>
        <member name="M:Weborb.Messaging.Api.ScopeUtils.resolveScope(Weborb.Messaging.Api.IScope,System.String)">
             Resolves scope for specified scope and path.
            
             @param from
                        Scope to use as context (to start from)
             @param path
                        Path to resolve
             @return	Resolved scope
        </member>
        <member name="M:Weborb.Messaging.Api.ScopeUtils.findRoot(Weborb.Messaging.Api.IScope)">
             Finds root scope for specified scope object. Root scope is the top level
             scope among scope's parents.
            
             @param from
                        Scope to find root for
             @return	Root scope object
        </member>
        <member name="M:Weborb.Messaging.Api.ScopeUtils.findApplication(Weborb.Messaging.Api.IScope)">
             Returns the application scope for specified scope. Application scope has
             depth of 1 and has no parent.
            
             See <code>isApp</code> method for details.
            
             @param from
                        Scope to find application for
             @return		Application scope.
        </member>
        <member name="M:Weborb.Messaging.Api.ScopeUtils.isAncestor(Weborb.Messaging.Api.IBasicScope,Weborb.Messaging.Api.IBasicScope)">
             Check whether one scope is an ancestor of another
            
             @param from
                        Scope
             @param ancestor
                        Scope to check
             @return <code>true</code> if ancestor scope is really an ancestor of
                     scope passed as from parameter, <code>false</code> otherwise.
        </member>
        <member name="M:Weborb.Messaging.Api.ScopeUtils.isRoot(Weborb.Messaging.Api.IBasicScope)">
             Checks whether scope is root or not
            
             @param scope
                        Scope to check
             @return <code>true</code> if scope is root scope (top level scope),
                     <code>false</code> otherwise.
        </member>
        <member name="M:Weborb.Messaging.Api.ScopeUtils.isGlobal(Weborb.Messaging.Api.IBasicScope)">
             Check whether scope is the global scope (level 0 leaf in scope tree) or
             not
            
             When user connects the following URL: rtmp://localhost/myapp/foo/bar then /
             is the global level scope, myapp is app level, foo is room level and bar
             is room level as well (but with higher depth level)
            
             @param scope
                        Scope to check
             @return <code>true</code> if scope is the global scope,
                     <code>false</code> otherwise.
        </member>
        <member name="M:Weborb.Messaging.Api.ScopeUtils.isApp(Weborb.Messaging.Api.IBasicScope)">
             Check whether scope is an application scope (level 1 leaf in scope tree)
             or not
            
             @param scope
                        Scope to check
             @return <code>true</code> if scope is an application scope,
                     <code>false</code> otherwise.
        </member>
        <member name="M:Weborb.Messaging.Api.ScopeUtils.isRoom(Weborb.Messaging.Api.IBasicScope)">
             Check whether scope is a room scope (level 2 leaf in scope tree or lower,
             e.g. 3, 4, ...) or not
            
             @param scope
                        Scope to check
             @return <code>true</code> if scope is a room scope, <code>false</code>
                     otherwise.
        </member>
        <member name="M:Weborb.Messaging.Api.ScopeUtils.getScopeService(Weborb.Messaging.Api.IScope,System.String)">
             Returns scope service by bean name. See overloaded method for details.
            
             @param scope
             @param name
             @return
        </member>
        <member name="M:Weborb.Messaging.Api.ScopeUtils.getScopeService(Weborb.Messaging.Api.IScope,System.String,System.Type)">
             Returns scope services (e.g. SharedObject, etc) for the scope. Method
             uses either bean name passes as a string or class object.
            
             @param scope
                        The scope service belongs to
             @param name
                        Bean name
             @param defaultClass
                        Class of service
             @return				Service object
        </member>
        <member name="M:Weborb.Messaging.Api.ScopeUtils.getScopeService(Weborb.Messaging.Api.IScope,System.Type)">
             Returns scope service that implements a given interface.
            
             @param scope
                        The scope service belongs to
             @param intf
                        The interface the service must implement
             @return Service object
        </member>
        <member name="M:Weborb.Messaging.Api.ScopeUtils.getScopeService(Weborb.Messaging.Api.IScope,System.Type,System.Type)">
             Returns scope service that implements a given interface.
            
             @param scope
                        The scope service belongs to
             @param intf
                        The interface the service must implement
             @param defaultClass
                        Class that should be used to create a new service if no service was found.
             @return Service object
        </member>
        <member name="T:Weborb.Messaging.Api.Messaging.IPullableProvider">
            A provider that supports passive pulling of messages.
        </member>
        <member name="T:Weborb.Messaging.Api.Messaging.IMessageComponent">
            Message component handles out-of-band control messages
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.IMessageComponent.onOOBControlMessage(Weborb.Messaging.Api.Messaging.IMessageComponent,Weborb.Messaging.Api.Messaging.IPipe,Weborb.Messaging.Server.Messaging.OOBControlMessage)">
            
            @param source               Message component source
            @param pipe                 Connection pipe
                       TODO
            @param oobCtrlMsg           Out-of-band control message
        </member>
        <member name="T:Weborb.Messaging.Api.Messaging.IPipeConnectionListener">
            A listener that wants to listen to events when
            provider/consumer connects to or disconnects from
            a specific pipe.
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.IPipeConnectionListener.onPipeConnectionEvent(Weborb.Messaging.Server.Messaging.PipeConnectionEvent)">
            Pipe connection event handler
            @param event        Pipe connection event
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.IMetaData.getCanSeekToEnd">
             Returns a boolean depending on whether the video can
             seek to end
            
             @return boolean canSeekToEnd
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.IMetaData.setCanSeekToEnd(System.Boolean)">
             Sets whether a video can seek to end
            
             @param b
             @return void
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.IMetaData.getVideoCodecId">
             Returns the video codec id
            
             @return int videocodecid
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.IMetaData.setVideoCodecId(System.Int32)">
             Sets the video codec id
            
             @param id
             @return void
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.IMetaData.getframeRate">
             Returns the framerate
            
             @return int framerate
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.IMetaData.setframeRate(System.Int32)">
             Sets the framerate
            
             @param rate
             @return void
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.IMetaData.getVideoDataRate">
             Returns the videodatarate
            
             @return int framerate
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.IMetaData.setVideoDataRate(System.Int32)">
             Sets the videodatarate
            
             @param rate
             @return void
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.IMetaData.getHeight">
             Returns the height
            
             @return int height
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.IMetaData.setHeight(System.Int32)">
             Sets the height
            
             @param h height
             @return void
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.IMetaData.getWidth">
             Returns the width
            
             @return int width
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.IMetaData.setWidth(System.Int32)">
             Sets the width
            
             @param w width
             @return void
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.IMetaData.getDuration">
             Returns the duration
            
             @return double duration
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.IMetaData.setDuration(System.Double)">
             Sets the duration
            
             @param d duration
             @return void
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.IMetaData.setMetaCue(Weborb.Messaging.Api.IO.FLV.Meta.IMetaCue[])">
             Sets the cue points
            
             @param metaCue
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.IMetaData.getMetaCue">
             Gets the cue points
            
             @return IMetaCue[]
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.MetaData.getCanSeekToEnd">
            CuePoint array *
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.MetaData.setMetaCue(Weborb.Messaging.Api.IO.FLV.Meta.IMetaCue[])">
             Sets the MetaCue Points
            
             @param cuePoints The cuePoints to set.
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.MetaData.getMetaCue">
             Return array of MetaCue
            
             @return IMetaCue[] metaCue
        </member>
        <member name="T:Weborb.Client.WeborbClient">
            <summary>
            WeborbClient is the main class for all remoting operations. The class 
            can be used for server-to-server invocations or by the Silverlight client
            to invoke server-side methods. The class supports two types of remoting: 
            <list type="number">
            <item><description>Remote invocation using general Invoke method</description></item>
            <item><description>Remote invocation via a dynamically generated proxy which implements specified target interface</description></item>
            </list>
            </summary>
            <example>
            The following examples demonstrates invocations using both of the approaches described above. 
            Consider the following server-side class:
            <code>
            namespace Weborb.Examples
            {
              public class HelloWorldService
              {
                public string SayHello()
                {
                    return "hi there";
                }
              }
            } 
            </code>
            The following code demonstrates invocation of the SayHello method using the Invoke approach:
            <code>
            WeborbClient client = new WeborbClient( "http://localhost/weborb4/weborb.aspx" );
            Responder&lt;string&gt; responder = new Responder&lt;string&gt;( gotResult, gotError );
            client.Invoke( "Weborb.Examples.HelloWorldService", "SayHello", null, responder );
            
            public void gotResult( string result )
            {
            }
            
            public function gotError( Fault fault )
            {
            }
            </code>
            An alternative approach is to bind to the remote class and perform invocations via a proxy object. The advantage of this approach
            is the proxy object implements the target interface. The target interface is not the same as implemented on the server-side (notice
            in this example, the server-side does not even have an interface). The interface simply enforces method signatures and uses special
            return types to enforce the asynchronous invocation result handling:
            <code>
            namespace Weborb.Examples
            {
              public interface IHelloWorldService
              {
                AsyncToken&lt;string&gt; SayHello();
              }
            } 
            </code>
            Create an instance of WeborbClient with the URL to a WebORB installation and generate a proxy using the target interface:
            <code>
            WeborbClient remotingService = new WeborbClient( "http://localhost/weborb4/weborb.aspx" );
            IHelloWorldService proxy = remotingService.Bind&lt;IHelloWorldService&gt;();
            </code>
            Now that the proxy is created, invoke the method on the proxy and add a listener to process the return value:
            <code>
            AsyncToken&lt;String&gt; asyncToken = proxy.SayHello();
            asyncToken.ResultListener += GotResult;
            
            public void GotResult( String returnValue )
            {
            ...do something with the return value
            }
            </code></example>
        </member>
        <member name="M:Weborb.Client.WeborbClient.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Weborb.Client.WeborbClient"/> class with the WebORB URL.
            </summary>
            <remarks>
            </remarks>
            <param name="gatewayURL">The gateway URL - must be a valid URL of a WebORB 
            installation. For instance, the gateway URL for the default installation 
            of WebORB for .NET is http://localhost/weborb4/weborb.aspx</param>
        </member>
        <member name="M:Weborb.Client.WeborbClient.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Weborb.Client.WeborbClient"/> class with the WebORB URL.
            </summary>
            <remarks>
            </remarks>
            <param name="gatewayURL">The gateway URL - must be a valid URL of a WebORB 
            installation. For instance, the gateway URL for the default installation 
            of WebORB for .NET is http://localhost/weborb4/weborb.aspx</param>
            <param name="timeout">Timeout is the number of milliseconds to wait before the request times out</param>
        </member>
        <member name="M:Weborb.Client.WeborbClient.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Weborb.Client.WeborbClient"/> class with the WebORB URL and a destination name.
            </summary>
            <param name="gatewayURL">The gateway URL - must be a valid URL of a WebORB 
            installation. For instance, the gateway URL for the default installation 
            of WebORB for .NET is http://localhost/weborb4/weborb.aspx</param>
            <param name="destination">The destination name - must be a valid destination
            name configured in WEB-INF/flex/remoting-config.xml</param>
            <param name="timeout">Timeout is the number of milliseconds to wait before the request times out</param>
            <remarks>For the instances of WeborbClient created with this constructor, invocations using the Invoke method
            do not require class name, unless the destination argument is a generic destination.</remarks>
        </member>
        <member name="M:Weborb.Client.WeborbClient.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Weborb.Client.WeborbClient"/> class with the WebORB URL and a destination name.
            </summary>
            <param name="gatewayURL">The gateway URL - must be a valid URL of a WebORB 
            installation. For instance, the gateway URL for the default installation 
            of WebORB for .NET is http://localhost/weborb4/weborb.aspx</param>
            <param name="destination">The destination name - must be a valid destination
            name configured in WEB-INF/flex/remoting-config.xml</param>
            <remarks>For the instances of WeborbClient created with this constructor, invocations using the Invoke method
            do not require class name, unless the destination argument is a generic destination.</remarks>
        </member>
        <member name="M:Weborb.Client.WeborbClient.#ctor(System.String,System.Windows.Controls.UserControl)">
            <summary>
            Initializes a new instance of the <see cref="T:Weborb.Client.WeborbClient"/> class with the WebORB URL and an instance of UserControl. The UserControl object is used to dispatch events into the UI thread for data binding purposes.
            </summary>
            <param name="gatewayURL">The gateway URL - must be a valid URL of a WebORB 
            installation. For instance, the gateway URL for the default installation 
            of WebORB for .NET is http://localhost/weborb30/weborb.aspx</param>
            <param name="uiControl">A UI control used by the WeborbClient instance to execute callbacks into the UI thread. This argument can be null.</param>
        </member>
        <member name="M:Weborb.Client.WeborbClient.#ctor(System.String,System.String,System.Windows.Controls.UserControl)">
            <summary>
            Initializes a new instance of the <see cref="T:Weborb.Client.WeborbClient"/> class with the WebORB URL, destination name and an instance of UserControl.
            </summary>
            <param name="gatewayURL">The gateway URL - must be a valid URL of a WebORB 
            installation. For instance, the gateway URL for the default installation 
            of WebORB for .NET is http://localhost/weborb30/weborb.aspx</param>
            <param name="destination">The destination name - must be a valid destination
            name configured in remoting-config.xml</param>
            <param name="uiControl">A UI control used by the <see cref="T:Weborb.Client.WeborbClient"/> instance to execute callbacks into the UI thread. The argument can be null.</param>
            <remarks>For the instances of WeborbClient created with this constructor, invocations using the Invoke method
            do not require class name, unless the destination argument is a generic destination.</remarks>
        </member>
        <member name="M:Weborb.Client.WeborbClient.Bind``1">
            <summary>
            Creates a proxy to a remote interface with the target interface defined as T. The interface must define the return types for the methods with the generic AsyncToken class.
            </summary>
            <typeparam name="T">Target interface</typeparam>
            <returns>A proxy implementing the methods from the target interface. The proxy can be used to perform remote method invocations.</returns>
            <remarks>The name of the remote class is derived from the target interface name. The interface must start with 'I' and be in the same namespace as the
            remote class. If this requirement cannot be met or is undesireable, use the Bind method with two arguments.</remarks>
            <example>Consider the following server-side class:
            <code>
            namespace Weborb.Examples
            {
              public class DataBinding
              {
                public DataTable getCustomers()
                {
                   //contains logic for data retrieval
                   return dataTable;
                }
                
                public DateTime getServerTime()
                {
                  return DateTime.Now;
                }
              }
            }
            </code>
            The class above can be represented through the following target interface used on the client:
            <code>
            namespace Weborb.Examples
            {
              public class IDataBinding
              {
                AsyncToken&lt;List&lt;Customer&gt;&gt; getCustomers();
                AsyncToken&lt;DateTime&gt; getServerTime();
              }
              
              public class Customer
              {
                 public string CustomerName {get;set;}
                 public string CustomerPhone {get;set;}
              }
            }
            </code>
            Notice the class Customer above: the class declares two public properties corresponsing to the columns in the returned DataTable.
            The following code binds to the remote DataBinding class using the target interface:
            <code>
            WeborbClient client = new WeborbClient( "http://localhost/weborb4/weborb.aspx" );
            IDataBinding proxy = client.Bind&lt;IDataBiding&gt;();
            // now any call on the proxy object will result in a remote method invocation:
            AsyncToken&lt;List&lt;Customer&gt;&gt; asyncToken = proxy.getCustomers();
            </code>
            </example>
        </member>
        <member name="M:Weborb.Client.WeborbClient.Bind(System.Type)">
            <summary>
            Creates a proxy to a remote interface with the target interface defined as targetInterface. 
            The interface must define the return types for the methods with the generic AsyncToken class.
            The target class name is derived from the interface name. For instance of the full name 
            for the interface is Com.Foo.IHelloWorldService, the method assumes the target class name is
            Com.Foo.HelloWorldService.
            </summary>
            <param name="targetInterface">The target interface.</param>
            <returns>A proxy implementing the methods from the target interface. The proxy can be used to perform remote method invocations.</returns>
            <remarks>The name of the remote class is derived from the target interface name. The interface must start with 'I' and be in the same namespace as the
            remote class. If this requirement cannot be met or is undesireable, use the Bind method with two arguments. The usage of this method is similar to the generic version of Bind with the only difference is the requirement for cast as shown in the example below.</remarks>
            <example>Consider the following server-side class:
            <code>
            namespace Weborb.Examples
            {
              public class DataBinding
              {
                public DataTable getCustomers()
                {
                   //contains logic for data retrieval
                   return dataTable;
                }
                
                public DateTime getServerTime()
                {
                  return DateTime.Now;
                }
              }
            }
            </code>
            The class above can be represented through the following target interface used on the client:
            <code>
            namespace Weborb.Examples
            {
              public class IDataBinding
              {
                AsyncToken&lt;List&lt;Customer&gt;&gt; getCustomers();
                AsyncToken&lt;DateTime&gt; getServerTime();
              }
              
              public class Customer
              {
                 public string CustomerName {get;set;}
                 public string CustomerPhone {get;set;}
              }
            }
            </code>
            Notice the class Customer above: the class declares two public properties corresponsing to the columns in the returned DataTable.
            The following code binds to the remote DataBinding class using the target interface:
            <code>
            WeborbClient client = new WeborbClient( "http://localhost/weborb4/weborb.aspx" );
            IDataBinding proxy = (IDataBinding) client.Bind( typeof( IDataBinding) );
            // now any call on the proxy object will result in a remote method invocation:
            AsyncToken&lt;List&lt;Customer&gt;&gt; asyncToken = proxy.getCustomers();
            </code>
            </example>
        </member>
        <member name="M:Weborb.Client.WeborbClient.Bind(System.Type,System.String)">
            <summary>
            Creates a proxy to a remote interface with the target interface defined as targetInterface. 
            The interface must define the return types for the methods with the generic AsyncToken class.
            Works the same way as the generic/non-generic versions of the Bind, but provides a way to specify
            target class name.
            </summary>
            <param name="targetInterface">The target interface.</param>
            <param name="targetClassName">Full name of the target class.</param>
            <returns>A proxy implementing the methods from the target interface. The proxy can be used to perform remote method invocations.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Weborb.Client.WeborbClient.Invoke``1(System.String,System.Object[],Weborb.Client.Responder{``0})" -->
        <member name="M:Weborb.Client.WeborbClient.Invoke``1(System.String,System.String,System.Object[],Weborb.Client.Responder{``0})">
            <summary>
            Performs a remote method invocation for the instance of WeborbClient created without a destination name.
            </summary>
            <typeparam name="T">Identifies the return type of the invoked method</typeparam>
            <param name="className">Name of the remote class to invoke method on</param>
            <param name="methodName">Name of the method to invoke</param>
            <param name="args">Collection of arguments or null if none</param>
            <param name="responder">Generic (types) async token with registered response/failure handlers. Type T defined the return type of the method invocation.</param>
            <example>
            Consider the following server-side class deployed into a WebORB-enabled web application:
            <code>
            namespace Weborb.Examples
            {
              public class OrderProcessor
              {
                public void ProcessOrder( Order orderObject )
                {
                .. do something with the order
                }
              }
            }
            </code>
            The ProcessOrder method can be invoked using the following code:
            <code>
            WeborbClient client = new WeborbClient( "http://localhost/weborb30/weborb.aspx" );
            Order orderInstance = new Order();
            Object[] args = new Object[] { orderInstance };
            //since the method returns void, use the special Result class as the designated generic type
            Responder&lt;Result&gt; responder = new Responder&lt;boolean&gt;( gotResult, gotFault );
            client.Invoke( "Weborb.Examples.OrderProcessor", "ProcessOrder", args, responder );
            
            public void gotResult( Result resultValue )
            {
            }
            
            public void gotFault( Fault fault )
            {
            }
            </code>
            </example>
        </member>
        <member name="T:Weborb.Client.Responder`1">
            <summary>
            Responsible for maintaining references to a method receiving return value from a remote invocation
            and a method responsible for error handling from a remote invocation.
            </summary>
            <typeparam name="T">Return type from a remote method invocation</typeparam>
        </member>
        <member name="M:Weborb.Client.Responder`1.#ctor(Weborb.Client.ResponseHandler{`0},Weborb.Client.ErrorHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Weborb.Client.Responder`1"/> class with return value processing method
            and a fault handler method
            </summary>
            <param name="responseHandler">The response handler - invoked when the client received a response from a remote method invocation</param>
            <param name="errorHandler">The error handler - invoked if the remote method invocation throws an exception.</param>
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.RTMPConstants.SOURCE_TYPE_LIVE">
            Data originated from a live encoder or stream.
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.RTMPConstants.TRANSIENT_PREFIX">
            Prefix for attribute names that should not be made persistent.
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.StreamTracker.lastAudio">
            Last audio flag
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.StreamTracker.lastVideo">
            Last video flag
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.StreamTracker.lastNotify">
            Last notification flag
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.StreamTracker.relative">
            Relative flag
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.StreamTracker.firstVideo">
            First video flag
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.StreamTracker.firstAudio">
            First audio flag
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.StreamTracker.firstNotify">
            First notification flag
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamTracker.#ctor">
            Constructs a new StreamTracker. 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamTracker.reset">
            Reset state
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamTracker.add(Weborb.Messaging.Net.RTMP.Event.IRTMPEvent)">
            RTMP event handler
            @param event      RTMP event
            @return           Timeframe since last notification (or auido or video packet sending)
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamTracker.isRelative">
             Getter for property 'relative'.
            
             @return Value for property 'relative'.
        </member>
        <member name="T:Weborb.Messaging.Server.Stream.SingleItemSubscriberStream">
            Stream of a single play item for a subscriber
            
            @author Paul Gregoire (mondain@gmail.com)
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.SingleItemSubscriberStream.bufferCheckInterval">
            Interval in ms to check for buffer underruns in VOD streams.
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.SingleItemSubscriberStream.underrunTrigger">
            Number of pending messages at which a <code>NetStream.Play.InsufficientBW</code>
            message is generated for VOD streams.
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.SingleItemSubscriberStream.creationTime">
            Timestamp this stream was created.
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.SingleItemSubscriberStream.engine">
            Plays items back
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.SingleItemSubscriberStream.pause(System.Int32)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.SingleItemSubscriberStream.resume(System.Int32)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.SingleItemSubscriberStream.stop">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.SingleItemSubscriberStream.seek(System.Int32)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.SingleItemSubscriberStream.receiveVideo(System.Boolean)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.SingleItemSubscriberStream.receiveAudio(System.Boolean)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.SingleItemSubscriberStream.getState">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.SingleItemSubscriberStream.setState(Weborb.Messaging.Server.Stream.PlayListStreamStateEnum)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.SingleItemSubscriberStream.createEngine(Weborb.Messaging.Api.Scheduling.ISchedulingService,Weborb.Messaging.Api.Stream.IConsumerService,Weborb.Messaging.Api.Stream.IProviderService)">
            Creates a play engine based on current services (scheduling service, consumer service, and provider service).
            This method is useful during unit testing.
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.SingleItemSubscriberStream.setBufferCheckInterval(System.Int32)">
            Set interval to check for buffer underruns. Set to <code>0</code> to
            disable.
            
            @param bufferCheckInterval interval in ms
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.SingleItemSubscriberStream.setUnderrunTrigger(System.Int32)">
            Set maximum number of pending messages at which a
            <code>NetStream.Play.InsufficientBW</code> message will be
            generated for VOD streams
            
            @param underrunTrigger the maximum number of pending messages
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.SingleItemSubscriberStream.onChange(Weborb.Messaging.Server.Stream.PlayListStreamStateEnum,System.Object[])">
            {@inheritDoc}
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.SingleItemSubscriberStream.seekToCurrentPlayback">
            Seek to current position to restart playback with audio and/or video.
        </member>
        <member name="T:Weborb.Messaging.Server.Stream.SimplePlaylistController">
            Simple playlist controller implementation
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.SimplePlaylistController.nextItem(Weborb.Messaging.Api.Stream.IPlaylist,System.Int32)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.SimplePlaylistController.previousItem(Weborb.Messaging.Api.Stream.IPlaylist,System.Int32)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IPlaylist.addItem(Weborb.Messaging.Api.Stream.IPlayItem)">
            Add an item to the list.
            
            @param item       Playlist item
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IPlaylist.addItem(Weborb.Messaging.Api.Stream.IPlayItem,System.Int32)">
            Add an item to specific index.
            
            @param item       Playlist item
            @param index      Index in list
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IPlaylist.removeItem(System.Int32)">
            Remove an item from list.
            
            @param index      Index in list
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IPlaylist.removeAllItems">
            Remove all items.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IPlaylist.getItemSize">
             Return number of items in list
            
             @return  Number of items in list
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IPlaylist.getCurrentItemIndex">
            Get currently playing item index.
            @return       Currently playing item index.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IPlaylist.getCurrentItem">
            Get currently playing item
            @return       Item
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IPlaylist.getItem(System.Int32)">
            Get the item according to the index.
            @param index  Item index
            @return       Item at that index in list
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IPlaylist.hasMoreItems">
            Check if the playlist has more items after the currently
            playing one.
            
            @return <code>true</code> if more items are available, <code>false</code> otherwise
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IPlaylist.previousItem">
            Go for the previous played item.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IPlaylist.nextItem">
            Go for next item decided by controller logic.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IPlaylist.setItem(System.Int32)">
            Set the current item for playing.
            
            @param index    Position in list
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IPlaylist.isRandom">
            Whether items are randomly played.
            
            @return         <code>true</code> if shuffle is on for this list, <code>false</code> otherwise
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IPlaylist.setRandom(System.Boolean)">
            Set whether items should be randomly played.
            
            @param random   Shuffle flag
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IPlaylist.isRewind">
            Whether rewind the list.
            
            @return         <code>true</code> if playlist is rewind on end, <code>false</code> otherwise
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IPlaylist.setRewind(System.Boolean)">
            Set whether rewind the list.
            
            @param rewind   New vallue for rewind flag
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IPlaylist.isRepeat">
            Whether repeat playing an item.
            
            @return        <code>true</code> if repeat mode is on for this playlist, <code>false</code> otherwise
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IPlaylist.setRepeat(System.Boolean)">
            Set whether repeat playing an item.
            
            @param repeat  New value for item playback repeat flag
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IPlaylist.setPlaylistController(Weborb.Messaging.Api.Stream.IPlaylistController)">
            Set list controller.
            
            @param controller      Playlist controller
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.controller">
            Playlist controller
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.defaultController">
            Default playlist controller
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.items">
            Playlist items
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.currentItemIndex">
            Current item index
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.engine">
            Plays items back
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.flowControlService">
            Service that controls flow (that is, bandwidth)
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.streamFlowController">
            Stream flow controller
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.rewind">
            Rewind mode state
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.random">
            Random mode state
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.repeat">
            Repeat mode state
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.bufferCheckInterval">
            Interval in ms to check for buffer underruns in VOD streams.
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.underrunTrigger">
            Number of pending messages at which a <code>NetStream.Play.InsufficientBW</code>
            message is generated for VOD streams.
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.bytesSent">
            Number of bytes sent.
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.#ctor">
            Constructs a new PlaylistSubscriberStream. 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.createEngine(Weborb.Messaging.Api.Scheduling.ISchedulingService,Weborb.Messaging.Api.Stream.IConsumerService,Weborb.Messaging.Api.Stream.IProviderService)">
            Creates a play engine based on current services (scheduling service, consumer service, and provider service).
            This method is useful during unit testing.
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.setBufferCheckInterval(System.Int32)">
            Set interval to check for buffer underruns. Set to <code>0</code> to
            disable.
            
            @param bufferCheckInterval interval in ms
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.setUnderrunTrigger(System.Int32)">
            Set maximum number of pending messages at which a
            <code>NetStream.Play.InsufficientBW</code> message will be
            generated for VOD streams
            
            @param underrunTrigger the maximum number of pending messages
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.start">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.play">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.pause(System.Int32)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.resume(System.Int32)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.stop">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.seekToCurrentPlayback">
            Seek to current position to restart playback with audio and/or video.
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.seek(System.Int32)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.close">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.isPaused">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.addItem(Weborb.Messaging.Api.Stream.IPlayItem)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.addItem(Weborb.Messaging.Api.Stream.IPlayItem,System.Int32)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.removeItem(System.Int32)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.removeAllItems">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.previousItem">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.isRandom">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.setRandom(System.Boolean)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.isRewind">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.setRewind(System.Boolean)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.isRepeat">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.setRepeat(System.Boolean)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.setPlaylistController(Weborb.Messaging.Api.Stream.IPlaylistController)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.getItemSize">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.getCurrentItemIndex">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.getCurrentItem">
            {@inheritDoc}
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.getItem(System.Int32)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.written(System.Object)">
            Notified by RTMPHandler when a message has been sent.
            Glue for old code base.
            @param message          Message that has been written
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.moveToNext">
            Move the current item to the next in list.
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.moveToPrevious">
            Move the current item to the previous in list.
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.onItemEnd">
            Notified by the play engine when the current item reaches the end.
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.notifySubscriberStart">
            Notifies subscribers on start
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.notifySubscriberClose">
            Notifies subscribers on stop
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.notifyItemPlay(Weborb.Messaging.Api.Stream.IPlayItem,System.Boolean)">
            Notifies subscribers on item playback
            @param item               Item being played
            @param isLive             Is it a live broadcasting?
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.notifyItemStop(Weborb.Messaging.Api.Stream.IPlayItem)">
            Notifies subscribers on item stop
            @param item               Item that just has been stopped
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.notifyItemPause(Weborb.Messaging.Api.Stream.IPlayItem,System.Int32)">
            Notifies subscribers on pause
            @param item                Item that just has been paused
            @param position            Playback head position
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.notifyItemResume(Weborb.Messaging.Api.Stream.IPlayItem,System.Int32)">
            Notifies subscribers on resume
            @param item                Item that just has been resumed
            @param position            Playback head position
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.notifyItemSeek(Weborb.Messaging.Api.Stream.IPlayItem,System.Int32)">
            Notify on item seek
            @param item            Playlist item
            @param position        Seek position
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.getCurrentTimestamp">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.getBytesSent">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.getEstimatedBufferFill">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.getState">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlaylistSubscriberStream.setState(Weborb.Messaging.Server.Stream.PlayListStreamStateEnum)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.SO.ISharedObjectMessage.getName">
             Returns the name of the shared object this message belongs to.
            
             @return name of the shared object
        </member>
        <member name="M:Weborb.Messaging.Server.SO.ISharedObjectMessage.getVersion">
             Returns the version to modify.
            
             @return version to modify
        </member>
        <member name="M:Weborb.Messaging.Server.SO.ISharedObjectMessage.isPersistent">
             Does the message affect a persistent shared object?
            
             @return true if a persistent shared object should be updated otherwise false
        </member>
        <member name="M:Weborb.Messaging.Server.SO.ISharedObjectMessage.getEvents">
             Returns a set of ISharedObjectEvent objects containing informations what to change.
            
             @return set of ISharedObjectEvents
        </member>
        <member name="T:Weborb.Messaging.Server.IO.BaseStreamableFileService">
            Base class for streamable file services.
        </member>
        <member name="M:Weborb.Messaging.Server.IO.BaseStreamableFileService.getPrefix">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.IO.BaseStreamableFileService.getExtension">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.IO.BaseStreamableFileService.prepareFilename(System.String)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.IO.BaseStreamableFileService.canHandle(System.IO.FileInfo)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.IO.BaseStreamableFileService.getStreamableFile(System.IO.FileInfo)">
            {@inheritDoc} 
        </member>
        <member name="T:Weborb.Messaging.Server.IO.MP4.IMP4Service">
            <summary>
            A MP4Service sets up the service and hands out MP4 objects to its callers.
            </summary>
        </member>
        <member name="P:Weborb.Messaging.Server.IO.MP4.IMP4Service.Serializer">
            <summary>
            Gets or sets the serializer.
            </summary>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP4.Impl.MP4Service.getExtension">
            <summary>
            File extensions handled by this service.
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Status.StatusCodes.NS_SEEK_NOTIFY">
            The subscriber has used the seek command to move to a particular location in the recorded stream.
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Status.StatusCodes.NS_SEEK_FAILED">
            The stream doesn't support seeking.
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Status.StatusCodes.NS_PAUSE_NOTIFY">
            The subscriber has used the seek command to move to a particular location in the recorded stream.
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Status.StatusCodes.NS_UNPAUSE_NOTIFY">
            Publishing has stopped
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Status.StatusCodes.NS_PLAY_SWITCH">
            Playlist playback switched from one stream to another.
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Status.Status.ERROR">
            Error constant
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Status.Status.STATUS">
            Status constant
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Status.Status.WARNING">
            Warning constant
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Status.Status.code">
            Status code
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Status.Status.level">
            Status level
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Status.Status.description">
            Status event description
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Status.Status.details">
            Status event details
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Status.Status.clientid">
            Id of client
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Status.Status.#ctor">
            Constructs a new Status. 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Status.Status.#ctor(System.String)">
            Creates status object with given status code
            @param code            Status code
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Status.Status.#ctor(System.String,System.String,System.String)">
            Creates status object with given level, description and status code
            @param code            Status code
            @param level           Level
            @param description     Description
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Status.Status.getCode">
             Getter for status code.
            
             @return  Status code
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Status.Status.setCode(System.String)">
             Setter for code
            
             @param code Status code
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Status.Status.getDescription">
             Getter for description.
            
             @return Status event description.
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Status.Status.setDesciption(System.String)">
             Setter for desciption.
            
             @param description Status event description.
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Status.Status.getLevel">
             Getter for level.
            
             @return Level
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Status.Status.setLevel(System.String)">
             Setter for level
            
             @param level Level
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Status.Status.getClientid">
             Getter for client id
            
             @return  Client id
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Status.Status.setClientid(System.Int32)">
             Setter for client id
            
             @param clientid  Client id
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Status.Status.getDetails">
             Getter for details
            
             @return  Status event details
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Status.Status.setDetails(System.String)">
             Setter for details.
            
             @param details  Status event details
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Status.Status.setDescription(System.String)">
             Setter for description.
            
             @param description  Status event description
        </member>
        <member name="T:Weborb.Messaging.Api.Stream.IStreamPacket">
            Packet containing stream data. 
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamPacket.getDataType">
            Type of this packet. This is one of the <code>TYPE_</code> constants.
            
            @return the type
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamPacket.getTimestamp">
            Timestamp of this packet.
            
            @return the timestamp in milliseconds
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamPacket.getData">
            Packet contents.
            
            @return the contents
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.AudioData.#ctor">
            Constructs a new AudioData. 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.AudioData.getDataType">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.AudioData.getData">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.AudioData.ToString">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.AudioData.releaseInternal">
            {@inheritDoc} 
        </member>
        <member name="T:Weborb.Messaging.Api.Stream.Message.ResetMessage">
            To notify the client to reset the playing state.
        </member>
        <member name="T:Weborb.Messaging.Api.Stream.IStreamListener">
            Listener that is notified about packets received from a stream.
            
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamListener.packetReceived(Weborb.Messaging.Api.Stream.IBroadcastStream,Weborb.Messaging.Api.Stream.IStreamPacket)">
            A packet has been received from a stream.
            
            @param stream the stream the packet has been received for
            @param packet the packet received
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamCodecInfo.hasAudio">
            Has audio support?
            @return           <code>true</code> if stream codec has audio support, <code>false</code> otherwise
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamCodecInfo.hasVideo">
            Has video support?
            @return           <code>true</code> if stream codec has video support, <code>false</code> otherwise
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamCodecInfo.getAudioCodecName">
             Getter for audio codec name
            
             @return Audio codec name
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamCodecInfo.getVideoCodecName">
             Getter for video codec name
            
             @return Video codec name
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamCodecInfo.getVideoCodec">
             Return video codec
            
             @return Video codec used by stream codec
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IAudioStreamCodec.getName">
            @return the name of the audio codec.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IAudioStreamCodec.reset">
            Reset the codec to its initial state.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IAudioStreamCodec.canHandleData(Weborb.Messaging.Util.ByteBuffer)">
                 * Returns true if the codec knows how to handle the passed
                 * stream data.
                   * @param data some sample data to see if this codec can handle it.
                   * @return can this code handle the data.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IAudioStreamCodec.addData(Weborb.Messaging.Util.ByteBuffer)">
                 * Update the state of the codec with the passed data.
                   * @param data data to tell the codec we're adding
                   * @return true for success. false for error.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IAudioStreamCodec.getDecoderConfiguration">
            Returns information used to configure the decoder.
            
            @return the data for decoder setup.
        </member>
        <member name="M:Weborb.Messaging.Api.Persistance.PersistenceUtils.getPersistenceStore(Weborb.Messaging.Api.IScope,System.String)">
            Returns persistence store object. Persistence store is a special object
            that stores persistence objects and provides methods to manipulate them
            (save, load, remove, list).
            
            @param resolver
                       Resolves connection pattern into Resource object
            @param className
                       Name of persistence class
            @return IPersistence store object that provides methods for persistence
                    object handling
            @throws Exception
        </member>
        <member name="T:Weborb.Util.ORBUtil">
            <summary>
            Summary description for ORBUtil.
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.Codec.StreamCodecInfo.audio">
            Audio support flag
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.Codec.StreamCodecInfo.video">
            Video support flag
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.Codec.StreamCodecInfo.audioCodec">
            Audio codec
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.Codec.StreamCodecInfo.videoCodec">
            Video codec
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.Codec.StreamCodecInfo.hasAudio">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.Codec.StreamCodecInfo.setHasAudio(System.Boolean)">
             New value for audio support
            
             @param value Audio support
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.Codec.StreamCodecInfo.getAudioCodecName">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.Codec.StreamCodecInfo.getAudioCodec">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.Codec.StreamCodecInfo.setAudioCodec(Weborb.Messaging.Api.Stream.IAudioStreamCodec)">
             Setter for audio codec
            
             @param codec Audio codec
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.Codec.StreamCodecInfo.hasVideo">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.Codec.StreamCodecInfo.setHasVideo(System.Boolean)">
             New value for video support
            
             @param value Video support
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.Codec.StreamCodecInfo.getVideoCodecName">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.Codec.StreamCodecInfo.getVideoCodec">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.Codec.StreamCodecInfo.setVideoCodec(Weborb.Messaging.Api.Stream.IVideoStreamCodec)">
             Setter for video codec
            
             @param codec  Video codec
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IVideoStreamCodec.getName">
            Return the name of the video codec.
            @return
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IVideoStreamCodec.reset">
            Reset the codec to its initial state.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IVideoStreamCodec.canDropFrames">
            Check if the codec supports frame dropping.
            @return
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IVideoStreamCodec.canHandleData(Weborb.Messaging.Util.ByteBuffer)">
            Returns true if the codec knows how to handle the passed
            stream data.
            @return
            @param data
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IVideoStreamCodec.addData(Weborb.Messaging.Util.ByteBuffer)">
            Update the state of the codec with the passed data.
            @param data
            @return
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IVideoStreamCodec.getKeyframe">
            Return the data for a keyframe.
            @return
        </member>
        <member name="F:Weborb.Messaging.Server.PersistableAttributeStore.persistent">
            Persistence flag
        </member>
        <member name="F:Weborb.Messaging.Server.PersistableAttributeStore.name">
            Attribute store name
        </member>
        <member name="F:Weborb.Messaging.Server.PersistableAttributeStore.type">
            Attribute store type
        </member>
        <member name="F:Weborb.Messaging.Server.PersistableAttributeStore.path">
            Attribute store path (on local hard drive)
        </member>
        <member name="F:Weborb.Messaging.Server.PersistableAttributeStore.lastModified">
            Last modified Timestamp
        </member>
        <member name="F:Weborb.Messaging.Server.PersistableAttributeStore.store">
            Store object that deals with save/load routines
        </member>
        <member name="M:Weborb.Messaging.Server.PersistableAttributeStore.#ctor(System.String,System.String,System.String,System.Boolean)">
             Creates persistable attribute store
            
             @param type             Attribute store type
             @param name             Attribute store name
             @param path             Attribute store path
             @param persistent       Whether store is persistent or not
        </member>
        <member name="M:Weborb.Messaging.Server.PersistableAttributeStore.modified">
            Set last modified flag to current system time
        </member>
        <member name="M:Weborb.Messaging.Server.PersistableAttributeStore.isPersistent">
             Check whether object is persistent or not
            
             @return   true if object is persistent, false otherwise
        </member>
        <member name="M:Weborb.Messaging.Server.PersistableAttributeStore.setPersistent(System.Boolean)">
            Set for persistence
            @param persistent        Persistence flag value
        </member>
        <member name="M:Weborb.Messaging.Server.PersistableAttributeStore.getLastModified">
            Returns last modification time as timestamp
            @return      Timestamp of last attribute modification
        </member>
        <member name="M:Weborb.Messaging.Server.PersistableAttributeStore.getName">
            Return store name
            @return               Store name
        </member>
        <member name="M:Weborb.Messaging.Server.PersistableAttributeStore.setName(System.String)">
            Setter for name
            @param name    Name
        </member>
        <member name="M:Weborb.Messaging.Server.PersistableAttributeStore.getPath">
            Ruturn scope path
            @return          Path
        </member>
        <member name="M:Weborb.Messaging.Server.PersistableAttributeStore.setPath(System.String)">
            Setter for scope path
            @param path      Path
        </member>
        <member name="M:Weborb.Messaging.Server.PersistableAttributeStore.getType">
            Return scope type
            @return          Scope type
        </member>
        <member name="M:Weborb.Messaging.Server.PersistableAttributeStore.serialize(System.IO.Stream)">
             Serializes byte buffer output, storing them to attributes
            
             @param output               Output object
             @throws IOException
        </member>
        <member name="M:Weborb.Messaging.Server.PersistableAttributeStore.deserialize(System.IO.Stream)">
             Deserializes data from input to attributes
            
             @param input              Input object
             @throws IOException       I/O exception
        </member>
        <member name="M:Weborb.Messaging.Server.PersistableAttributeStore.setStore(Weborb.Messaging.Api.Persistance.IPersistenceStore)">
             Load data from another persistent store
            
             @param store         Persistent store
        </member>
        <member name="M:Weborb.Messaging.Server.PersistableAttributeStore.getStore">
            Return persistent store
            @return               Persistence store
        </member>
        <member name="M:Weborb.Messaging.Server.PersistableAttributeStore.setAttribute(System.String,System.Object)">
             Set attribute by name and return success as boolean
            
             @param name          Attribute name
             @param value         Attribute value
             @return              true if attribute was set, false otherwise
        </member>
        <member name="M:Weborb.Messaging.Server.PersistableAttributeStore.setAttributes(System.Collections.Generic.IDictionary{System.String,System.Object})">
             Set attributes from Map
            
             @param values          Attributes as Map
        </member>
        <member name="M:Weborb.Messaging.Server.PersistableAttributeStore.setAttributes(Weborb.Messaging.Api.IAttributeStore)">
             Bulk set of attributes from another attributes store
            
             @param values      Attributes store
        </member>
        <member name="M:Weborb.Messaging.Server.PersistableAttributeStore.removeAttribute(System.String)">
            Removes attribute
            @param name          Attribute name
            @return              true if attribute was removed, false otherwise
        </member>
        <member name="M:Weborb.Messaging.Server.PersistableAttributeStore.removeAttributes">
            Removes all attributes and sets modified flag
        </member>
        <member name="T:Weborb.Messaging.Server.Messaging.InMemoryPullPullPipe">
            A simple in-memory version of pull-pull pipe.
            It is triggered by an active consumer that pulls messages
            through it from a pullable provider.
        </member>
        <member name="T:Weborb.Messaging.Server.Messaging.AbstractPipe">
             Abstract pipe that books providers/consumers and listeners.
             Aim to ease the implementation of concrete pipes. For more
             information on what pipe is, see IPipe interface documentation.
            
             @see     org.red5.server.messaging.IPipe
        </member>
        <member name="F:Weborb.Messaging.Server.Messaging.AbstractPipe.consumers">
            Pipe consumers list
        </member>
        <member name="F:Weborb.Messaging.Server.Messaging.AbstractPipe.providers">
            Pipe providers list
        </member>
        <member name="M:Weborb.Messaging.Server.Messaging.AbstractPipe.subscribe(Weborb.Messaging.Api.Messaging.IConsumer,System.Collections.IDictionary)">
             Connect consumer to this pipe. Doesn't allow to connect one consumer twice.
             Does register event listeners if instance of IPipeConnectionListener is given.
            
             @param consumer        Consumer
             @param paramMap        Parameters passed with connection, used in concrete pipe implementations
             @return                <code>true</code> if consumer was added, <code>false</code> otherwise
        </member>
        <member name="M:Weborb.Messaging.Server.Messaging.AbstractPipe.subscribe(Weborb.Messaging.Api.Messaging.IProvider,System.Collections.IDictionary)">
             Connect provider to this pipe. Doesn't allow to connect one provider twice.
             Does register event listeners if instance of IPipeConnectionListener is given.
            
             @param provider        Provider
             @param paramMap        Parameters passed with connection, used in concrete pipe implementations
             @return                <code>true</code> if provider was added, <code>false</code> otherwise
        </member>
        <member name="M:Weborb.Messaging.Server.Messaging.AbstractPipe.unsubscribe(Weborb.Messaging.Api.Messaging.IProvider)">
            Disconnects provider from this pipe. Fires pipe connection event.
            @param provider        Provider that should be removed
            @return                 <code>true</code> on success, <code>false</code> otherwise
        </member>
        <member name="M:Weborb.Messaging.Server.Messaging.AbstractPipe.unsubscribe(Weborb.Messaging.Api.Messaging.IConsumer)">
            Disconnects consumer from this pipe. Fires pipe connection event.
            @param   consumer       Consumer that should be removed
            @return                 <code>true</code> on success, <code>false</code> otherwise
        </member>
        <member name="M:Weborb.Messaging.Server.Messaging.AbstractPipe.addPipeConnectionListener(Weborb.Messaging.Api.Messaging.IPipeConnectionListener)">
            Registers pipe connect events listener
            @param listener      Listener
        </member>
        <member name="M:Weborb.Messaging.Server.Messaging.AbstractPipe.removePipeConnectionListener(Weborb.Messaging.Api.Messaging.IPipeConnectionListener)">
            Removes pipe connection listener
            @param listener      Listener
        </member>
        <member name="M:Weborb.Messaging.Server.Messaging.AbstractPipe.sendOOBControlMessage(Weborb.Messaging.Api.Messaging.IProvider,Weborb.Messaging.Server.Messaging.OOBControlMessage)">
             Send out-of-band ("special") control message to all consumers
            
             @param provider           Provider, may be used in concrete implementations
             @param oobCtrlMsg         Out-of-band control message
        </member>
        <member name="M:Weborb.Messaging.Server.Messaging.AbstractPipe.sendOOBControlMessage(Weborb.Messaging.Api.Messaging.IConsumer,Weborb.Messaging.Server.Messaging.OOBControlMessage)">
             Send out-of-band ("special") control message to all providers
            
             @param consumer          Consumer, may be used in concrete implementations
             @param oobCtrlMsg        Out-of-band control message
        </member>
        <member name="M:Weborb.Messaging.Server.Messaging.AbstractPipe.getProviders">
             Getter for providers
            
             @return  Providers list
        </member>
        <member name="M:Weborb.Messaging.Server.Messaging.AbstractPipe.getConsumers">
             Getter for consumers
            
             @return  consumers list
        </member>
        <member name="M:Weborb.Messaging.Server.Messaging.AbstractPipe.fireConsumerConnectionEvent(Weborb.Messaging.Api.Messaging.IConsumer,System.Int32,System.Collections.IDictionary)">
             Broadcast consumer connection event
            
             @param consumer        Consumer that has connected
             @param type            Event type
             @param paramMap        Parameters passed with connection
        </member>
        <member name="M:Weborb.Messaging.Server.Messaging.AbstractPipe.fireProviderConnectionEvent(Weborb.Messaging.Api.Messaging.IProvider,System.Int32,System.Collections.IDictionary)">
            Broadcast provider connection event
            @param provider        Provider that has connected
            @param type            Event type
            @param paramMap        Parameters passed with connection
        </member>
        <member name="M:Weborb.Messaging.Server.Messaging.AbstractPipe.firePipeConnectionEvent(Weborb.Messaging.Server.Messaging.PipeConnectionEvent)">
            Fire any pipe connection event and run all it's tasks
            @param event            Pipe connection event
        </member>
        <member name="M:Weborb.Messaging.Server.Messaging.AbstractPipe.close">
            Close the pipe
        </member>
        <member name="M:Weborb.Messaging.Server.Messaging.InMemoryPullPullPipe.subscribe(Weborb.Messaging.Api.Messaging.IProvider,System.Collections.IDictionary)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Messaging.InMemoryPullPullPipe.pullMessage">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Messaging.InMemoryPullPullPipe.pullMessage(System.Int64)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Messaging.InMemoryPullPullPipe.pushMessage(Weborb.Messaging.Api.Messaging.IMessage)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.IO.ITagReader.getFile">
             Return the file that is loaded.
            
             @return
        </member>
        <member name="M:Weborb.Messaging.Server.IO.ITagReader.getOffset">
             Returns the offet length
            
             @return int
        </member>
        <member name="M:Weborb.Messaging.Server.IO.ITagReader.getBytesRead">
             Returns the amount of bytes read
            
             @return long
        </member>
        <member name="M:Weborb.Messaging.Server.IO.ITagReader.decodeHeader">
            Decode the header of the stream;
        </member>
        <member name="M:Weborb.Messaging.Server.IO.ITagReader.position(System.Int64)">
             Move the reader pointer to pos
            
             @param pos Position to move to
        </member>
        <member name="M:Weborb.Messaging.Server.IO.ITagReader.hasMoreTags">
             Returns a boolean stating whether the FLV has more tags
            
             @return boolean
        </member>
        <member name="M:Weborb.Messaging.Server.IO.ITagReader.readTag">
             Returns a Tag object
            
             @return Tag
        </member>
        <member name="M:Weborb.Messaging.Server.IO.ITagReader.getDuration">
            Return length in seconds
            @return
        </member>
        <member name="M:Weborb.Messaging.Server.IO.ITagReader.close">
            Closes the reader and free any allocated memory.
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP3.Impl.Mp3Reader._tag">
            <summary>
            Last read tag object
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP3.Impl.Mp3Reader._prevSize">
            <summary>
            Previous tag size
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP3.Impl.Mp3Reader._currentTime">
            <summary>
            Current time
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP3.Impl.Mp3Reader._frameMeta">
            <summary>
            Frame metadata
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP3.Impl.Mp3Reader._posTimeMap">
            <summary>
            Mapping between file position and timestamp in ms.
            (Long, Long)
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP3.Impl.Mp3Reader._firstFrame">
            <summary>
            Whether first frame is read
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP3.Impl.Mp3Reader._fileMeta">
            <summary>
            File metadata
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP3.Impl.Mp3Reader._duration">
            <summary>
            File duration
            </summary>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP3.Impl.Mp3Reader.HasVideo">
            <summary>
            An MP3 stream never has video.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP3.Impl.Mp3Reader.CheckValidHeader(Weborb.Messaging.Server.IO.MP3.Impl.MP3Header)">
            <summary>
            Check if the file can be played back with Flash. Supported sample rates are 44KHz, 22KHz, 11KHz and 5.5KHz
            </summary>
            <param name="header"></param>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP3.Impl.Mp3Reader.CreateFileMeta">
            <summary>
            Create file metadata object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP3.Impl.Mp3Reader.SearchNextFrame">
            <summary>
            Search for next frame sync word. Sync word identifies valid frame.
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Event.Ping.CLIENT_BUFFER">
            Client buffer
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Event.Ping.PONG_SERVER">
            Server response event
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Event.Ping.STREAM_PLAYBUFFER_CLEAR">
            Stream play
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Event.Ping.STREAM_DRY">
            Unknown event
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Event.Ping.RECORDED_STREAM">
            Stream reset
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Event.Ping.UNKNOWN_5">
            One more unknown event
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Event.Ping.PING_CLIENT">
            Client ping event
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Event.Ping.UNKNOWN_8">
            One more unknown event
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Event.Ping.UNDEFINED">
            Event type is undefined
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Event.Ping.eventType">
            The sub-type
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Event.Ping.debug">
            Debug string
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.Ping.#ctor">
            Constructs a new Ping. 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.Ping.getEventType">
            Returns the events sub-type
            
            @return the event type
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.Ping.setEventType(System.Int16)">
            Sets the events sub-type
            
            @param eventType
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.Ping.getDataType">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.Ping.getValue2">
             Getter for property 'value2'.
            
             @return Value for property 'value2'.
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.Ping.setValue2(System.Int32)">
             Setter for property 'value2'.
            
             @param value2 Value to set for property 'value2'.
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.Ping.getValue3">
             Getter for property 'value3'.
            
             @return Value for property 'value3'.
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.Ping.setValue3(System.Int32)">
             Setter for property 'value3'.
            
             @param value3 Value to set for property 'value3'.
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.Ping.getValue4">
             Getter for property 'value4'.
            
             @return Value for property 'value4'.
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.Ping.setValue4(System.Int32)">
             Setter for property 'value4'.
            
             @param value4 Value to set for property 'value4'.
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.Ping.getDebug">
             Getter for property 'debug'.
            
             @return Value for property 'debug'.
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.Ping.setDebug(System.String)">
             Setter for property 'debug'.
            
             @param debug Value to set for property 'debug'.
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.Ping.ToString">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.Ping.releaseInternal">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.IMetaCue.setName(System.String)">
             Sets the name
            
             @param String name
             @return void
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.IMetaCue.getName">
             Gets the name
            
             @return String name
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.IMetaCue.setType(System.String)">
             Sets the type
             type can be "event" or "navigation"
            
             @param String type
             @return void
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.IMetaCue.getType">
             Gets the type
            
             @return String type
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.IMetaCue.setTime(System.Double)">
             Sets the time
            
             @param double d
             @return void
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.IMetaCue.getTime">
             Gets the time
            
             @return double time
        </member>
        <member name="T:Weborb.Messaging.Server.Stream.StreamFlowController">
            Controller for stream flow. Adapts flow bandwidth to given configuration.
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.StreamFlowController.FIXED_CHANGE">
            Fixed change value (4 kb)
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamFlowController.adaptBandwidthForFlow(Weborb.Messaging.Api.Stream.IStreamFlow,Weborb.Messaging.Api.IFlowControllable)">
            Adapt stream flow to bandwidth from given controllable
            @param flow                    Stream flow
            @param controllable            Flow controllable object
            @return                        <code>true</code> on success, <code>false</code> otherwise
            @throws CloneNotSupportedException   Clone operation is not supported by object
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamFlowController.computeChange(System.Int64)">
            Return fixed change by now
            @param bw                 Bandwidth value
            @return                   Fixed change, 1024 * 4
        </member>
        <member name="T:Weborb.Messaging.Server.Stream.PlayEngine">
            A play engine for playing an IPlayItem.
        </member>
        <member name="M:Weborb.Messaging.Api.Messaging.IPushableConsumer.pushMessage(Weborb.Messaging.Api.Messaging.IPipe,Weborb.Messaging.Api.Messaging.IMessage)">
             Pushes message through pipe
            
             @param pipe         Pipe
             @param message      Message
             @throws IOException if message could not be written
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.PlayEngine._receiveVideo">
            Receive video?
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.PlayEngine._receiveAudio">
            Receive audio?
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.PlayEngine.bufferCheckInterval">
            Interval in ms to check for buffer underruns in VOD streams.
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.PlayEngine.underrunTrigger">
            Number of pending messages at which a <code>NetStream.Play.InsufficientBW</code>
            message is generated for VOD streams.
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.PlayEngine.maxPendingVideoFramesThreshold">
            threshold for number of pending video frames
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.PlayEngine.maxSequentialPendingVideoFrames">
            if we have more than 1 pending video frames, but less than maxPendingVideoFrames,
            continue sending until there are this many sequential frames with more than 1
            pending
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.PlayEngine.numSequentialPendingVideoFrames">
            the number of sequential video frames with > 0 pending frames
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.PlayEngine.videoFrameDropper">
            State machine for video frame dropping in live streams
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.PlayEngine.lastMessageTs">
            Timestamp of the last message sent to the client.
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.PlayEngine.playbackStart">
            Start time of stream playback.
            It's not a time when the stream is being played but
            the time when the stream should be played if it's played
            from the very beginning.
            Eg. A stream is played at timestamp 5s on 1:00:05. The
            playbackStart is 1:00:00.
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.PlayEngine.nextCheckBufferUnderrun">
            Timestamp when buffer should be checked for underruns next.
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.PlayEngine.playDecision">
            decision: 0 for Live, 1 for File, 2 for Wait, 3 for N/A
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlayEngine.#ctor(Weborb.Messaging.Server.Stream.PlayEngine.Builder)">
            Constructs a new PlayEngine.
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlayEngine.start">
            Start stream
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlayEngine.play(Weborb.Messaging.Api.Stream.IPlayItem,System.Boolean)">
            Play stream
            @param item                  Playlist item
            @throws StreamNotFoundException       Stream not found
            @throws IllegalStateException         Stream is in stopped state
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlayEngine.playVOD(System.Boolean,System.Int64)">
             Performs the processes needed for VOD / pre-recorded streams.
            
             @param withReset  whether or not to perform reset on the stream
             @param itemLength length of the item to be played
             @return message for the consumer
             @throws IOException
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlayEngine.pause(System.Int32)">
            Pause at position
            @param position                  Position in file
            @throws IllegalStateException    If stream is stopped
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlayEngine.resume(System.Int32)">
            Resume playback
            @param position                   Resumes playback
            @throws IllegalStateException     If stream is stopped
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlayEngine.seek(System.Int32)">
            Seek position in file
            @param position                  Position
            @throws IllegalStateException    If stream is in stopped state
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlayEngine.sendCheckVideoCM(Weborb.Messaging.Api.Messaging.IMessageInput)">
             Send VOD check video control message
            
             @param msgIn
             @return
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlayEngine.close">
            Close stream
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlayEngine.pullAndPush">
            Recieve then send if message is data (not audio or video)
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlayEngine.okayToSendMessage(Weborb.Messaging.Net.RTMP.Event.IRTMPEvent)">
             Check if it's okay to send the client more data. This takes the configured
             bandwidth as well as the requested client buffer into account.
            
             @param message
             @return
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlayEngine.doPushMessage(Weborb.Messaging.Net.RTMP.Status.Status)">
             Sends a status message.
            
             @param status
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlayEngine.doPushMessage(Weborb.Messaging.Api.Messaging.AbstractMessage)">
             Send message to output stream and handle exceptions.
            
             @param message The message to send.
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlayEngine.pendingMessages">
             Get number of pending messages to be sent
            
             @return Number of pending messages
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlayEngine.clearWaitJobs">
            Clear all scheduled waiting jobs
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlayEngine.sendMessage(Weborb.Messaging.Api.Stream.Message.RTMPMessage)">
            Send RTMP message
            @param message        RTMP message
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlayEngine.sendClearPing">
            Send clear ping, that is, just to check if connection is alive
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlayEngine.sendReset">
            Send reset message
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlayEngine.sendResetStatus(Weborb.Messaging.Api.Stream.IPlayItem)">
            Send reset status for item
            @param item            Playlist item
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlayEngine.sendStartStatus(Weborb.Messaging.Api.Stream.IPlayItem)">
            Send playback start status notification
            @param item            Playlist item
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlayEngine.sendStopStatus(Weborb.Messaging.Api.Stream.IPlayItem)">
            Send playback stoppage status notification
            @param item            Playlist item
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlayEngine.sendSeekStatus(Weborb.Messaging.Api.Stream.IPlayItem,System.Int32)">
            Send seek status notification
            @param item            Playlist item
            @param position        Seek position
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlayEngine.sendPauseStatus(Weborb.Messaging.Api.Stream.IPlayItem)">
            Send pause status notification
            @param item            Playlist item
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlayEngine.sendResumeStatus(Weborb.Messaging.Api.Stream.IPlayItem)">
            Send resume status notification
            @param item            Playlist item
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlayEngine.sendPublishedStatus(Weborb.Messaging.Api.Stream.IPlayItem)">
            Send published status notification
            @param item            Playlist item
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlayEngine.sendUnpublishedStatus(Weborb.Messaging.Api.Stream.IPlayItem)">
            Send unpublished status notification
            @param item            Playlist item
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlayEngine.sendStreamNotFoundStatus(Weborb.Messaging.Api.Stream.IPlayItem)">
            Stream not found status notification
            @param item            Playlist item
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlayEngine.sendVODInitCM(Weborb.Messaging.Api.Messaging.IMessageInput,Weborb.Messaging.Api.Stream.IPlayItem)">
            Send VOD init control message
            @param msgIn           Message input
            @param item            Playlist item
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlayEngine.sendVODSeekCM(Weborb.Messaging.Api.Messaging.IMessageInput,System.Int32)">
            Send VOD seek control message
            @param msgIn            Message input
            @param position         Playlist item
            @return                 Out-of-band control message call result or -1 on failure
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlayEngine.onOOBControlMessage(Weborb.Messaging.Api.Messaging.IMessageComponent,Weborb.Messaging.Api.Messaging.IPipe,Weborb.Messaging.Server.Messaging.OOBControlMessage)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlayEngine.onPipeConnectionEvent(Weborb.Messaging.Server.Messaging.PipeConnectionEvent)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlayEngine.pushMessage(Weborb.Messaging.Api.Messaging.IPipe,Weborb.Messaging.Api.Messaging.IMessage)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlayEngine.pendingVideoMessages">
            Get number of pending video messages
            @return          Number of pending video messages
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlayEngine.releasePendingMessage">
            Releases pending message body, nullifies pending message object
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlayEngine.receiveAudio">
             Returns true if the engine currently receives audio.
            
             @return receive audio
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlayEngine.receiveAudio(System.Boolean)">
             Returns true if the engine currently receives audio and
             sets the new value.
            
             @param receive new value
             @return old value
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlayEngine.receiveVideo">
             Returns true if the engine currently receives video.
            
             @return receive video
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlayEngine.receiveVideo(System.Boolean)">
             Returns true if the engine currently receives video and
             sets the new value.
            
             @param receive new value
             @return old value
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlayEngine.setMaxPendingVideoFrames(System.Int32)">
            @param maxPendingVideoFrames the maxPendingVideoFrames to set
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.PlayEngine.setMaxSequentialPendingVideoFrames(System.Int32)">
            @param maxSequentialPendingVideoFrames
                    the maxSequentialPendingVideoFrames to set
        </member>
        <member name="T:Weborb.Messaging.Server.Stream.PlayEngine.Builder">
            Builder pattern
        </member>
        <member name="F:Weborb.Messaging.Server.BasicScope.keepOnDisconnect">
            Set to true to prevent the scope from being freed upon disconnect.
        </member>
        <!-- Badly formed XML comment ignored for member "T:Weborb.Messaging.Api.SO.ISharedObject" -->
        <member name="M:Weborb.Messaging.Api.SO.ISharedObject.acquire">
            Prevent shared object from being released. Each call to <code>acquire</code>
            must be paired with a call to <code>release</code> so the SO isn't held
            forever.
            
            This method basically is a noop for persistent SOs as their data is stored
            and they can be released without losing their contents.
        </member>
        <member name="M:Weborb.Messaging.Api.SO.ISharedObject.isAcquired">
            Check if shared object currently is acquired.
            
            @return <code>true</code> if the SO is acquired, otherwise <code>false</code>
        </member>
        <member name="M:Weborb.Messaging.Api.SO.ISharedObject.release">
            Release previously acquired shared object. If the SO is non-persistent,
            no more clients are connected the SO isn't acquired any more, the data
            is released. 
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectScope.isPersistentObject">
            {@inheritDoc}
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectScope.addSharedObjectListener(Weborb.Messaging.Api.SO.ISharedObjectListener)">
            {@inheritDoc}
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectScope.removeSharedObjectListener(Weborb.Messaging.Api.SO.ISharedObjectListener)">
            {@inheritDoc}
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectScope.registerServiceHandler(System.Object)">
            {@inheritDoc}
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectScope.registerServiceHandler(System.String,System.Object)">
            {@inheritDoc}
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectScope.unregisterServiceHandler(System.String)">
            {@inheritDoc}
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectScope.getServiceHandler(System.String)">
            {@inheritDoc}
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectScope.getServiceHandlerNames">
            {@inheritDoc}
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectScope.lockSO">
            Locks the shared object instance. Prevents any changes to this object by
            clients until the SharedObject.unlock() method is called.
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectScope.unlockSO">
            Unlocks a shared object instance that was locked with
            SharedObject.lock().
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectScope.isLocked">
             Returns the locked state of this SharedObject.
            
             @return true if in a locked state; false otherwise
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectScope.clear">
            {@inheritDoc}
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectScope.close">
            {@inheritDoc}
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectScope.acquire">
            {@inheritDoc}
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectScope.isAcquired">
            {@inheritDoc}
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectScope.release">
            {@inheritDoc} 
        </member>
        <member name="T:Weborb.Messaging.Server.IO.MP4.IMP4">
            <summary>
            Represents MP4 file
            </summary>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP4.IMP4.RefreshHeaders">
            <summary>
            Refreshes the headers. Usually used after data is added to the mp4 file.
            </summary>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP4.IMP4.FlushHeaders">
            <summary>
            Flushes the headers.
            </summary>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP4.IMP4.ReaderFromNearestKeyFrame(System.Int32)">
            <summary>
            Returns a reader closest to the nearest keyframe.
            </summary>
            <param name="seekPoint">Point in file we are seeking around.</param>
            <returns>Tag reader closest to the specified point.</returns>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP4.IMP4.WriterFromNearestKeyFrame(System.Int32)">
            <summary>
            Returns a writer based on the nearest key frame.
            </summary>
            <param name="seekPoint">Point in file we are seeking around.</param>
            <returns>Tag writer closest to the specified point.</returns>
        </member>
        <member name="P:Weborb.Messaging.Server.IO.MP4.IMP4.HasMetaData">
            <summary>
            Returns a boolean stating whether the mp4 has metadata.
            </summary>
            <value><code>true</code> if file has injected metadata, <code>false</code> otherwise.</value>
        </member>
        <member name="P:Weborb.Messaging.Server.IO.MP4.IMP4.MetaData">
            <summary>
            Gets or sets the metadata.
            </summary>
        </member>
        <member name="P:Weborb.Messaging.Server.IO.MP4.IMP4.MetaService">
            <summary>
            Gets or sets the MetaService.
            </summary>
        </member>
        <member name="P:Weborb.Messaging.Server.IO.MP4.IMP4.HasKeyFrameData">
            <summary>
            Returns a boolean stating whether a mp4 has keyframedata.
            </summary>
        </member>
        <member name="P:Weborb.Messaging.Server.IO.MP4.IMP4.KeyFrameData">
            <summary>
            Gets or sets the keyframe data.
            </summary>
        </member>
        <member name="T:Weborb.Messaging.Server.IO.MP3.Impl.MP3Header">
            <summary>
            Header of an Mp3 frame.
            http://mpgedit.org/mpgedit/mpeg_format/mpeghdr.htm
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP3.Impl.MP3Header.SamplingRates">
            <summary>
            Sampling rates in hertz: 1. index = MPEG Version ID, 2. index = sampling rate index
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP3.Impl.MP3Header.Bitrates">
            <summary>
            Bitrates: 1. index = LSF, 2. index = Layer, 3. index = bitrate index
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP3.Impl.MP3Header.AllowedModes">
            <summary>
            Allowed combination of bitrate (1.index) and mono (2.index)
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP3.Impl.MP3Header.SamplesPerFrames">
            <summary>
            Samples per Frame: 1. index = LSF, 2. index = Layer
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP3.Impl.MP3Header.Coefficients">
            <summary>
            Samples per Frame / 8
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP3.Impl.MP3Header.SlotSizes">
            <summary>
            Slot size per layer
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP3.Impl.MP3Header.SideInfoSizes">
            <summary>
            Size of side information (only for Layer III)
            1. index = LSF, 2. index = mono
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP3.Impl.MP3Header._data">
            <summary>
            Frame sync data
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP3.Impl.MP3Header._audioVersionId">
            <summary>
            Audio version id
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP3.Impl.MP3Header._layerDescription">
            <summary>
            Layer description
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP3.Impl.MP3Header._protectionBit">
            <summary>
            Protection bit
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP3.Impl.MP3Header._bitRateIndex">
            <summary>
            Bitrate used (index in array of bitrates)
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP3.Impl.MP3Header._bitrate">
            <summary>
            In bit per second (1 kb = 1000 bit, not 1024)
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP3.Impl.MP3Header._samplingRateIndex">
            <summary>
            Sampling rate used (index in array of sample rates)
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP3.Impl.MP3Header._paddingSize">
            <summary>
            Padding bit
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP3.Impl.MP3Header._channelMode">
            <summary>
            Channel mode
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP3.Impl.MP3Header._lsf">
            <summary>
            1 means lower sampling frequencies (=MPEG2/MPEG2.5)
            </summary>
        </member>
        <member name="T:Weborb.Messaging.Net.RTMP.Event.FlexMessage">
            Flex method invocation. To be implemented.
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolDecoder.#ctor">
            Constructs a new RTMPProtocolDecoder. 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolDecoder.decodeBuffer(Weborb.Messaging.Net.RTMP.ProtocolState,Weborb.Messaging.Util.ByteBuffer)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolDecoder.decode(Weborb.Messaging.Net.RTMP.ProtocolState,Weborb.Messaging.Util.ByteBuffer)">
            Decodes byte buffer
            @param state                   Protocol state
            @param in                      Input byte buffer
            @return                        Decoded object
            @throws ProtocolException      Exception during decoding
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolDecoder.decodeHandshake(Weborb.Messaging.Net.RTMP.Codec.RTMP,Weborb.Messaging.Util.ByteBuffer)">
            Decodes handshake message
            @param rtmp                    RTMP protocol state
            @param in                      Byte buffer
            @return                        Byte buffer
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolDecoder.decodePacket(Weborb.Messaging.Net.RTMP.Codec.RTMP,Weborb.Messaging.Util.ByteBuffer)">
            Decodes packet
            @param rtmp                    RTMP protocol state
            @param in                      Byte buffer
            @return                        Byte buffer
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolDecoder.decodeHeader(Weborb.Messaging.Util.ByteBuffer,Weborb.Messaging.Net.RTMP.Message.Header)">
            Decides packet header
            @param in                      Input byte buffer
            @param lastHeader              Previous header
            @return                        Decoded header
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolDecoder.decodeMessage(Weborb.Messaging.Net.RTMP.Codec.RTMP,Weborb.Messaging.Net.RTMP.Message.Header,Weborb.Messaging.Util.ByteBuffer)">
            Decodes RTMP message event
            @param rtmp                    RTMP protocol state
            @param header                  RTMP header
            @param in                      Input byte buffer
            @return                        RTMP event
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolDecoder.decodeServerBW(Weborb.Messaging.Util.ByteBuffer)">
            Decodes server bandwidth
            @param in                      Byte buffer
            @return                        RTMP event
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolDecoder.decodeClientBW(Weborb.Messaging.Util.ByteBuffer)">
            Decodes client bandwidth
            @param in                      Byte buffer
            @return                        RTMP event
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolDecoder.decodeUnknown(System.Byte,Weborb.Messaging.Util.ByteBuffer)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolDecoder.decodeChunkSize(Weborb.Messaging.Util.ByteBuffer)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolDecoder.decodeFlexSharedObject(Weborb.Messaging.Util.ByteBuffer,Weborb.Messaging.Net.RTMP.Codec.RTMP)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolDecoder.decodeSharedObject(Weborb.Messaging.Util.ByteBuffer,Weborb.Messaging.Net.RTMP.Codec.RTMP)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolDecoder.doDecodeSharedObject(Weborb.Messaging.Server.SO.SharedObjectMessage,Weborb.Messaging.Util.ByteBuffer)">
            Perform the actual decoding of the shared object contents.
            
            @param so
            @param in
            @param rtmp
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolDecoder.decodeNotify(Weborb.Messaging.Util.ByteBuffer,Weborb.Messaging.Net.RTMP.Codec.RTMP)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolDecoder.decodeInvoke(Weborb.Messaging.Util.ByteBuffer,Weborb.Messaging.Net.RTMP.Codec.RTMP)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolDecoder.isStreamCommand(System.String)">
             Checks if the passed action is a reserved stream method.
            
             @param action          Action to check
             @return                <code>true</code> if passed action is a reserved stream method, <code>false</code> otherwise
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolDecoder.decodeNotifyOrInvoke(Weborb.Messaging.Net.RTMP.Event.Notify,Weborb.Messaging.Util.ByteBuffer,Weborb.Messaging.Net.RTMP.Message.Header,Weborb.Messaging.Net.RTMP.Codec.RTMP)">
            Decodes notification event
            @param notify             Notify event
            @param in                 Byte buffer
            @param header             Header
            @param rtmp               RTMP protocol state
            @return                   Notification event
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolDecoder.decodePing(Weborb.Messaging.Util.ByteBuffer)">
            Decodes ping event
            @param in            Byte buffer
            @return              Ping event
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolDecoder.decodeBytesRead(Weborb.Messaging.Util.ByteBuffer)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolDecoder.decodeAudioData(Weborb.Messaging.Util.ByteBuffer)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolDecoder.decodeVideoData(Weborb.Messaging.Util.ByteBuffer)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolDecoder.decodeFlexMessage(Weborb.Messaging.Util.ByteBuffer,Weborb.Messaging.Net.RTMP.Codec.RTMP)">
            Decodes FlexMessage event
            @param in               Byte buffer
            @param rtmp			   RTMP protocol state
            @return                 FlexMessage event
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamCapableConnection.reserveStreamId">
            Return a reserved stream id for use.
            According to FCS/FMS regulation, the base is 1.
            @return              Reserved stream id
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamCapableConnection.unreserveStreamId(System.Int32)">
            Unreserve this id for future use.
            
            @param streamId      ID of stream to unreserve
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamCapableConnection.deleteStreamById(System.Int32)">
            Deletes the stream with the given id.
            
            @param streamId      ID of stream to delete
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamCapableConnection.getStreamById(System.Int32)">
            Get a stream by its id.
            
            @param streamId      Stream id
            @return              Stream with given id
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamCapableConnection.newSingleItemSubscriberStream(System.Int32)">
            Create a stream that can play only one item.
            
            @param streamId      Stream id
            @return              New subscriber stream that can play only one item
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamCapableConnection.newPlaylistSubscriberStream(System.Int32)">
            Create a stream that can play a list.
            
            @param streamId      Stream id
            @return              New stream that can play sequence of items
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamCapableConnection.newBroadcastStream(System.Int32)">
            Create a broadcast stream.
            
            @param streamId      Stream id
            @return              New broadcast stream
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamCapableConnection.getPendingVideoMessages(System.Int32)">
             Total number of video messages that are pending to be sent to a stream.
            
             @param streamId       Stream id
             @return               Number of pending video messages
        </member>
        <member name="M:Weborb.Messaging.Api.Service.IServiceCapableConnection.notify(Weborb.Messaging.Api.Service.IServiceCall)">
            
             @param call
        </member>
        <member name="M:Weborb.Messaging.Api.Service.IServiceCapableConnection.notify(Weborb.Messaging.Api.Service.IServiceCall,System.Byte)">
            
             @param call
             @param channel
        </member>
        <member name="M:Weborb.Messaging.Api.Service.IServiceCapableConnection.notify(System.String)">
            
             @param method
        </member>
        <member name="M:Weborb.Messaging.Api.Service.IServiceCapableConnection.notify(System.String,System.Object[])">
            
            @param method
            @param params
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.RTMPConnection.RTMP_NON_ENCRYPTED">
            Marker byte for standard or non-encrypted RTMP data.
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.RTMPConnection.channels">
             Connection channels
            
             @see org.red5.server.net.rtmp.Channel
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.RTMPConnection.streams">
             Client streams
            
             @see org.red5.server.api.stream.IClientStream
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.RTMPConnection.invokeId">
            Identifier for remote calls
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.RTMPConnection.pendingCalls">
            Hash map that stores pending calls and ids as pairs.
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.RTMPConnection.deferredResults">
             Deferred results set
            
             @see org.red5.server.net.rtmp.DeferredResult
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.RTMPConnection.lastPingTime">
            Last ping timestamp
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.RTMPConnection.pingReplied">
            Whether ping replied or not
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.RTMPConnection.pingRetryCount">
            How many times the connection was pinged without a response
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.RTMPConnection.lastPingSent">
            Timestamp when last ping command was sent.
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.RTMPConnection.lastPongReceived">
            Timestamp when last ping result was received.
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.RTMPConnection.keepAliveJobName">
            Name of quartz job that keeps connection alive
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.RTMPConnection.pingInterval">
            Ping interval in ms to detect dead clients.
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.RTMPConnection.maxInactivity">
            Maximum time in ms after a client is disconnected because of inactivity.
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.RTMPConnection.bytesReadInterval">
            Data read interval
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.RTMPConnection.nextBytesRead">
            Number of bytes to read next
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.RTMPConnection.pendingVideos">
            Map for pending video packets and stream IDs
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.RTMPConnection.usedStreams">
            Number of streams used
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.RTMPConnection.encoding">
            AMF version, AMF0 by default
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.RTMPConnection.waitForHandshakeJob">
            Name of job that is waiting for a valid handshake.
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.RTMPConnection.maxHandshakeTimeout">
            Maximum time in milliseconds to wait for a valid handshake.
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.RTMPConnection.streamBuffers">
            Remembered stream buffer durations.
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.#ctor(System.String)">
            Creates anonymous RTMP connection without scope
            @param type          Connection type
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.setup(System.String,System.String,System.String,System.Collections.IDictionary)">
             Initialize connection
            
             @param host             Connection host
             @param path             Connection path
             @param sessionId        Connection session id
             @param params           Params passed from client
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.getEncoding">
            Return AMF protocol encoding used by this connection
            @return                  AMF encoding used by connection
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.getNextAvailableChannelId">
             Getter for  next available channel id
            
             @return  Next available channel id
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.isChannelUsed(System.Int32)">
            Checks whether channel is used
            @param channelId        Channel id
            @return                 <code>true</code> if channel is in use, <code>false</code> otherwise
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.getChannel(System.Int32)">
            Return channel by id
            @param channelId        Channel id
            @return                 Channel by id
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.closeChannel(System.Int32)">
            Closes channel
            @param channelId       Channel id
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.getStreams">
             Getter for client streams
            
             @return  Client streams as array
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.reserveStreamId">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.createOutputStream(System.Int32)">
             Creates output stream object from stream id. Output stream consists of audio, data and video channels.
            
             @see   org.red5.server.stream.OutputStream
             @param streamId          Stream id
             @return                  Output stream object
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.newBroadcastStream(System.Int32)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.newSingleItemSubscriberStream(System.Int32)">
            {@inheritDoc}
            To be implemented.
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.newPlaylistSubscriberStream(System.Int32)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.getUsedStreamCount">
             Getter for used stream count
            
             @return Value for property 'usedStreamCount'.
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.getStreamById(System.Int32)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.getStreamIdForChannel(System.Int32)">
            Return stream id for given channel id
            @param channelId        Channel id
            @return                 ID of stream that channel belongs to
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.getStreamByChannelId(System.Int32)">
            Return stream for given channel id
            @param channelId        Channel id
            @return                 Stream that channel belongs to
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.registerStream(Weborb.Messaging.Api.Stream.IClientStream)">
            Store a stream in the connection.
            
            @param stream
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.unreserveStreamId(System.Int32)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.deleteStreamById(System.Int32)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.ping(Weborb.Messaging.Net.RTMP.Event.Ping)">
            Handler for ping event
            @param ping        Ping event context
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.rawWrite(Weborb.Messaging.Util.ByteBuffer,Weborb.Messaging.Net.RTMP.Message.Packet)">
            Write raw byte buffer
            @param out           Byte buffer
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.write(Weborb.Messaging.Net.RTMP.Message.Packet)">
            Write packet
            @param out           Packet
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.updateBytesRead">
            Update number of bytes to read next value
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.receivedBytesRead(System.Int32)">
            Read number of recieved bytes
            @param bytes                Number of bytes
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.invoke(Weborb.Messaging.Api.Service.IServiceCall)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.getInvokeId">
             Generate next invoke id
            
             @return  Next invoke id for RPC
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.registerPendingCall(System.Int32,Weborb.Messaging.Api.Service.IPendingServiceCall)">
            Register pending call (remote function call that is yet to finish)
            @param invokeId             Deferred operation id
            @param call                 Call service
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.invoke(Weborb.Messaging.Api.Service.IServiceCall,System.Byte)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.invoke(System.String)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.invoke(System.String,System.Object[])">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.invoke(System.String,Weborb.Messaging.Api.Service.IPendingServiceCallback)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.invoke(System.String,System.Object[],Weborb.Messaging.Api.Service.IPendingServiceCallback)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.notify(Weborb.Messaging.Api.Service.IServiceCall)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.notify(Weborb.Messaging.Api.Service.IServiceCall,System.Byte)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.notify(System.String)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.notify(System.String,System.Object[])">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.getReadBytes">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.getWrittenBytes">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.getPendingCall(System.Int32)">
            Get pending call service by id
            @param invokeId               Pending call service id
            @return                       Pending call service object
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.createStreamName">
            Generates new stream name
            @return       New stream name
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.writingMessage(Weborb.Messaging.Net.RTMP.Message.Packet)">
             Mark message as being written.
            
             @param message        Message to mark
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.messageReceived">
            Increases number of read messages by one. Updates number of bytes read.
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.messageSent(Weborb.Messaging.Net.RTMP.Message.Packet)">
             Mark message as sent.
            
             @param message           Message to mark
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.messageDropped">
            Increases number of dropped messages
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.getPendingVideoMessages(System.Int32)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.ping">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.pingReceived(Weborb.Messaging.Net.RTMP.Event.Ping)">
            Marks that pingback was recieved
            @param pong            Ping object
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.getLastPingTime">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.setPingInterval(System.Int32)">
            Setter for ping interval.
            
            @param pingInterval Interval in ms to ping clients. Set to <code>0</code> to
                       disable ghost detection code.
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.setMaxInactivity(System.Int32)">
            Setter for maximum inactivity.
            
            @param maxInactivity Maximum time in ms after which a client is disconnected in
                       case of inactivity.
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.startRoundTripMeasurement">
            Starts measurement
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.setSchedulingService(Weborb.Messaging.Api.Scheduling.ISchedulingService)">
            Sets the scheduling service.
            
            @param schedulingService scheduling service
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.onInactive">
            Inactive state event handler
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.registerDeferredResult(Weborb.Messaging.Net.RTMP.DeferredResult)">
            Registers deffered result
            @param result            Result to register
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.unregisterDeferredResult(Weborb.Messaging.Net.RTMP.DeferredResult)">
            Unregister deffered result
            @param result             Result to unregister
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.setMaxHandshakeTimeout(System.Int32)">
            Set maximum time to wait for valid handshake in milliseconds.
            
            @param maxHandshakeTimeout Maximum time in milliseconds
        </member>
        <member name="T:Weborb.Messaging.Net.RTMP.RTMPConnection.KeepAliveJob">
            Quartz job that keeps connection alive and disconnects if client is dead.
        </member>
        <member name="M:Weborb.Messaging.Api.Scheduling.IScheduledJob.execute(Weborb.Messaging.Api.Scheduling.ISchedulingService)">
            Called each time the job is triggered by the scheduling service.
            
            @param service
            			the service that called the job
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.KeepAliveJob.execute(Weborb.Messaging.Api.Scheduling.ISchedulingService)">
            {@inheritDoc} 
        </member>
        <member name="T:Weborb.Messaging.Net.RTMP.RTMPConnection.WaitForHandshakeJob">
            Quartz job that waits for a valid handshake and disconnects the client if
            none is received.
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPConnection.WaitForHandshakeJob.execute(Weborb.Messaging.Api.Scheduling.ISchedulingService)">
            {@inheritDoc} 
        </member>
        <member name="F:Weborb.Messaging.Net.RTMPT.RTMPTConnection.INCREASE_POLLING_DELAY_COUNT">
            Start to increase the polling delay after this many empty results
        </member>
        <member name="F:Weborb.Messaging.Net.RTMPT.RTMPTConnection.INITIAL_POLLING_DELAY">
            Polling delay to start with.
        </member>
        <member name="F:Weborb.Messaging.Net.RTMPT.RTMPTConnection.MAX_POLLING_DELAY">
            Maximum polling delay.
        </member>
        <member name="F:Weborb.Messaging.Net.RTMPT.RTMPTConnection.state">
            RTMP protocol state
        </member>
        <member name="F:Weborb.Messaging.Net.RTMPT.RTMPTConnection.decoder">
            Protocol decoder
        </member>
        <member name="F:Weborb.Messaging.Net.RTMPT.RTMPTConnection.encoder">
            Protocol encoder
        </member>
        <member name="F:Weborb.Messaging.Net.RTMPT.RTMPTConnection.handler">
            RTMP events handler
        </member>
        <member name="F:Weborb.Messaging.Net.RTMPT.RTMPTConnection.buffer">
            Byte buffer
        </member>
        <member name="F:Weborb.Messaging.Net.RTMPT.RTMPTConnection.pendingMessages">
            List of pending messages
        </member>
        <member name="F:Weborb.Messaging.Net.RTMPT.RTMPTConnection.notifyMessages">
            List of notification messages
        </member>
        <member name="F:Weborb.Messaging.Net.RTMPT.RTMPTConnection.pollingDelay">
            Polling delay value
        </member>
        <member name="F:Weborb.Messaging.Net.RTMPT.RTMPTConnection.noPendingMessages">
            Timeframe without pending messages. If this time is greater then polling delay,
            then polling delay increased
        </member>
        <member name="F:Weborb.Messaging.Net.RTMPT.RTMPTConnection.readBytes">
            Number of read bytes
        </member>
        <member name="F:Weborb.Messaging.Net.RTMPT.RTMPTConnection.writtenBytes">
            Number of written bytes
        </member>
        <member name="F:Weborb.Messaging.Net.RTMPT.RTMPTConnection.closing">
            Closing flag
        </member>
        <member name="F:Weborb.Messaging.Net.RTMPT.RTMPTConnection._lock">
            Connection client id
        </member>
        <member name="M:Weborb.Messaging.Net.RTMPT.RTMPTConnection.#ctor">
            Constructs a new RTMPTConnection. 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMPT.RTMPTConnection.setRTMPTHandler(Weborb.Messaging.Net.RTMPT.RTMPTHandler)">
             Setter for RTMP events handler
            
             @param handler  Handler
        </member>
        <member name="M:Weborb.Messaging.Net.RTMPT.RTMPTConnection.close">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMPT.RTMPTConnection.isClosing">
             Getter for property 'closing'.
            
             @return Value for property 'closing'.
        </member>
        <member name="M:Weborb.Messaging.Net.RTMPT.RTMPTConnection.realClose">
            Real close
        </member>
        <member name="M:Weborb.Messaging.Net.RTMPT.RTMPTConnection.onInactive">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMPT.RTMPTConnection.getState">
             Return the current decoder state.
            
             @return the current decoder state.
        </member>
        <member name="M:Weborb.Messaging.Net.RTMPT.RTMPTConnection.getPollingDelay">
             Return the polling delay to use.
            
             @return the polling delay
        </member>
        <member name="M:Weborb.Messaging.Net.RTMPT.RTMPTConnection.decode(Weborb.Messaging.Util.ByteBuffer)">
             Decode data sent by the client.
            
             @param data
             			the data to decode
             @return a list of decoded objects
        </member>
        <member name="M:Weborb.Messaging.Net.RTMPT.RTMPTConnection.write(Weborb.Messaging.Net.RTMP.Message.Packet)">
             Send RTMP packet down the connection.
            
             @param packet
             			the packet to send
        </member>
        <member name="M:Weborb.Messaging.Net.RTMPT.RTMPTConnection.rawWrite(Weborb.Messaging.Util.ByteBuffer)">
             Send raw data down the connection.
            
             @param packet
             			the buffer containing the raw data
        </member>
        <member name="M:Weborb.Messaging.Net.RTMPT.RTMPTConnection.getPendingMessages(System.Int32)">
             Return any pending messages up to a given size.
            
             @param targetSize
             			the size the resulting buffer should have
             @return a buffer containing the data to send or null if no messages are
                     pending
        </member>
        <member name="M:Weborb.Messaging.Net.RTMPT.RTMPTConnection.getReadBytes">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMPT.RTMPTConnection.getWrittenBytes">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMPT.RTMPTConnection.getPendingMessages">
            {@inheritDoc} 
        </member>
        <member name="T:Weborb.Messaging.Api.Stream.IStreamFilenameGenerator">
            A class that can generate filenames for streams.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamFilenameGenerator.generateFilename(Weborb.Messaging.Api.IScope,System.String,Weborb.Messaging.Api.Stream.GenerationType)">
            Generate a filename without an extension.
            
            @param scope           Scope to use
            @param name            Stream name
            @param type            Generation strategy (either playback or record)
            @return                Full filename
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamFilenameGenerator.generateFilename(Weborb.Messaging.Api.IScope,System.String,System.String,Weborb.Messaging.Api.Stream.GenerationType)">
             Generate a filename with an extension.
            
             @param scope           Scope to use
             @param name            Stream filename
             @param extension       Extension
             @param type            Generation strategy (either playback or record)
             @return                Full filename with extension
        </member>
        <member name="T:Weborb.Messaging.Api.Stream.IBroadcastStream">
            A broadcast stream is a stream source to be subscribed by clients. To
            subscribe a stream from your client Flash application use NetStream.play
            method. Broadcast stream can be saved at server-side.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IBroadcastStream.saveAs(System.String,System.Boolean)">
            Save the broadcast stream as a file. 
            
            @param filePath
                       The path of the file relative to the scope.
            @param isAppend
                       Whether to append to the end of file.
            @throws IOException
            			   File could not be created/written to.
            @throws ResourceExistException
                        Resource exist when trying to create.
            @throws ResourceNotFoundException
                        Resource not exist when trying to append.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IBroadcastStream.getSaveFilename">
            Get the filename the stream is being saved as.
            
            @return	The filename relative to the scope or <code>null</code>
            			if the stream is not being saved. 
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IBroadcastStream.getProvider">
            Get the provider corresponding to this stream. Provider objects are
            object that
            
            @return
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IBroadcastStream.getPublishedName">
            Get stream publish name. Publish name is the value of the first parameter
            had been passed to <code>NetStream.publish</code> on client side in
            SWF.
            
            @return	Stream publish name	
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IBroadcastStream.setPublishedName(System.String)">
            
            @param name
                       Set stream publish name
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IClientBroadcastStream.startPublishing">
            Notify client that stream is ready for publishing.
        </member>
        <member name="T:Weborb.Messaging.Api.Scheduling.ISchedulingService">
            Service that supports periodic execution of jobs, adding, removing and
            getting their name as list.
        </member>
        <member name="M:Weborb.Messaging.Api.Scheduling.ISchedulingService.addScheduledJob(System.Int32,Weborb.Messaging.Api.Scheduling.IScheduledJob)">
            Schedule a job for periodic execution.
            
            @param interval
            			time in milliseconds between two notifications of the job
            @param job
            			the job to trigger periodically
            @return the name of the scheduled job
        </member>
        <member name="M:Weborb.Messaging.Api.Scheduling.ISchedulingService.addScheduledOnceJob(System.Int64,Weborb.Messaging.Api.Scheduling.IScheduledJob)">
            Schedule a job for single execution in the future.  Please note
            that the jobs are not saved if Red5 is restarted in the meantime.
            
            @param timeDelta
            			time delta in milliseconds from the current date
            @param job
            			the job to trigger
            @return the name of the scheduled job
        </member>
        <member name="M:Weborb.Messaging.Api.Scheduling.ISchedulingService.addScheduledOnceJob(System.DateTime,Weborb.Messaging.Api.Scheduling.IScheduledJob)">
            Schedule a job for single execution at a given date.  Please note
            that the jobs are not saved if Red5 is restarted in the meantime.  
            
            @param date
            			date when the job should be executed
            @param job
            			the job to trigger
            @return the name of the scheduled job
        </member>
        <member name="M:Weborb.Messaging.Api.Scheduling.ISchedulingService.removeScheduledJob(System.String)">
            Stop executing a previously scheduled job.
            
            @param name
            			name of the job to stop
        </member>
        <member name="M:Weborb.Messaging.Api.Scheduling.ISchedulingService.getScheduledJobNames">
            Return names of scheduled jobs.
            
            @return list of job names
        </member>
        <member name="M:Weborb.Messaging.Api.IScope.hasChildScope(System.String)">
            Check to see if this scope has a child scope matching a given name
            @param name the name of the child scope
            @return true if a child scope exists, otherwise false
        </member>
        <member name="M:Weborb.Messaging.Api.IScope.getScopeNames">
            Get a set of the child scope names
            @return set containing child scope names
        </member>
        <member name="M:Weborb.Messaging.Api.IScope.getBasicScope(System.String,System.String)">
            Get a child scope by name
            @param name name of the child scope
            @return the child scope, or null if no scope is found
        </member>
        <member name="M:Weborb.Messaging.Api.IScope.getClients">
            Get a set of connected clients You can get the connections by passing the
            scope to the clients lookupConnection method
            @return set containing all connected clients
        </member>
        <member name="M:Weborb.Messaging.Api.IScope.getConnections">
            Get a connection iterator, you can call remove, and the connection will be closed.
            @return iterator holding all connections
        </member>
        <member name="M:Weborb.Messaging.Api.IScope.lookupConnections(Weborb.Messaging.Api.IClient)">
            Lookup connections
            @return set of connection objects (readonly)
            @param  client object
        </member>
        <member name="M:Weborb.Messaging.Server.Scope.getResources(System.String)">
            Return array of resources from path string, usually used with pattern path
            @param path           Resources path
            @return               Resources
            @throws IOException   I/O exception
        </member>
        <member name="M:Weborb.Messaging.Server.Scope.getResource(System.String)">
            Return resource located at given path
            @param path           Resource path
            @return               Resource
        </member>
        <member name="M:Weborb.Messaging.Server.Scope.getServiceHandlers">
            Return map of service handlers
            @return                Map of service handlers
        </member>
        <member name="M:Weborb.Messaging.Server.Scope.registerServiceHandler(System.String,System.Object)">
            Register service handler by name
            @param name       Service handler name
            @param handler    Service handler
        </member>
        <member name="M:Weborb.Messaging.Server.Scope.unregisterServiceHandler(System.String)">
            Unregisters service handler by name
            @param name        Service handler name
        </member>
        <member name="M:Weborb.Messaging.Server.Scope.getServiceHandler(System.String)">
            Return service handler by name
            @param name        Handler name
            @return            Service handler with given name
        </member>
        <member name="M:Weborb.Messaging.Server.Scope.getServiceHandlerNames">
            Return set of service handler names
            @return            Set of service handler names
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP4.MP4Descriptor.CreateESDescriptor(Weborb.Messaging.Server.IO.MP4.MP4DataStream)">
            <summary>
            Loads the MP4ES_Descriptor from the input bitstream.
            </summary>
            <param name="bitstream">The input bitstream.</param>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP4.MP4Descriptor.CreateDecoderConfigDescriptor(Weborb.Messaging.Server.IO.MP4.MP4DataStream)">
            <summary>
            Loads the MP4DecoderConfigDescriptor from the input bitstream.
            </summary>
            <param name="bitstream">The input bitstream.</param>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP4.MP4Descriptor.Lookup(System.Int32,System.Int32)">
            <summary>
            Looks up a child descriptor with the specified <code>type</code>, skips the <code>number</code> children with the same type before retrieving.
            </summary>
            <param name="type">The type of the descriptor.</param>
            <param name="number">The number of child descriptors to skip.</param>
            <returns>The descriptor if found, otherwise null.</returns>
        </member>
        <member name="P:Weborb.Messaging.Server.IO.MP4.MP4Descriptor.Type">
            <summary>
            Gets the type of the descriptor.
            </summary>
        </member>
        <member name="T:Weborb.Messaging.Server.IO.MP3.Impl.MP3">
            <summary>
            Handles mp3 files.
            </summary>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP3.Impl.MP3.#ctor(System.IO.FileInfo)">
            <summary>
            Initializes a new instance of the <see cref="!:Mp3File"/> class.
            </summary>
            <param name="file">The file.</param>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP3.Impl.MP3.getReader">
            <summary>
            Returns a reader to parse and read the tags inside the file.
            </summary>
            <returns>Tag reader.</returns>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP3.Impl.MP3.getWriter">
            <summary>
            Returns a writer that creates a new file or truncates existing contents.
            </summary>
            <returns>Tag writer.</returns>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP3.Impl.MP3.getAppendWriter">
            <summary>
            Returns a Writer which is setup to append to the file.
            </summary>
            <returns>Tag writer used for append mode.</returns>
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.RTMPHandler.globalScopeConnectionAllowed">
            Whether or not global scope connections are allowed.
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPHandler.invokeCall(Weborb.Messaging.Net.RTMP.RTMPConnection,Weborb.Messaging.Api.Service.IServiceCall)">
            Remoting call invocation handler
            @param conn             RTMP connection
            @param call             Service call
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPHandler.invokeCall(Weborb.Messaging.Net.RTMP.RTMPConnection,Weborb.Messaging.Api.Service.IServiceCall,System.Object)">
            Remoting call invocation handler
            @param conn             RTMP connection
            @param call             Service call
            @param service          Server-side service object
            @return <code>true</code> if the call was performed, otherwise <code>false</code>
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPHandler.sendSOCreationFailed(Weborb.Messaging.Net.RTMP.RTMPConnection,System.String,System.Boolean)">
            Create and send SO message stating that a SO could not be created.
            
            @param conn
            @param name
            @param persistent
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPClient.#ctor">
            Constructs a new RTMPClient. 
        </member>
        <member name="T:Weborb.Messaging.Net.RTMP.Message.SharedObjectTypeMapping">
            SO event types mapping
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Message.SharedObjectTypeMapping.typeMap">
            Types map
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Message.SharedObjectTypeMapping.toType(System.Byte)">
            Convert byte value of RTMP marker to event type
            @param rtmpType            RTMP marker value
            @return                    Corresponding Shared Object event type
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Message.SharedObjectTypeMapping.toByte(Weborb.Messaging.Server.SO.SharedObjectEventType)">
            Convert SO event type to byte representation that RTMP uses
            @param type                Event type
            @return                    Byte representation of given event type
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Message.SharedObjectTypeMapping.toString(Weborb.Messaging.Server.SO.SharedObjectEventType)">
            String representation of type
            @param type                Type
            @return                    String representation of type
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Channel.write(Weborb.Messaging.Net.RTMP.Event.IRTMPEvent)">
            Writes packet from evt data to RTMP connection
            @param evt          Event data
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Channel.write(Weborb.Messaging.Net.RTMP.Event.IRTMPEvent,System.Int32)">
            Writes packet from evt data to RTMP connection and stream id
            @param evt           Event data
            @param streamId        Stream id
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Channel.sendStatus(Weborb.Messaging.Net.RTMP.Status.Status)">
            Sends status notification
            @param status           Status
        </member>
        <member name="T:Weborb.Messaging.Api.Stream.IStreamFlow">
            Stream flow object contains information about buffering, bit rate of stream, segmentation, etc
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamFlow.getMaxTimeBuffer">
             Getter for property 'maxTimeBuffer'.
            
             @return Value for property 'maxTimeBuffer'.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamFlow.setMaxTimeBuffer(System.Int32)">
             Setter for property 'maxTimeBuffer'.
            
             @param maxTimeBuffer Value to set for property 'maxTimeBuffer'.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamFlow.getMinTimeBuffer">
             Getter for property 'minTimeBuffer'.
            
             @return Value for property 'minTimeBuffer'.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamFlow.setMinTimeBuffer(System.Int32)">
             Setter for property 'minTimeBuffer'.
            
             @param minTimeBuffer Value to set for property 'minTimeBuffer'.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamFlow.getClientTimeBuffer">
             Getter for property 'clientTimeBuffer'.
            
             @return Value for property 'clientTimeBuffer'.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamFlow.setClientTimeBuffer(System.Int64)">
             Setter for property 'clientTimeBuffer'.
            
             @param clientTimeBuffer Value to set for property 'clientTimeBuffer'.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamFlow.getDataBitRate">
             Getter for property 'dataBitRate'.
            
             @return Value for property 'dataBitRate'.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamFlow.getSegmentBytesTransfered">
             Getter for property 'segmentBytesTransfered'.
            
             @return Value for property 'segmentBytesTransfered'.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamFlow.getSegmentDataTime">
             Getter for property 'segmentDataTime'.
            
             @return Value for property 'segmentDataTime'.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamFlow.getSegmentStreamTime">
             Getter for property 'segmentStreamTime'.
            
             @return Value for property 'segmentStreamTime'.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamFlow.getStreamBitRate">
             Getter for property 'streamBitRate'.
            
             @return Value for property 'streamBitRate'.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamFlow.isBufferTimeIncreasing">
             Getter for property 'bufferTimeIncreasing'.
            
             @return Value for property 'bufferTimeIncreasing'.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamFlow.getTotalBytesTransfered">
             Getter for property 'totalBytesTransfered'.
            
             @return Value for property 'totalBytesTransfered'.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamFlow.getTotalDataTime">
             Getter for property 'totalDataTime'.
            
             @return Value for property 'totalDataTime'.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamFlow.getTotalStreamTime">
             Getter for property 'totalStreamTime'.
            
             @return Value for property 'totalStreamTime'.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamFlow.getBufferTime">
             Getter for property 'bufferTime'.
            
             @return Value for property 'bufferTime'.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamFlow.getZeroToStreamTime">
             Getter for property 'zeroToStreamTime'.
            
             @return Value for property 'zeroToStreamTime'.
        </member>
        <member name="T:Weborb.Messaging.Api.Stream.ISeekableProvider">
            Provider that is seekable
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.ISeekableProvider.seek(System.Int32)">
            Seek the provider to timestamp ts (in milliseconds).
            @param ts Timestamp to seek to
            @return Actual timestamp seeked to
        </member>
        <member name="T:Weborb.Messaging.Api.Stream.IFrameDropper">
            Interface for classes that implement logic to drop frames.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IFrameDropper.canSendPacket(Weborb.Messaging.Api.Stream.Message.RTMPMessage,System.Int64)">
            Checks if a message may be sent to the subscriber.
            
            @param message
            			the message to check
            @param pending
            			the number of pending messages
            @return <code>true</code> if the packet may be sent, otherwise
                    <code>false</code>
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IFrameDropper.dropPacket(Weborb.Messaging.Api.Stream.Message.RTMPMessage)">
            Notify that a packet has been dropped.
            
            @param message
            			the message that was dropped
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IFrameDropper.sendPacket(Weborb.Messaging.Api.Stream.Message.RTMPMessage)">
            Notify that a message has been sent.
            
            @param message
            			the message that was sent
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IFrameDropper.reset">
            Reset the frame dropper. 
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IFrameDropper.reset(System.Int32)">
            Reset the frame dropper to a given state.
            
            @param state
            			the state to reset the frame dropper to
        </member>
        <member name="T:Weborb.Messaging.Api.Stream.IConsumerService">
            Service for consumer objects, used to get pushed messages at consumer endpoint.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IConsumerService.getConsumerOutput(Weborb.Messaging.Api.Stream.IClientStream)">
             Handles pushed messages
            
             @param stream       Client stream object
             @return             Message object
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.IResolver.resolve(Weborb.Messaging.Api.IO.FLV.Meta.IMeta,Weborb.Messaging.Api.IO.FLV.Meta.IMeta)">
             Merges the two Meta objects
            
             @param m1
             @param m2
             @return IMeta Meta
        </member>
        <member name="T:Weborb.Client.PublishingResponder">
            <summary>
            Responsible for maintaining references to a method receiving return value from a remote invocation
            and a method responsible for error handling from a remote invocation.
            </summary>
            <typeparam name="T">Return type from a remote method invocation</typeparam>
        </member>
        <member name="M:Weborb.Client.PublishingResponder.#ctor(Weborb.Client.ResponseHandler{Weborb.V3Types.AckMessage},Weborb.Client.ErrorHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Weborb.Client.Responder`1"/> class with return value processing method
            and a fault handler method
            </summary>
            <param name="responseHandler">The response handler - invoked when the client received a response from a remote method invocation</param>
            <param name="errorHandler">The error handler - invoked if the remote method invocation throws an exception.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Weborb.Messaging.Server.Stream.VideoFrameDropper" -->
        <member name="F:Weborb.Messaging.Server.Stream.VideoFrameDropper.SEND_ALL">
            Send keyframes, interframes and disposable interframes. 
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.VideoFrameDropper.SEND_INTERFRAMES">
            Send keyframes and interframes. 
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.VideoFrameDropper.SEND_KEYFRAMES">
            Send keyframes only. 
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.VideoFrameDropper.SEND_KEYFRAMES_CHECK">
            Send keyframes only and switch to SEND_INTERFRAMES later. 
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.VideoFrameDropper.state">
            Current state. 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.VideoFrameDropper.#ctor">
            Constructs a new VideoFrameDropper. 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.VideoFrameDropper.reset">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.VideoFrameDropper.reset(System.Int32)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.VideoFrameDropper.canSendPacket(Weborb.Messaging.Api.Stream.Message.RTMPMessage,System.Int64)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.VideoFrameDropper.dropPacket(Weborb.Messaging.Api.Stream.Message.RTMPMessage)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.VideoFrameDropper.sendPacket(Weborb.Messaging.Api.Stream.Message.RTMPMessage)">
            {@inheritDoc} 
        </member>
        <member name="T:Weborb.Messaging.Server.Stream.StreamFlow">
            Stream flow
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.StreamFlow.DATA">
            Data segment constant
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.StreamFlow.AUDIO">
            Audio segment constant
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.StreamFlow.VIDEO">
            Video segment constant
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.StreamFlow.streaming">
            Streaming flag
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.StreamFlow.streamStartTime">
            Stream start time
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.StreamFlow.totalBytesTransfered">
            Total number of bytes transferred
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.StreamFlow.totalDataTimes">
            Data times
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.StreamFlow.combinedTotalDataTime">
            Combined totalBytesTransfered data time
            Not used?
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.StreamFlow.segmentStartTime">
            Segment start time
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.StreamFlow.segmentBytesTransfered">
            Segment bytes transfered
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.StreamFlow.segmentDataTimes">
            Segment data times
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.StreamFlow.combinedSegmentDataTime">
            Combined segment data time
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.StreamFlow.minTimeBuffer">
            Minimal time buffer
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.StreamFlow.maxTimeBuffer">
            Max time buffer
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.StreamFlow.clientTimeBuffer">
            Client time buffer
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.StreamFlow.zeroToStreamTime">
            TODO : Ask Steven what the hell is this
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.StreamFlow.bufferTime">
            Buffer time
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.StreamFlow.lastBufferTimes">
            Array of last buffer times
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.StreamFlow.lastBufferTime">
            Last buffer time
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.StreamFlow.lastBufferTimeIndex">
            Last buffer time index
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.StreamFlow.streamTracker">
            Stream tracker
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamFlow.#ctor">
            Constructs a new StreamFlow. 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamFlow.getMaxTimeBuffer">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamFlow.setMaxTimeBuffer(System.Int32)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamFlow.getMinTimeBuffer">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamFlow.setMinTimeBuffer(System.Int32)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamFlow.getClientTimeBuffer">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamFlow.setClientTimeBuffer(System.Int64)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamFlow.getDataBitRate">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamFlow.getSegmentBytesTransfered">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamFlow.getSegmentDataTime">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamFlow.getSegmentStreamTime">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamFlow.getStreamBitRate">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamFlow.isBufferTimeIncreasing">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamFlow.getTotalBytesTransfered">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamFlow.getTotalDataTime">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamFlow.getTotalStreamTime">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamFlow.getZeroToStreamTime">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamFlow.getBufferTime">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamFlow.pause">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamFlow.resume">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamFlow.clear">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamFlow.reset">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamFlow.update(Weborb.Messaging.Api.Stream.Message.RTMPMessage)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.StreamFlow.ToString">
            {@inheritDoc} 
        </member>
        <member name="F:Weborb.Messaging.Server.IO.FLV.Impl.FLVService.serializer">
            Serializer
        </member>
        <member name="F:Weborb.Messaging.Server.IO.FLV.Impl.FLVService.deserializer">
            Deserializer
        </member>
        <member name="F:Weborb.Messaging.Server.IO.FLV.Impl.FLVService.generateMetadata">
            Generate FLV metadata?
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.FLVService.getPrefix">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.FLVService.getExtension">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.FLVService.setSerializer(Weborb.Messaging.Api.IO.ISerializer)">
            {@inheritDoc}
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.FLVService.setDeserializer(Weborb.Messaging.Api.IO.IDeserializer)">
            {@inheritDoc}
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.FLVService.getStreamableFile(System.IO.FileInfo)">
            {@inheritDoc}
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.FLVService.setGenerateMetadata(System.Boolean)">
             Generate metadata or not
            
             @param generate  <code>true</code> if there's need to generate metadata, <code>false</code> otherwise
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.FLVService.getSerializer">
             Getter for serializer
            
             @return  Serializer
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.FLVService.getDeserializer">
             Getter for deserializer
            
             @return  Deserializer
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLVHeader.getDataOffset">
             Returns the data offset bytes
            
             @return int
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLVHeader.setDataOffset(System.Int32)">
             Sets the data offset bytes
            
             @param data_offset
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLVHeader.getSignature">
             Returns the signature bytes
            
             @return byte[]
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLVHeader.ToString">
             Overrides the toString method so that a FLVHeader can
             be represented by its datatypes
            
             @return String
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLVHeader.setSignature(System.Byte[])">
             Sets the signature bytes
            
             @param signature
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLVHeader.getFlagAudio">
             Returns a boolean on whether this data contains audio
            
             @return boolean
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLVHeader.setFlagAudio(System.Boolean)">
             Sets the audioflag on whether this data contains audio
            
             @param flagAudio
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLVHeader.setTypeFlags(System.Byte)">
             Sets the type flags on whether this data is audio or video
            
             @param typeFlags
             @return void
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLVHeader.getFlagReserved01">
             Gets the FlagReserved01 which is a datatype specified in the Flash Specification
            
             @return byte
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLVHeader.setFlagReserved01(System.Byte)">
             Sets the FlagReserved01 which is a datatype specified in the Flash Specification
            
             @param flagReserved01
             @return void
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLVHeader.getFlagReserved02">
             Gets the FlagReserved02 which is a datatype specified in the Flash Specification
            
             @return byte
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLVHeader.setFlagReserved02(System.Byte)">
             Sets the Flag Reserved02 which is a datatype specified in the Flash Specification
            
             @param flagReserved02
             @return void
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLVHeader.getFlagVideo">
             Returns a boolean on whether this data contains video
            
             @return boolean
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLVHeader.setFlagVideo(System.Boolean)">
             Sets the audioflag on whether this data contains audio
            
             @param type_flags_video
             @return void
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLVHeader.getVersion">
             Gets the version byte
            
             @return byte
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLVHeader.setVersion(System.Byte)">
             Sets the version byte
            
             @param version
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Message.Header.channelId">
            Channel
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Message.Header.size">
            Header size
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Message.Header.dataType">
            Type of data
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Message.Header.streamId">
            Stream id
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Message.Header.timerDelta">
            Whether timer value is relative
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Message.Header.timerBase">
            Timer
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Message.Header.getChannelId">
             Getter for channel id
            
             @return  Channel id
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Message.Header.setChannelId(System.Int32)">
             Setter for channel id
            
             @param channelId  Header channel id
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Message.Header.getDataType">
             Getter for data type
            
             @return  Data type
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Message.Header.setDataType(System.Byte)">
             Setter for data type
            
             @param dataType  Data type
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Message.Header.getSize">
             Getter for size.
            
             @return  Header size
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Message.Header.setSize(System.Int32)">
             Setter for size
            
             @param size  Header size
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Message.Header.getStreamId">
             Getter for stream id
            
             @return  Stream id
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Message.Header.setStreamId(System.Int32)">
             Setter for stream id
            
             @param streamId  Stream id
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Message.Header.getTimer">
             Getter for timer
            
             @return  Timer
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Message.Header.setTimer(System.Int32)">
             Setter for timer
            
             @param timer  Timer
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Message.Header.Equals(System.Object)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Message.Header.ToString">
            {@inheritDoc} 
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Event.ClientBW.bandwidth">
            Bandwidth
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Event.ClientBW.value2">
            /XXX : what is this?
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.ClientBW.getBandwidth">
             Getter for property 'bandwidth'.
            
             @return Value for property 'bandwidth'.
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.ClientBW.setBandwidth(System.Int32)">
             Setter for bandwidth
            
             @param bandwidth  New bandwidth
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.ClientBW.getValue2">
             Getter for value2
            
             @return Value for property 'value2'.
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.ClientBW.setValue2(System.Byte)">
             Setter for property 'value2'.
            
             @param value2 Value to set for property 'value2'.
        </member>
        <member name="F:Weborb.Messaging.Net.RTMPT.RTMPTClientConnector.SEND_TARGET_SIZE">
            Size to split messages queue by, borrowed from
            RTMPTServlet.RESPONSE_TARGET_SIZE
        </member>
        <member name="T:Weborb.Messaging.Api.Stream.ITokenBucketCallback">
            Callback for tocket bucket
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.ITokenBucketCallback.available(Weborb.Messaging.Api.Stream.ITokenBucket,System.Double)">
            Check if there's given number of tokens available for bucket
            @param bucket          Bucket
            @param tokenCount      Number of tokens
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.ITokenBucketCallback.reset(Weborb.Messaging.Api.Stream.ITokenBucket,System.Double)">
            Resets tokens in bucket
            @param bucket          Bucket
            @param tokenCount      Number of tokens
        </member>
        <member name="T:Weborb.Messaging.Api.Messaging.IPassive">
            Signature to mark a provider/consumer never actively providers/consumers
            messages.
        </member>
        <member name="F:Weborb.Messaging.Api.ConnectionType.PERSISTENT">
            Persistent connection type, eg RTMP
        </member>
        <member name="F:Weborb.Messaging.Api.ConnectionType.POLLING">
            Polling connection type, eg RTMPT
        </member>
        <member name="F:Weborb.Messaging.Api.ConnectionType.TRANSIENT">
            Transient connection type, eg Remoting, HTTP, etc
        </member>
        <member name="T:Weborb.Client.Fault">
            <summary>
            Encapsulates information about a remote error/exception.
            </summary>
        </member>
        <member name="P:Weborb.Client.Fault.Message">
            <summary>
            Returns a description of the received error/exception
            </summary>
            <value>Exception description or error message from the user application exception</value>
        </member>
        <member name="P:Weborb.Client.Fault.Detail">
            <summary>
            Contains detailed information about received exception. Typically a stack trace.
            </summary>
            <value>Exception stack trace and additional diagnostics information.</value>
        </member>
        <member name="T:Weborb.Messaging.Server.Stream.Consumer.FileConsumer">
            Consumer that pushes messages to file. Used when recording live streams.
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.Consumer.FileConsumer.scope">
            Scope
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.Consumer.FileConsumer.file">
            File
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.Consumer.FileConsumer.writer">
            Tag writer
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.Consumer.FileConsumer.mode">
            Operation mode
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.Consumer.FileConsumer.offset">
            Offset
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.Consumer.FileConsumer.lastTimestamp">
            Last write timestamp
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.Consumer.FileConsumer.startTimestamp">
            Start timestamp
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.Consumer.FileConsumer.videoConfigurationTag">
            Video decoder configuration
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.Consumer.FileConsumer.queueThreshold">
            Number of queued items needed before writes are initiated
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.Consumer.FileConsumer.#ctor(Weborb.Messaging.Api.IScope,System.IO.FileInfo)">
            Creates file consumer
            @param scope        Scope of consumer
            @param file         File
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.Consumer.FileConsumer.pushMessage(Weborb.Messaging.Api.Messaging.IPipe,Weborb.Messaging.Api.Messaging.IMessage)">
            Push message through pipe
            Synchronize this method to avoid FLV corruption from abrupt disconnection
            @param pipe         Pipe
            @param message      Message to push
            @throws IOException if message could not be written
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.Consumer.FileConsumer.onOOBControlMessage(Weborb.Messaging.Api.Messaging.IMessageComponent,Weborb.Messaging.Api.Messaging.IPipe,Weborb.Messaging.Server.Messaging.OOBControlMessage)">
             Out-of-band control message handler
            
             @param source            Source of message
             @param pipe              Pipe that is used to transmit OOB message
             @param oobCtrlMsg        OOB control message
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.Consumer.FileConsumer.onPipeConnectionEvent(Weborb.Messaging.Server.Messaging.PipeConnectionEvent)">
            Pipe connection event handler
            @param event       Pipe connection event
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.Consumer.FileConsumer.init">
             Initialization
            
             @throws IOException          I/O exception
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.Consumer.FileConsumer.uninit">
            Reset
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.Consumer.FileConsumer.doWrites(System.Object)">
            Write all the queued items to the writer.
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.Consumer.FileConsumer.write(Weborb.Messaging.Server.Stream.Consumer.QueuedData)">
            Adjust timestamp and write to the file.
            
            @param queued queued data for write
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.Consumer.FileConsumer.setVideoDecoderConfiguration(Weborb.Messaging.Net.RTMP.Event.IRTMPEvent)">
            Sets a video decoder configuration; some codecs require this, such as AVC.
            
            @param decoderConfig video codec configuration
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.Consumer.FileConsumer.setQueueThreshold(System.Int32)">
            Sets the threshold for the queue. When the threshold is met a worker is spawned
            to empty the sorted queue to the writer.
            
            @param queueThreshold number of items to queue before spawning worker
        </member>
        <member name="M:Weborb.Messaging.Server.IO.StreamableFileFactory.getServices">
            {@inheritDoc} 
        </member>
        <member name="T:Weborb.Messaging.Server.IO.MP4.MP4DataStream">
            <summary>
            Wrapper class for input streams containing MPEG4 data.
            Original idea based on code from MediaFrame (http://www.mediaframe.org)
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP4.MP4DataStream._stream">
            <summary>
            The input stream
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP4.MP4DataStream._offset">
            <summary>
            The current offset (position) in the stream.
            </summary>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.ITagWriter.getFile">
             Return the file that is written.
            
             @return
        </member>
        <member name="M:Weborb.Messaging.Server.IO.ITagWriter.getOffset">
             Return the offset
            
             @return int offset
        </member>
        <member name="M:Weborb.Messaging.Server.IO.ITagWriter.getBytesWritten">
             Return the bytes written
            
             @return long bytesWritten
        </member>
        <member name="M:Weborb.Messaging.Server.IO.ITagWriter.writeHeader">
             Writes the header bytes
            
             @throws IOException
        </member>
        <member name="M:Weborb.Messaging.Server.IO.ITagWriter.writeTag(Weborb.Messaging.Server.IO.ITag)">
             Writes a Tag object
            
             @param tag
             @return boolean
             @throws IOException
        </member>
        <member name="M:Weborb.Messaging.Server.IO.ITagWriter.writeTag(System.Byte,Weborb.Messaging.Util.ByteBuffer)">
             Write a Tag using bytes
            
             @param type
             @param data
             @return boolean
             @throws IOException
        </member>
        <member name="M:Weborb.Messaging.Server.IO.ITagWriter.writeStream(System.Byte[])">
             Write a Stream to disk using bytes
            
             @param b
             @return boolean
             @throws IOException
        </member>
        <member name="M:Weborb.Messaging.Server.IO.ITagWriter.close">
             Closes a Writer
            
             @return void
        </member>
        <member name="M:Weborb.Messaging.Server.IO.IFLV.hasMetaData">
             Returns a boolean stating whether the flv has metadata
            
             @return boolean
        </member>
        <member name="M:Weborb.Messaging.Server.IO.IFLV.setMetaData(Weborb.Messaging.Api.IO.FLV.Meta.IMetaData)">
             Sets the metadata
            
             @param Map metadata
             @return void
             @throws FileNotFoundException
             @throws IOException
        </member>
        <member name="M:Weborb.Messaging.Server.IO.IFLV.setMetaService(Weborb.Messaging.Api.IO.FLV.Meta.IMetaService)">
             Sets the MetaService through Spring
            
             @param IMetaService service
        </member>
        <member name="M:Weborb.Messaging.Server.IO.IFLV.getMetaData">
             Returns a map of the metadata
            
             @return Map metadata
             @throws FileNotFoundException
        </member>
        <member name="M:Weborb.Messaging.Server.IO.IFLV.hasKeyFrameData">
             Returns a boolean stating whether a flv has keyframedata
            
             @return boolean
        </member>
        <member name="M:Weborb.Messaging.Server.IO.IFLV.setKeyFrameData(System.Collections.IDictionary)">
             Sets the keyframe data of a flv file
            
             @param Map keyframedata
             @return void
        </member>
        <member name="M:Weborb.Messaging.Server.IO.IFLV.getKeyFrameData">
             Gets the keyframe data
            
             @return Map keyframedata
        </member>
        <member name="M:Weborb.Messaging.Server.IO.IFLV.refreshHeaders">
             Refreshes the headers.  Usually used after data is
             added to the flv file
            
             @return void
             @throws IOException
        </member>
        <member name="M:Weborb.Messaging.Server.IO.IFLV.flushHeaders">
             Flushes Header
            
             @return void
             @throws IOException
        </member>
        <member name="M:Weborb.Messaging.Server.IO.IFLV.readerFromNearestKeyFrame(System.Int32)">
             Returns a Reader closest to the nearest keyframe
            
             @param int seekPoint
             @return Reader reader
        </member>
        <member name="M:Weborb.Messaging.Server.IO.IFLV.writerFromNearestKeyFrame(System.Int32)">
             Returns a Writer based on the nearest key frame
            
             @param int seekPoint
             @return Writer writer
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.DeferredResult.channel">
            Weak reference to used channel
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.DeferredResult.call">
            Pending call object
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.DeferredResult.invokeId">
            Invocation id
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.DeferredResult.resultSent">
            Results sent flag
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.DeferredResult.setResult(System.Object)">
            Set the result of a method call and send to the caller.
            
            @param result
            			deferred result of the method call
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.DeferredResult.wasSent">
            Check if the result has been sent to the client.
            
            @return <code>true</code> if the result has been sent, otherwise <code>false</code> 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.DeferredResult.setInvokeId(System.Int32)">
             Setter for invoke Id.
            
             @param id  Invocation object identifier
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.DeferredResult.setServiceCall(Weborb.Messaging.Api.Service.IPendingServiceCall)">
             Setter for service call.
            
             @param call  Service call
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.DeferredResult.setChannel(Weborb.Messaging.Net.RTMP.Channel)">
             Setter for channel.
            
             @param channel  Channel
        </member>
        <member name="F:Weborb.Messaging.Net.RTMPT.RTMPTHandler.HANDLER_ATTRIBUTE">
            Handler constant
        </member>
        <member name="M:Weborb.Messaging.Net.RTMPT.RTMPTHandler.rawBufferRecieved(Weborb.Messaging.Net.RTMPT.RTMPTConnection,Weborb.Messaging.Net.RTMP.ProtocolState,Weborb.Messaging.Util.ByteBuffer)">
            Handle raw buffer reciept
            @param conn        RTMP connection
            @param state       Protocol state
            @param in          Byte buffer with input raw data
        </member>
        <member name="M:Weborb.Messaging.Net.RTMPT.RTMPTHandler.messageReceived(Weborb.Messaging.Net.RTMP.RTMPConnection,Weborb.Messaging.Net.RTMP.ProtocolState,System.Object)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMPT.RTMPTHandler.createRTMPTConnection">
            Creates RTMP connection
            @return       RTMP connection
        </member>
        <member name="M:Weborb.Messaging.Net.RTMPT.RTMPTHandler.createRTMPTConnection(System.Boolean)">
            Creates RTMP connection
            @return       RTMP connection
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.Codec.AVCVideo.CODEC_NAME">
            AVC video codec constant
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.Codec.AVCVideo.blockDataAVCDCR">
            Block of data (AVC DecoderConfigurationRecord)
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.Codec.AVCVideo.blockSizeAVCDCR">
            Data block size (AVC DecoderConfigurationRecord)
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.Codec.AVCVideo.blockDataLKF">
            Block of data (Last KeyFrame)
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.Codec.AVCVideo.blockSizeLKF">
            Data block size (Last KeyFrame)
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.Codec.AVCVideo.dataCountLKF">
            Number of data blocks (last key frame)
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.Codec.AVCVideo.dataCountAVCDCR">
            Number of data blocks (Decoder Configuration Record)
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.Codec.AVCVideo.#ctor">
            Constructs a new AVCVideo. 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.Codec.AVCVideo.getName">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.Codec.AVCVideo.canDropFrames">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.Codec.AVCVideo.reset">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.Codec.AVCVideo.canHandleData(Weborb.Messaging.Util.ByteBuffer)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.Codec.AVCVideo.addData(Weborb.Messaging.Util.ByteBuffer)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.Codec.AVCVideo.getKeyframe">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.Codec.AVCVideo.getDecoderConfiguration">
            {@inheritDoc} 
        </member>
        <member name="T:Weborb.Messaging.Server.SO.SharedObjectService">
            Shared object service
        </member>
        <member name="F:Weborb.Messaging.Server.SO.SharedObjectService.SO_PERSISTENCE_STORE">
            Persistence store prefix
        </member>
        <member name="F:Weborb.Messaging.Server.SO.SharedObjectService.SO_TRANSIENT_STORE">
            Transient store prefix
        </member>
        <member name="F:Weborb.Messaging.Server.SO.SharedObjectService.persistenceClassName">
            Persistence class name
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectService.setPersistenceClassName(System.String)">
             Setter for persistence class name.
            
             @param name  Setter for persistence class name
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectService.getStore(Weborb.Messaging.Api.IScope,System.Boolean)">
            Return scope store
            @param scope                Scope
            @param persistent           Persistent store or not?
            @return                     Scope's store
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectService.createSharedObject(Weborb.Messaging.Api.IScope,System.String,System.Boolean)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectService.getSharedObject(Weborb.Messaging.Api.IScope,System.String)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectService.getSharedObject(Weborb.Messaging.Api.IScope,System.String,System.Boolean)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectService.getSharedObjectNames(Weborb.Messaging.Api.IScope)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectService.hasSharedObject(Weborb.Messaging.Api.IScope,System.String)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectService.clearSharedObjects(Weborb.Messaging.Api.IScope,System.String)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.SO.ISharedObjectEvent.getType">
             Returns the type of the event.
            
             @return the type of the event.
        </member>
        <member name="M:Weborb.Messaging.Server.SO.ISharedObjectEvent.getKey">
             Returns the key of the event.
             <p/>
             Depending on the type this contains:
             <ul>
             <li>the attribute name to set for SET_ATTRIBUTE</li>
             <li>the attribute name to delete for DELETE_ATTRIBUTE</li>
             <li>the handler name to call for SEND_MESSAGE</li>
             </ul>
             In all other cases the key is <code>null</code>.
            
             @return the key of the event
        </member>
        <member name="M:Weborb.Messaging.Server.SO.ISharedObjectEvent.getValue">
             Returns the value of the event.
             <p/>
             Depending on the type this contains:
             <ul>
             <li>the attribute value to set for SET_ATTRIBUTE</li>
             <li>a list of parameters to pass to the handler for SEND_MESSAGE</li>
             </ul>
             In all other cases the value is <code>null</code>.
            
             @return the value of the event
        </member>
        <member name="T:Weborb.Messaging.Server.IO.MP4.Impl.MP4Reader">
            <summary>
            This reader is used to read the contents of an MP4 file.
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP4.Impl.MP4Reader.PREFIX_AUDIO_FRAME">
            <summary>
            Audio packet prefix
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP4.Impl.MP4Reader.AUDIO_CONFIG_FRAME_AAC_MAIN">
            <summary>
            Audio config aac main
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP4.Impl.MP4Reader.AUDIO_CONFIG_FRAME_AAC_LC">
            <summary>
            Audio config aac lc
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP4.Impl.MP4Reader.AUDIO_CONFIG_FRAME_SBR">
            <summary>
            Audio config sbr
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP4.Impl.MP4Reader.PREFIX_VIDEO_CONFIG_FRAME">
            <summary>
            Video packet prefix for the decoder frame
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP4.Impl.MP4Reader.PREFIX_VIDEO_KEYFRAME">
            <summary>
            Video packet prefix for key frames
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP4.Impl.MP4Reader.PREFIX_VIDEO_FRAME">
            <summary>
            Video packet prefix for standard frames (interframe)
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP4.Impl.MP4Reader.firstTags">
            <summary>
            Container for metadata and any other tags that should be sent prior to media data.
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP4.Impl.MP4Reader.seekPoints">
            <summary>
            Container for seek points in the video. These are the time stamps for the key frames.
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP4.Impl.MP4Reader.timePosMap">
            <summary>
            Mapping between file position and timestamp in ms.
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP4.Impl.MP4Reader.hasVideo">
            <summary>
            Whether or not the clip contains a video track.
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP4.Impl.MP4Reader.hasAudio">
            <summary>
            Whether or not the clip contains an audio track.
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP4.Impl.MP4Reader.videoCodecId">
            <summary>
            Default video codec.
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP4.Impl.MP4Reader.audioCodecId">
            <summary>
            Default audio codec.
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP4.Impl.MP4Reader.audioDecoderBytes">
            <summary>
            Decoder bytes / configs.
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP4.Impl.MP4Reader.duration">
            <summary>
            Duration in milliseconds.
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP4.Impl.MP4Reader.timeScale">
            <summary>
            Movie time scale.
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP4.Impl.MP4Reader.audioTimeScale">
            <summary>
            Audio sample rate kHz.
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP4.Impl.MP4Reader.audioCodecType">
            <summary>
            Default to aac lc
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP4.Impl.MP4Reader.videoSamplesToChunks">
            <summary>
            Samples to chunk mappings.
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP4.Impl.MP4Reader.syncSamples">
            <summary>
            Keyframe - sample numbers.
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP4.Impl.MP4Reader.videoSamples">
            <summary>
            Samples.
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP4.Impl.MP4Reader.videoChunkOffsets">
            <summary>
            Chunk offsets.
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP4.Impl.MP4Reader.videoSampleDuration">
            <summary>
            Sample duration.
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP4.Impl.MP4Reader.currentFrame">
            <summary>
            Keeps track of current frame / sample.
            </summary>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP4.Impl.MP4Reader.#ctor(System.IO.FileInfo)">
            <summary>
            Creates MP4 reader from file input stream, sets up metadata generation flag.
            </summary>
            <param name="file"></param>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP4.Impl.MP4Reader.decodeHeader">
            <summary>
            This handles the moov atom being at the beginning or end of the file, so the mdat may also be before or after the moov atom.
            </summary>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP4.Impl.MP4Reader.getFramePosition(System.Int32)">
            Returns the position of a frame given the timestamp.
            
            @param timestamp
            @return the position
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP4.Impl.MP4Reader.readTag">
            <summary>
            Packages media data for return to providers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP4.Impl.MP4Reader.AnalyzeFrames">
            <summary>
            Performs frame analysis and generates metadata for use in seeking. All the frames are analyzed and sorted together based on time and offset.
            </summary>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP4.Impl.MP4Reader.CreateFileMeta">
            <summary>
            Create tag for metadata event.
            
            Info from http://www.kaourantin.net/2007/08/what-just-happened-to-video-on-web_20.html
            <para>
            duration - Obvious. But unlike for FLV files this field will always be present.
            videocodecid - For H.264 we report 'avc1'.
            audiocodecid - For AAC we report 'mp4a', for MP3 we report '.mp3'.
            avcprofile - 66, 77, 88, 100, 110, 122 or 144 which corresponds to the H.264 profiles.
            avclevel - A number between 10 and 51. Consult this list to find out more.
            aottype - Either 0, 1 or 2. This corresponds to AAC Main, AAC LC and SBR audio types.
            moovposition - The offset in bytes of the moov atom in a file.
            trackinfo - An array of objects containing various infomation about all the tracks in a file
              ex.
                trackinfo[0].length: 7081
                trackinfo[0].timescale: 600
                trackinfo[0].sampledescription.sampletype: avc1
                trackinfo[0].language: und
                trackinfo[1].length: 525312
                trackinfo[1].timescale: 44100
                trackinfo[1].sampledescription.sampletype: mp4a
                trackinfo[1].language: und
            
            chapters - As mentioned above information about chapters in audiobooks.
            seekpoints - As mentioned above times you can directly feed into NetStream.seek();
            videoframerate - The frame rate of the video if a monotone frame rate is used. Most videos will have a monotone frame rate.
            audiosamplerate - The original sampling rate of the audio track.
            audiochannels - The original number of channels of the audio track.
            tags - As mentioned above ID3 like tag information.
            </para>
            
            <para>
            width: Display width in pixels.
            height: Display height in pixels.
            duration: Duration in seconds.
            avcprofile: AVC profile number such as 55, 77, 100 etc.
            avclevel: AVC IDC level number such as 10, 11, 20, 21 etc.
            aacaot: AAC audio object type; 0, 1 or 2 are supported.
            videoframerate: Frame rate of the video in this MP4.
            seekpoints: Array that lists the available keyframes in a file as time stamps in milliseconds. 
                This is optional as the MP4 file might not contain this information. Generally speaking, 
                most MP4 files will include this by default.
            videocodecid: Usually a string such as "avc1" or "VP6F."
            audiocodecid: Usually a string such as ".mp3" or "mp4a."
            progressivedownloadinfo: Object that provides information from the "pdin" atom. This is optional 
                and many files will not have this field.
            trackinfo: Object that provides information on all the tracks in the MP4 file, including their sample description ID.
            tags: Array of key value pairs representing the information present in the "ilst" atom, which is 
                the equivalent of ID3 tags for MP4 files. These tags are mostly used by iTunes. 
            </para>
            </summary>
            <returns>Metadata event tag.</returns>
        </member>
        <member name="P:Weborb.Messaging.Server.IO.MP4.Impl.MP4Reader.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access. 
            </summary>
        </member>
        <member name="M:Weborb.Messaging.RTMPORBConnection.getWrittenBytes">
            {@inheritDoc} 
        </member>
        <member name="T:Weborb.Messaging.Api.Stream.IStreamSecurityService">
            <summary>
            Service that supports protecting access to streams.
            </summary>
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamSecurityService.registerStreamPublishSecurity(Weborb.Messaging.Api.Stream.IStreamPublishSecurity)">
            <summary>
            Add handler that protects stream publishing.
            </summary>
            <param name="handler">handler to add</param>
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamSecurityService.unregisterStreamPublishSecurity(Weborb.Messaging.Api.Stream.IStreamPublishSecurity)">
            <summary>
            Remove handler that protects stream publishing.
            </summary>
            <param name="handler">handler to remove</param>
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamSecurityService.getStreamPublishSecurity">
            <summary>
            Get handlers that protect stream publishing.
            </summary>
            <returns>list of handlers</returns>
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamSecurityService.registerStreamPlaybackSecurity(Weborb.Messaging.Api.Stream.IStreamPlaybackSecurity)">
            <summary>
            Add handler that protects stream playback.
            </summary>
            <param name="handler">handler to add</param>
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamSecurityService.unregisterStreamPlaybackSecurity(Weborb.Messaging.Api.Stream.IStreamPlaybackSecurity)">
            <summary>
            Remove handler that protects stream playback.
            </summary>
            <param name="handler">handler to remove</param>
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamSecurityService.getStreamPlaybackSecurity">
            <summary>
            Get handlers that protect stream playback.
            </summary>
            <returns>list of handlers</returns>
        </member>
        <member name="T:Weborb.Messaging.Api.IBandwidthConfigure">
            Interface for setting/getting bandwidth configure.
            If overallBandwidth is <tt>-1</tt>, A/V bandwidth settings are valid.
            Or overallBandwidth will be used, thus Audio and Video share the
            bandwidth setting. All bandwidth is specified in bits per second.
        </member>
        <member name="M:Weborb.Messaging.Api.IBandwidthConfigure.setAudioBandwidth(System.Int64)">
            Set bandwidth available for audio streaming
            
            @param bw
                       Bandwidth
        </member>
        <member name="M:Weborb.Messaging.Api.IBandwidthConfigure.getAudioBandwidth">
             Return bandwidth available for audio streaming
            
             @return  Audio bandwidth
        </member>
        <member name="M:Weborb.Messaging.Api.IBandwidthConfigure.setVideoBandwidth(System.Int64)">
            Set bandwidth available for video streaming
            
            @param bw
                       Bandwidth
        </member>
        <member name="M:Weborb.Messaging.Api.IBandwidthConfigure.getVideoBandwidth">
             Return bandwidth available for video streaming
            
             @return  Video bandwidth
        </member>
        <member name="M:Weborb.Messaging.Api.IBandwidthConfigure.setOverallBandwidth(System.Int64)">
            Set overall bandwidth available
            
            @param bw
                       Bandwidth
        </member>
        <member name="M:Weborb.Messaging.Api.IBandwidthConfigure.getOverallBandwidth">
             Getter for overall bandwidth
            
             @return  Overall bandwidth
        </member>
        <member name="M:Weborb.Messaging.Api.IBandwidthConfigure.setUpstreamBandwidth(System.Int64)">
            Set the upstream bandwidth to be notified to the client.
            Upstream is the data that is sent from the client to the server.
            
            @param bw
                       Bandwidth
        </member>
        <member name="M:Weborb.Messaging.Api.IBandwidthConfigure.getUpstreamBandwidth">
            Get the upstream bandwidth to be notified to the client.
            Upstream is the data that is sent from the client to the server.
            
            @return      Upstream (from client to server) bandwidth configuration
        </member>
        <member name="M:Weborb.Messaging.Api.IBandwidthConfigure.setDownstreamBandwidth(System.Int64)">
            Set the downstream bandwidth to be notified to the client.
            Downstream is the data that is sent from the server to the client.
            
            @param bw
                       Bandwidth
        </member>
        <member name="M:Weborb.Messaging.Api.IBandwidthConfigure.getDownstreamBandwidth">
             Getter for downstream bandwidth
            
             @return Downstream bandwidth, from server to client
        </member>
        <member name="M:Weborb.Messaging.Api.IBandwidthConfigure.setMaxBurst(System.Int64)">
            Set the maximum amount of burst in Byte.
            This values controls the maximum amount of packets that
            can burst to the client at any time.
            @param maxBurst The maximum burst amount. If <tt>0</tt> or less
            is specified, the system default value will be used.
        </member>
        <member name="M:Weborb.Messaging.Api.IBandwidthConfigure.getMaxBurst">
             Getter for max burst value
            
             @return Max burst value
        </member>
        <member name="M:Weborb.Messaging.Api.IBandwidthConfigure.setBurst(System.Int64)">
            Set the burst amount in Byte. The burst amount controls
            the initial amount of packets that burst to the client.
            It should be no bigger than the maximum burst amount. If it is,
            the maximum burst value will be used instead.
            @param burst The burst amount. A value that is not bigger than
            <tt>0</tt> means don't use burst.
        </member>
        <member name="M:Weborb.Messaging.Api.IBandwidthConfigure.getBurst">
             Getter for burst.
            
             @return  Burst value
        </member>
        <member name="M:Weborb.Messaging.Util.ReaderWriterLock.AcquireWriterLock">
            <summary>
            Aquires the writer lock.
            </summary>
        </member>
        <member name="M:Weborb.Messaging.Util.ReaderWriterLock.AcquireReaderLock">
            <summary>
            Aquires a reader lock.
            </summary>
        </member>
        <member name="M:Weborb.Messaging.Util.ReaderWriterLock.ReleaseWriterLock">
            <summary>
            Releases the writer lock.
            </summary>
        </member>
        <member name="M:Weborb.Messaging.Util.ReaderWriterLock.ReleaseReaderLock">
            <summary>
            Releases a reader lock.
            </summary>
        </member>
        <member name="P:Weborb.Messaging.Util.ReaderWriterLock.IsReaderLockHeld">
            <summary>
            Gets a value indicating if a reader lock is held.
            </summary>
        </member>
        <member name="P:Weborb.Messaging.Util.ReaderWriterLock.IsWriterLockHeld">
            <summary>
            Gets a value indicating if the writer lock is held.
            </summary>
        </member>
        <member name="T:Weborb.Messaging.Util.ReaderWriterLock.ConditionVariable">
            <summary>
            Condition Variable (CV) class.
            </summary>
        </member>
        <member name="T:Weborb.Messaging.Server.Stream.OutputStream">
             Output stream that consists of audio, video and data channels
            
             @see org.red5.server.net.rtmp.Channel
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.OutputStream.video">
            Video channel
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.OutputStream.audio">
            Audio channel
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.OutputStream.data">
            Data channel
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.OutputStream.#ctor(Weborb.Messaging.Net.RTMP.Channel,Weborb.Messaging.Net.RTMP.Channel,Weborb.Messaging.Net.RTMP.Channel)">
             Creates output stream from channels
            
             @param video        Video channel
             @param audio        Audio channel
             @param data         Data channel
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.OutputStream.close">
            Closes audion, video and data channels
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.OutputStream.getAudio">
             Getter for audio channel
            
             @return  Audio channel
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.OutputStream.getData">
             Getter for data channel
            
             @return   Data channel
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.OutputStream.getVideo">
             Getter for video channel
            
             @return Video channel
        </member>
        <member name="T:Weborb.Messaging.Server.Messaging.InMemoryPushPushPipe">
            A simple in-memory version of push-push pipe.
            It is triggered by an active provider to push messages
            through it to an event-driven consumer.
        </member>
        <member name="M:Weborb.Messaging.Server.Messaging.InMemoryPushPushPipe.subscribe(Weborb.Messaging.Api.Messaging.IConsumer,System.Collections.IDictionary)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Messaging.InMemoryPushPushPipe.pullMessage">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Messaging.InMemoryPushPushPipe.pullMessage(System.Int64)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Messaging.InMemoryPushPushPipe.pushMessage(Weborb.Messaging.Api.Messaging.IMessage)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Exception.ScopeShuttingDownException.#ctor(Weborb.Messaging.Api.IScope)">
            Create exception from given scope object
            @param scope             Scope
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Event.Unknown.data">
            Event data
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Event.Unknown.dataType">
            Type of data
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.Unknown.#ctor(System.Byte,Weborb.Messaging.Util.ByteBuffer)">
            Create new unknown event with given data and data type
            @param dataType             Data type
            @param data                 Event data
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.Unknown.getData">
             Getter for data
            
             @return  Data
        </member>
        <member name="T:Weborb.Messaging.Net.RTMP.Event.AllocationDebugger">
            Simple allocation debugger for Event reference counting.
            
            @author The Red5 Project (red5@osflash.org)
            @author Steven Gong (steven.gong@gmail.com) on behalf of (ce@publishing-etc.de)
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Event.AllocationDebugger.instance">
            Allocation debugger istance
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.AllocationDebugger.getInstance">
             Getter for instance
            
             @return  Allocation debugger instance
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Event.AllocationDebugger.events">
            Events-to-information objects map
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.AllocationDebugger.#ctor">
            Do not instantiate AllocationDebugger. 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.AllocationDebugger.create(Weborb.Messaging.Net.RTMP.Event.BaseEvent)">
            Add event to map
            @param event         Event
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.AllocationDebugger.retain(Weborb.Messaging.Net.RTMP.Event.BaseEvent)">
            Retain event
            @param event         Event
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.AllocationDebugger.release(Weborb.Messaging.Net.RTMP.Event.BaseEvent)">
            Release event if there's no more references to it
            @param event         Event
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.AllocationDebugger.dump">
            Dumps allocations
        </member>
        <member name="T:Weborb.Messaging.Net.RTMP.Event.AllocationDebugger.Info">
            Information on references count
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Event.AllocationDebugger.Info.refcount">
            References count
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.AllocationDebugger.Info.#ctor">
            Constructs a new Info. 
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Codec.RTMP.handshake">
            Handshake as sent to the client.
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Codec.RTMP.readPacketHeaders">
            Headers actually used for a packet, keyed by channel id.
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Codec.RTMP.writeTimestamps">
            Written timestamps
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Codec.RTMP.liveTimestamps">
            Mapping between channel and the last clock to stream mapping
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.RTMP.setHandshake(Weborb.Messaging.Util.ByteBuffer,System.Int32,System.Int32)">
            Store the handshake sent to the client.
            
            @param data    Handshake data
            @param start where handshake data starts in data
            @param length  Length of handshake to store
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.RTMP.validateHandshakeReply(Weborb.Messaging.Util.ByteBuffer,System.Int32,System.Int32)">
            Check if the handshake reply received from a client contains valid data.
            
            @param data data
            @param start where handshake data starts in data
            @param length length
            @return true on success; false otherwise
        </member>
        <member name="T:Weborb.Messaging.Net.RTMP.Codec.RTMP.LiveTimestampMapping">
             Class for mapping between clock time and stream time for live streams
             @author aclarke
            
        </member>
        <member name="T:Weborb.Messaging.Api.Stream.Message.RTMPMessage">
            RTMP message
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.Message.RTMPMessage.getBody">
             Return RTMP message body
            
             @return Value for property 'body'.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.Message.RTMPMessage.setBody(Weborb.Messaging.Net.RTMP.Event.IRTMPEvent)">
             Setter for RTMP message body
            
             @param body Value to set for property 'body'.
        </member>
        <member name="T:Weborb.Messaging.Api.Stream.IStreamPublishSecurity">
            Interface for handlers that control access to stream publishing.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IStreamPublishSecurity.isPublishAllowed(Weborb.Messaging.Api.IScope,System.String,System.String)">
            Check if publishing a stream with the given name is allowed.
            
            @param scope
            			Scope the stream is about to be published in.
            @param name
            			Name of the stream to publish.
            @param mode
            			Publishing mode.
            @return <code>True</code> if publishing is allowed, otherwise <code>False</code>
        </member>
        <member name="T:Weborb.Messaging.Server.Stream.ClientBroadcastStream">
             Represents live stream broadcasted from client. As Flash Media Server, Red5 supports
             recording mode for live streams, that is, broadcasted stream has broadcast mode. It can be either
             "live" or "record" and latter causes server-side application to record broadcasted stream.
            
             Note that recorded streams are recorded as FLV files. The same is correct for audio, because
             NellyMoser codec that Flash Player uses prohibits on-the-fly transcoding to audio formats like MP3
             without paying of licensing fee or buying SDK.
            
             This type of stream uses two different pipes for live streaming and recording.
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.ClientBroadcastStream.publishedName">
            Stream published name
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.ClientBroadcastStream.connMsgOut">
            Output endpoint that providers use
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.ClientBroadcastStream.checkVideoCodec">
            Is there need to check video codec?
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.ClientBroadcastStream.livePipe">
            Pipe for live streaming
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.ClientBroadcastStream.recordPipe">
            Pipe for recording
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.ClientBroadcastStream.recording">
            Whether we are recording or not
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.ClientBroadcastStream.recordingFilename">
            The filename we are recording to.
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.ClientBroadcastStream.sendStartNotification">
            Is there need to send start notification?
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.ClientBroadcastStream.audioTime">
            Stores absolute time for video stream. 
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.ClientBroadcastStream.videoTime">
            Stores absolute time for audio stream. 
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.ClientBroadcastStream.dataTime">
            Stores absolute time for data stream. 
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.ClientBroadcastStream.firstPacketTime">
            Stores timestamp of first packet. 
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.ClientBroadcastStream.chunkSize">
            Data is sent by chunks, each of them has size
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.ClientBroadcastStream.closed">
            Is this stream still active?
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.ClientBroadcastStream.bytesReceived">
            Total number of bytes received.
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.ClientBroadcastStream.listeners">
            Listeners to get notified about received packets. 
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.ClientBroadcastStream.recordingFile">
            FileConsumer used to output recording to disk
        </member>
        <member name="F:Weborb.Messaging.Server.Stream.ClientBroadcastStream.queueThreshold">
            Utilized by the FileConsumer to size the data queue.
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.ClientBroadcastStream.start">
            Starts stream. Creates pipes, video codec from video codec factory bean,
            connects 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.ClientBroadcastStream.stopRecording">
            Stops any currently active recordings.
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.ClientBroadcastStream.close">
            Closes stream, unsubscribes provides, sends stoppage notifications and broadcast close notification.
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.ClientBroadcastStream.saveAs(System.String,System.Boolean)">
             Save broadcasted stream.
            
             @param name                           Stream name
             @param isAppend                       Append mode
             @throws IOException					 File could not be created/written to.
             @throws ResourceNotFoundException     Resource doesn't exist when trying to append.
             @throws ResourceExistException        Resource exist when trying to create.
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.ClientBroadcastStream.getSaveFilename">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.ClientBroadcastStream.getProvider">
            Getter for provider
            @return            Provider
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.ClientBroadcastStream.getPublishedName">
            Getter for published name
            @return        Stream published name
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.ClientBroadcastStream.setPublishedName(System.String)">
            Setter for stream published name
            @param name       Name that used for publishing. Set at client side when begin to broadcast with NetStream#publish.
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.ClientBroadcastStream.pushMessage(Weborb.Messaging.Api.Messaging.IPipe,Weborb.Messaging.Api.Messaging.IMessage)">
             Currently not implemented
            
             @param pipe           Pipe
             @param message        Message
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.ClientBroadcastStream.notifyChunkSize">
            Send OOB control message with chunk size
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.ClientBroadcastStream.onOOBControlMessage(Weborb.Messaging.Api.Messaging.IMessageComponent,Weborb.Messaging.Api.Messaging.IPipe,Weborb.Messaging.Server.Messaging.OOBControlMessage)">
             Out-of-band control message handler
            
             @param source           OOB message source
             @param pipe             Pipe that used to send OOB message
             @param oobCtrlMsg       Out-of-band control message
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.ClientBroadcastStream.dispatchEvent(Weborb.Messaging.Api.Event.IEvent)">
            Dispatches event
            @param event          Event to dispatch
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.ClientBroadcastStream.checkSendNotifications(Weborb.Messaging.Api.Event.IEvent)">
            Check and send notification if necessary
            @param event          Event
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.ClientBroadcastStream.onPipeConnectionEvent(Weborb.Messaging.Server.Messaging.PipeConnectionEvent)">
            Pipe connection event handler
            @param event          Pipe connection event
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.ClientBroadcastStream.sendPublishStartNotify">
            Sends publish start notifications
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.ClientBroadcastStream.sendPublishStopNotify">
            Sends publish stop notifications
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.ClientBroadcastStream.sendRecordFailedNotify(System.String)">
            Sends record failed notifications
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.ClientBroadcastStream.sendRecordStartNotify">
            Sends record start notifications
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.ClientBroadcastStream.sendRecordStopNotify">
            Sends record stop notifications
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.ClientBroadcastStream.notifyBroadcastStart">
            Notifies handler on stream broadcast start
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.ClientBroadcastStream.notifyBroadcastClose">
            Notifies handler on stream broadcast stop
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.ClientBroadcastStream.addStreamListener(Weborb.Messaging.Api.Stream.IStreamListener)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.ClientBroadcastStream.getStreamListeners">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.ClientBroadcastStream.removeStreamListener(Weborb.Messaging.Api.Stream.IStreamListener)">
            {@inheritDoc} 
        </member>
        <member name="T:Weborb.Messaging.Server.IO.MP4.Impl.MP4">
            <summary>
            Implements the MP4 api
            </summary>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.FLVWriter.writeHeader">
             Writes the header bytes
            
             @throws IOException
        </member>
        <member name="F:Weborb.Messaging.Server.IO.FLV.Impl.FLVReader.fis">
            File input stream
        </member>
        <member name="F:Weborb.Messaging.Server.IO.FLV.Impl.FLVReader.keyframeMeta">
            Keyframe metadata
        </member>
        <member name="F:Weborb.Messaging.Server.IO.FLV.Impl.FLVReader.inBuf">
            Input byte buffer
        </member>
        <member name="F:Weborb.Messaging.Server.IO.FLV.Impl.FLVReader.generateMetadata">
            Set to true to generate metadata automatically before the first tag. 
        </member>
        <member name="F:Weborb.Messaging.Server.IO.FLV.Impl.FLVReader.firstVideoTag">
            Position of first video tag. 
        </member>
        <member name="F:Weborb.Messaging.Server.IO.FLV.Impl.FLVReader.firstAudioTag">
            Position of first audio tag. 
        </member>
        <member name="F:Weborb.Messaging.Server.IO.FLV.Impl.FLVReader.duration">
            Duration in milliseconds. 
        </member>
        <member name="F:Weborb.Messaging.Server.IO.FLV.Impl.FLVReader.posTimeMap">
            Mapping between file position and timestamp in ms. 
        </member>
        <member name="F:Weborb.Messaging.Server.IO.FLV.Impl.FLVReader.posTagMap">
            Mapping between file position and tag number. 
        </member>
        <member name="F:Weborb.Messaging.Server.IO.FLV.Impl.FLVReader.bufferType">
            Buffer type / style to use *
        </member>
        <member name="F:Weborb.Messaging.Server.IO.FLV.Impl.FLVReader.useLoadBuf">
            Use load buffer 
        </member>
        <member name="F:Weborb.Messaging.Server.IO.FLV.Impl.FLVReader.header">
            The header of this FLV file. 
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.FLVReader.#ctor">
            Constructs a new FLVReader. 
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.FLVReader.#ctor(System.IO.FileStream)">
            Creates FLV reader from file input stream
            @param f         File input stream
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.FLVReader.#ctor(System.IO.FileStream,System.Boolean)">
            Creates FLV reader from file input stream, sets up metadata generation flag
            @param f                    File input stream
            @param generateMetadata     <code>true</code> if metadata generation required, <code>false</code> otherwise
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.FLVReader.#ctor(Weborb.Messaging.Util.ByteBuffer,System.Boolean)">
             Accepts mapped file bytes to construct internal members.
            
             @param generateMetadata         <code>true</code> if metadata generation required, <code>false</code> otherwise
             @param buffer                   Byte buffer
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.FLVReader.getRemainingBytes">
            Get the remaining bytes that could be read from a file or ByteBuffer
            @return          Number of remaining bytes
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.FLVReader.getTotalBytes">
            Get the total readable bytes in a file or ByteBuffer
            @return          Total readable bytes
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.FLVReader.getCurrentPosition">
            Get the current position in a file or ByteBuffer
            @return           Current position in a file
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.FLVReader.setCurrentPosition(System.Int64)">
             Modifies current position
            
             @param pos  Current position in file
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.FLVReader.fillBuffer">
            Loads whole buffer from file channel, with no reloading (that is, appending)
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.FLVReader.fillBuffer(System.Int64)">
            Loads data from channel to buffer
            @param amount         Amount of data to load with no reloading
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.FLVReader.fillBuffer(System.Int64,System.Boolean)">
            Load enough bytes from channel to buffer.
            After the loading process, the caller can make sure the amount
            in buffer is of size 'amount' if we haven't reached the end of channel.
            @param amount The amount of bytes in buffer after returning,
            no larger than bufferSize
            @param reload Whether to reload or append.
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.FLVReader.postInitialize">
            Post-initialization hook, reads keyframe metadata and decodes header (if any)
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.FLVReader.getBufferType">
             Getter for buffer type (auto, direct or heap)
            
             @return Value for property 'bufferType'.
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.FLVReader.setBufferType(System.String)">
             Setter for buffer type
            
             @param bufferType Value to set for property 'bufferType'.
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.FLVReader.getBufferSize">
             Getter for buffer size
            
             @return Value for property 'bufferSize'.
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.FLVReader.setBufferSize(System.Int32)">
             Setter for property 'bufferSize'.
            
             @param bufferSize Value to set for property 'bufferSize'.
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.FLVReader.getFileData">
            Returns the file buffer.
            
            @return  File contents as byte buffer
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.FLVReader.decodeHeader">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.FLVReader.getFile">
            {@inheritDoc}
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.FLVReader.getOffset">
            {@inheritDoc}
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.FLVReader.getBytesRead">
            {@inheritDoc}
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.FLVReader.getDuration">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.FLVReader.hasMoreTags">
            {@inheritDoc}
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.FLVReader.createFileMeta">
            Create tag for metadata event
            @return         Metadata event tag
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.FLVReader.readTag">
            {@inheritDoc}
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.FLVReader.close">
            {@inheritDoc}
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.FLVReader.analyzeKeyFrames">
            Key frames analysis may be used as a utility method so
            synchronize it.
            @return             Keyframe metadata
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.FLVReader.position(System.Int64)">
            Put the current position to pos.
            The caller must ensure the pos is a valid one
            (eg. not sit in the middle of a frame)
            @param pos         New position in file
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.FLVReader.readTagHeader">
             Read only header part of a tag
            
             @return              Tag header
        </member>
        <member name="T:Weborb.Messaging.Api.Stream.ITokenBucket">
            Basically token bucket is used to control the bandwidth used by a stream or a connection or a client.
            There's a background thread that distributes tokens to the buckets in the system according
            to the configuration of the bucket. The configuration includes how fast the tokens are distributed.
            When a stream, for example, needs to send out a packet, the packet's byte count is calculated and
            each byte corresponds to a token in the bucket. The stream is assigned a bucket and the tokens in
            the bucket are acquired before the packet can be sent out. So if the speed(or bandwidth) in
            configuration is low, the stream can't send out packets fast. 
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.ITokenBucket.acquireToken(System.Double,System.Int64)">
            Acquire tokens amount of <tt>tokenCount</tt>
            waiting <tt>wait</tt> milliseconds if token not available.
            @param tokenCount The count of tokens to acquire.
            @param wait Milliseconds to wait. <tt>0</tt> means no wait
            and any value below zero means wait forever. 
            @return <tt>true</tt> if successfully acquired or <tt>false</tt>
            if not acquired.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.ITokenBucket.acquireTokenNonblocking(System.Double,Weborb.Messaging.Api.Stream.ITokenBucketCallback)">
            Nonblockingly acquire token. If the token is not available and
            <tt>task</tt> is not null, the callback will be executed when the token
            is available. The tokens are not consumed automatically before callback,
            so it's recommended to acquire token again in callback function.
            
            @param tokenCount        Number of tokens
            @param callback          Callback
            @return <tt>true</tt> if successfully acquired or <tt>false</tt>
            if not acquired.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.ITokenBucket.acquireTokenBestEffort(System.Double)">
            Nonblockingly acquire token. The upper limit is specified. If
            not enough tokens are left in bucket, all remaining will be
            returned.
            @param upperLimitCount      Upper limit of aquisition
            @return                     Remaining tokens from bucket
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.ITokenBucket.getCapacity">
            Get the capacity of this bucket in Byte.
            
            @return                     Capacity of this bucket in bytes
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.ITokenBucket.getSpeed">
            The amount of tokens increased per second in millisecond.
            
            @return                     Amount of tokens increased per second in millisecond.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.ITokenBucket.reset">
            Reset this token bucket. All pending threads are woken up with <tt>false</tt>
            returned for acquiring token and callback is removed without calling back.
        </member>
        <member name="F:Weborb.Messaging.Api.Stream.FrameDropperSendModes.SEND_ALL">
            Send keyframes, interframes and disposable interframes. 
        </member>
        <member name="F:Weborb.Messaging.Api.Stream.FrameDropperSendModes.SEND_INTERFRAMES">
            Send keyframes and interframes. 
        </member>
        <member name="F:Weborb.Messaging.Api.Stream.FrameDropperSendModes.SEND_KEYFRAMES">
            Send keyframes only. 
        </member>
        <member name="F:Weborb.Messaging.Api.Stream.FrameDropperSendModes.SEND_KEYFRAMES_CHECK">
            Send keyframes only and switch to SEND_INTERFRAMES later. 
        </member>
        <member name="T:Weborb.Messaging.Server.SO.SharedObjectMessage">
            Shared object event
        </member>
        <member name="F:Weborb.Messaging.Server.SO.SharedObjectMessage.name">
            SO event name
        </member>
        <member name="F:Weborb.Messaging.Server.SO.SharedObjectMessage.events">
            SO events chain
        </member>
        <member name="F:Weborb.Messaging.Server.SO.SharedObjectMessage.version">
            SO version, used for synchronization purposes
        </member>
        <member name="F:Weborb.Messaging.Server.SO.SharedObjectMessage.persistent">
            Whether SO persistent
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectMessage.#ctor(System.String,System.Int32,System.Boolean)">
             Creates Shared Object event with given name, version and persistence flag
            
             @param name          Event name
             @param version       SO version
             @param persistent    SO persistence flag
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectMessage.#ctor(Weborb.Messaging.Api.Event.IEventListener,System.String,System.Int32,System.Boolean)">
             Creates Shared Object event with given listener, name, SO version and persistence flag
            
             @param source         Event listener
             @param name           Event name
             @param version        SO version
             @param persistent     SO persistence flag
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectMessage.getVersion">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectMessage.setVersion(System.Int32)">
             Setter for version
            
             @param version  New version
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectMessage.getName">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectMessage.setName(System.String)">
             Setter for name
            
             @param name  Event name
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectMessage.isPersistent">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectMessage.setIsPersistent(System.Boolean)">
             Setter for persistence flag
            
             @param persistent  Persistence flag
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectMessage.addEvent(Weborb.Messaging.Server.SO.ISharedObjectEvent)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectMessage.getEvents">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectMessage.addEvent(Weborb.Messaging.Server.SO.SharedObjectEventType,System.String,System.Object)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectMessage.clear">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectMessage.isEmpty">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectMessage.getType">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectMessage.getObject">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectMessage.releaseInternal">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectMessage.ToString">
            {@inheritDoc} 
        </member>
        <member name="F:Weborb.Messaging.Server.SO.SharedObjectEvent.type">
            Event type
        </member>
        <member name="F:Weborb.Messaging.Server.SO.SharedObjectEvent.key">
            Changed pair key
        </member>
        <member name="F:Weborb.Messaging.Server.SO.SharedObjectEvent.value">
            Changed pair value
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectEvent.#ctor(Weborb.Messaging.Server.SO.SharedObjectEventType,System.String,System.Object)">
            {@inheritDoc}
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectEvent.getKey">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectEvent.getType">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectEvent.getValue">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.SO.SharedObjectEvent.ToString">
            {@inheritDoc} 
        </member>
        <member name="T:Weborb.Messaging.Server.Messaging.PipeConnectionEvent">
            Event object corresponds to the connect/disconnect events
            among providers/consumers and pipes.
        </member>
        <member name="F:Weborb.Messaging.Server.Messaging.PipeConnectionEvent.PROVIDER_CONNECT_PULL">
            A provider connects as pull mode.
        </member>
        <member name="F:Weborb.Messaging.Server.Messaging.PipeConnectionEvent.PROVIDER_CONNECT_PUSH">
            A provider connects as push mode.
        </member>
        <member name="F:Weborb.Messaging.Server.Messaging.PipeConnectionEvent.PROVIDER_DISCONNECT">
            A provider disconnects.
        </member>
        <member name="F:Weborb.Messaging.Server.Messaging.PipeConnectionEvent.CONSUMER_CONNECT_PULL">
            A consumer connects as pull mode.
        </member>
        <member name="F:Weborb.Messaging.Server.Messaging.PipeConnectionEvent.CONSUMER_CONNECT_PUSH">
            A consumer connects as push mode.
        </member>
        <member name="F:Weborb.Messaging.Server.Messaging.PipeConnectionEvent.CONSUMER_DISCONNECT">
            A consumer disconnects.
        </member>
        <member name="F:Weborb.Messaging.Server.Messaging.PipeConnectionEvent.provider">
            Provider
        </member>
        <member name="F:Weborb.Messaging.Server.Messaging.PipeConnectionEvent.consumer">
            Consumer
        </member>
        <member name="F:Weborb.Messaging.Server.Messaging.PipeConnectionEvent.type">
            Event type
        </member>
        <member name="F:Weborb.Messaging.Server.Messaging.PipeConnectionEvent.paramMap">
            Params map.
            TODO : investigate what this map for
        </member>
        <member name="M:Weborb.Messaging.Server.Messaging.PipeConnectionEvent.#ctor(System.Object)">
            Construct an object with the specific pipe as the
            <tt>source</tt>
            @param source A pipe that triggers this event.
        </member>
        <member name="M:Weborb.Messaging.Server.Messaging.PipeConnectionEvent.getProvider">
            Return pipe connection provider
            @return          Provider
        </member>
        <member name="M:Weborb.Messaging.Server.Messaging.PipeConnectionEvent.setProvider(Weborb.Messaging.Api.Messaging.IProvider)">
            Setter for pipe connection provider
            @param provider  Provider
        </member>
        <member name="M:Weborb.Messaging.Server.Messaging.PipeConnectionEvent.getConsumer">
            Return pipe connection consumer
            @return          Consumer
        </member>
        <member name="M:Weborb.Messaging.Server.Messaging.PipeConnectionEvent.setConsumer(Weborb.Messaging.Api.Messaging.IConsumer)">
            Setter for pipe connection consumer
            @param consumer  Consumer
        </member>
        <member name="M:Weborb.Messaging.Server.Messaging.PipeConnectionEvent.getType">
            Return event type
            @return             Event type
        </member>
        <member name="M:Weborb.Messaging.Server.Messaging.PipeConnectionEvent.setType(System.Int32)">
            Setter for event type
            @param type         Event type
        </member>
        <member name="M:Weborb.Messaging.Server.Messaging.PipeConnectionEvent.getParamMap">
            Return event parameters as Map
            @return             Event parameters as Map
        </member>
        <member name="M:Weborb.Messaging.Server.Messaging.PipeConnectionEvent.setParamMap(System.Collections.IDictionary)">
            Setter for event parameters map
            @param paramMap     Event parameters as Map
        </member>
        <member name="M:Weborb.Messaging.Server.Messaging.PipeConnectionEvent.addTask(System.Threading.WaitCallback)">
            Add task to list
            @param task     Task to add
        </member>
        <member name="M:Weborb.Messaging.Server.Messaging.PipeConnectionEvent.getTaskList">
            Return list of tasks
            @return       List of tasks
        </member>
        <member name="T:Weborb.Messaging.Net.RTMP.Event.ChunkSize">
            Chunk size event
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Event.ChunkSize.size">
            Chunk size
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.ChunkSize.#ctor(System.Int32)">
            Create chunk size event with given size
            @param size         Chunk size
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.ChunkSize.getSize">
             Getter for size.
            
             @return  Chunk size
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.ChunkSize.setSize(System.Int32)">
             Setter for size.
            
             @param size  Chunk size
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.ChunkSize.doRelease">
            Releases chunk (set size to zero)
        </member>
        <member name="T:Weborb.Messaging.Server.Stream.DefaultStreamFilenameGenerator">
            Default filename generator for streams. The files will be stored in a
            directory "streams" in the application folder. Option for changing directory
            streams are saved to is investigated as of 0.6RC1.
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.DefaultStreamFilenameGenerator.getStreamDirectory(Weborb.Messaging.Api.IScope)">
            For now, return "streams/" as streams directory path for each scope
            @param scope            Scope
            @return                 For now, "streams/" as streams directory path
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.DefaultStreamFilenameGenerator.generateFilename(Weborb.Messaging.Api.IScope,System.String,Weborb.Messaging.Api.Stream.GenerationType)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.Stream.DefaultStreamFilenameGenerator.generateFilename(Weborb.Messaging.Api.IScope,System.String,System.String,Weborb.Messaging.Api.Stream.GenerationType)">
            {@inheritDoc} 
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolEncoder.baseTolerance">
            Tolerance (in milliseconds) for late media on streams. A set of levels based on this
            value will be determined. 
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolEncoder.midTolerance">
            Middle tardiness level, between base and this value disposible frames
            will be dropped. Between this and highest value regulare interframes
            will be dropped.
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolEncoder.highestTolerance">
            Highest tardiness level before dropping key frames
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolEncoder.dropLiveFuture">
            Indicates if we should drop live packets with future timestamp 
            (i.e, when publisher bandwith is limited) - EXPERIMENTAL
            
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolEncoder.encode(Weborb.Messaging.Net.RTMP.ProtocolState,System.Object)">
            Encodes object with given protocol state to byte buffer
            
            @param state			Protocol state
            @param message		Object to encode
            @return				IoBuffer with encoded data
            @throws Exception    Any decoding exception
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolEncoder.encodePacket(Weborb.Messaging.Net.RTMP.Codec.RTMP,Weborb.Messaging.Net.RTMP.Message.Packet)">
             Encode packet.
            
             @param rtmp        RTMP protocol state
             @param packet      RTMP packet
             @return            Encoded data
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolEncoder.dropMessage(Weborb.Messaging.Net.RTMP.Codec.RTMP,System.Int32,Weborb.Messaging.Net.RTMP.Event.IRTMPEvent)">
            Determine if this message should be dropped for lateness. Live publish data
            does not come through this section, only outgoing data does.
            
            - determine latency between server and client using ping
            - ping timestamp is unsigned int (4 bytes) and is set from value on sender
            
            1st drop disposable frames - lowest mark
            2nd drop interframes - middle
            3rd drop key frames - high mark
            
            @param rtmp the protocol state
            @param channelId the channel ID
            @param message the message
            @return true to drop; false to send
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolEncoder.getHeaderType(Weborb.Messaging.Net.RTMP.Codec.RTMP,Weborb.Messaging.Net.RTMP.Message.Header,Weborb.Messaging.Net.RTMP.Message.Header)">
            Determine type of header to use.
            
            @param rtmp        The protocol state
            @param header      RTMP message header
            @param lastHeader  Previous header
            @return            Header type to use.
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolEncoder.calculateHeaderSize(Weborb.Messaging.Net.RTMP.Codec.RTMP,Weborb.Messaging.Net.RTMP.Message.Header,Weborb.Messaging.Net.RTMP.Message.Header)">
            Calculate number of bytes necessary to encode the header.
            
            @param rtmp        The protocol state
            @param header      RTMP message header
            @param lastHeader  Previous header
            @return            Calculated size
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolEncoder.encodeHeader(Weborb.Messaging.Net.RTMP.Codec.RTMP,Weborb.Messaging.Net.RTMP.Message.Header,Weborb.Messaging.Net.RTMP.Message.Header)">
            Encode RTMP header.
            @param rtmp        The protocol state
            @param header      RTMP message header
            @param lastHeader  Previous header
            @return            Encoded header data
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolEncoder.encodeHeader(Weborb.Messaging.Net.RTMP.Codec.RTMP,Weborb.Messaging.Net.RTMP.Message.Header,Weborb.Messaging.Net.RTMP.Message.Header,Weborb.Messaging.Util.ByteBuffer)">
             Encode RTMP header into given IoBuffer.
            
             @param rtmp        The protocol state
             @param header      RTMP message header
             @param lastHeader  Previous header
             @param buf         Buffer to write encoded header to
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolEncoder.encodeMessage(Weborb.Messaging.Net.RTMP.Codec.RTMP,Weborb.Messaging.Net.RTMP.Message.Header,Weborb.Messaging.Net.RTMP.Event.IRTMPEvent)">
             Encode message.
            
             @param rtmp        RTMP protocol state
             @param header      RTMP message header
             @param message     RTMP message (event)
             @return            Encoded message data
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolEncoder.encodeServerBW(Weborb.Messaging.Net.RTMP.Event.ServerBW)">
             Encode server-side bandwidth event.
            
             @param serverBW    Server-side bandwidth event
             @return            Encoded event data
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolEncoder.encodeClientBW(Weborb.Messaging.Net.RTMP.Event.ClientBW)">
             Encode client-side bandwidth event.
            
             @param clientBW    Client-side bandwidth event
             @return            Encoded event data
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolEncoder.encodeChunkSize(Weborb.Messaging.Net.RTMP.Event.ChunkSize)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolEncoder.encodeFlexSharedObject(Weborb.Messaging.Server.SO.ISharedObjectMessage,Weborb.Messaging.Net.RTMP.Codec.RTMP)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolEncoder.encodeSharedObject(Weborb.Messaging.Server.SO.ISharedObjectMessage,Weborb.Messaging.Net.RTMP.Codec.RTMP)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolEncoder.encodeNotify(Weborb.Messaging.Net.RTMP.Event.Notify,Weborb.Messaging.Net.RTMP.Codec.RTMP)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolEncoder.encodeInvoke(Weborb.Messaging.Net.RTMP.Event.Invoke,Weborb.Messaging.Net.RTMP.Codec.RTMP)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolEncoder.encodeNotifyOrInvoke(Weborb.Messaging.Net.RTMP.Event.Notify,Weborb.Messaging.Net.RTMP.Codec.RTMP)">
             Encode notification event.
            
             @param invoke            Notification event
             @return                  Encoded event data
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolEncoder.encodePing(Weborb.Messaging.Net.RTMP.Event.Ping)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolEncoder.encodeBytesRead(Weborb.Messaging.Net.RTMP.Event.BytesRead)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolEncoder.encodeAudioData(Weborb.Messaging.Net.RTMP.Event.AudioData)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolEncoder.encodeVideoData(Weborb.Messaging.Net.RTMP.Event.VideoData)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolEncoder.encodeUnknown(Weborb.Messaging.Net.RTMP.Event.Unknown)">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolEncoder.encodeFlexMessage(Weborb.Messaging.Net.RTMP.Event.FlexMessage,Weborb.Messaging.Net.RTMP.Codec.RTMP)">
             Encodes Flex message event.
            
             @param msg                Flex message event
             @param rtmp RTMP
             @return                   Encoded data
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolEncoder.setSerializer(Weborb.Messaging.Api.IO.WebORBSerializer)">
             Setter for serializer.
            
             @param serializer Serializer
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Codec.BaseRTMPProtocolEncoder.setDropLiveFuture(System.Boolean)">
              Setter for dropLiveFuture
            
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP4.MP4Frame.CompareTo(Weborb.Messaging.Server.IO.MP4.MP4Frame)">
            <summary>
            The frames are expected to be sorted by their timestamp
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Weborb.Messaging.Server.IO.MP4.MP4Atom">
            <summary>
            The MP4Atom object represents the smallest information block of the MP4 file. It could contain other atoms as children.
            </summary>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP4.MP4Atom._size">
            The size of the atom. 
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP4.MP4Atom._type">
            The type of the atom. 
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP4.MP4Atom._uuid">
            The user's extended type of the atom. 
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP4.MP4Atom._bytesRead">
            The amount of bytes that bytesRead from the mpeg stream. 
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP4.MP4Atom._children">
            The children of this atom. 
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP4.MP4Atom.CreateAtom(Weborb.Messaging.Server.IO.MP4.MP4DataStream)">
            <summary>
            Constructs an Atom object from the data in the bitstream.
            </summary>
            <param name="bitstream">The input bitstream.</param>
            <returns>The constructed atom.</returns>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP4.MP4Atom.create_full_atom(Weborb.Messaging.Server.IO.MP4.MP4DataStream)">
            <summary>
            Loads the version of the full atom from the input bitstream.
            </summary>
            <param name="bitstream">The input bitstream.</param>
            <returns>The number of bytes loaded.</returns>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP4.MP4Atom.create_composite_atom(Weborb.Messaging.Server.IO.MP4.MP4DataStream)">
            <summary>
            Loads the composite atom from the input bitstream.
            </summary>
            <param name="bitstream">The input bitstream.</param>
            <returns>The number of bytes loaded.</returns>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP4.MP4Atom.Lookup(System.Int64,System.Int32)">
            <summary>
            Looks up a child atom with the specified type, skips the <code>number</code> children with the same type before finding a result.
            </summary>
            <param name="type">The type of the atom.</param>
            <param name="number">The number of atoms to skip.</param>
            <returns>The atom if found othwerwise null.</returns>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP4.MP4Atom.create_audio_sample_entry_atom(Weborb.Messaging.Server.IO.MP4.MP4DataStream)">
            <summary>
            Loads AudioSampleEntry atom from the input bitstream.
            </summary>
            <param name="bitstream">The input bitstream.</param>
            <returns>The number of bytes loaded.</returns>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP4.MP4Atom.chunks">
            <summary>
            The decoding time to sample table.
            </summary>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP4.MP4Atom.create_chunk_large_offset_atom(Weborb.Messaging.Server.IO.MP4.MP4DataStream)">
            <summary>
            Loads ChunkLargeOffset atom from the input bitstream.
            </summary>
            <param name="bitstream">The input bitstream.</param>
            <returns>The number of bytes loaded.</returns>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP4.MP4Atom.create_chunk_offset_atom(Weborb.Messaging.Server.IO.MP4.MP4DataStream)">
            <summary>
            Loads ChunkOffset atom from the input bitstream.
            </summary>
            <param name="bitstream">The input bitstream.</param>
            <returns>The number of bytes loaded.</returns>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP4.MP4Atom.create_handler_atom(Weborb.Messaging.Server.IO.MP4.MP4DataStream)">
            <summary>
            Loads Handler atom from the input bitstream.
            </summary>
            <param name="bitstream">The input bitstream.</param>
            <returns>The number of bytes loaded.</returns>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP4.MP4Atom.create_media_header_atom(Weborb.Messaging.Server.IO.MP4.MP4DataStream)">
            <summary>
            Loads MediaHeader atom from the input bitstream.
            </summary>
            <param name="bitstream">The input bitstream.</param>
            <returns>The number of bytes loaded.</returns>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP4.MP4Atom.create_movie_header_atom(Weborb.Messaging.Server.IO.MP4.MP4DataStream)">
            <summary>
            Loads MovieHeader atom from the input bitstream.
            </summary>
            <param name="bitstream">The input bitstream.</param>
            <returns>The number of bytes loaded.</returns>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP4.MP4Atom.create_sample_description_atom(Weborb.Messaging.Server.IO.MP4.MP4DataStream)">
            <summary>
            Loads SampleDescription atom from the input bitstream.
            </summary>
            <param name="bitstream">The input bitstream.</param>
            <returns>The number of bytes loaded.</returns>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP4.MP4Atom.samples">
            <summary>
            The decoding time to sample table
            </summary>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP4.MP4Atom.create_sample_size_atom(Weborb.Messaging.Server.IO.MP4.MP4DataStream)">
            <summary>
            Loads MP4SampleSizeAtom atom from the input bitstream.
            </summary>
            <param name="bitstream">The input bitstream.</param>
            <returns>The number of bytes loaded.</returns>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP4.MP4Atom.create_compact_sample_size_atom(Weborb.Messaging.Server.IO.MP4.MP4DataStream)">
            <summary>
            Loads CompactSampleSize atom from the input stream.
            </summary>
            <param name="bitstream">The input bitstream.</param>
            <returns>The number of bytes loaded.</returns>
        </member>
        <member name="F:Weborb.Messaging.Server.IO.MP4.MP4Atom.records">
            <summary>
            The decoding time to sample table
            </summary>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP4.MP4Atom.create_sample_to_chunk_atom(Weborb.Messaging.Server.IO.MP4.MP4DataStream)">
            <summary>
            Loads MP4SampleToChunkAtom atom from the input bitstream.
            </summary>
            <param name="bitstream">The input bitstream.</param>
            <returns>The number of bytes loaded.</returns>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP4.MP4Atom.create_sync_sample_atom(Weborb.Messaging.Server.IO.MP4.MP4DataStream)">
            <summary>
            Loads MP4SyncSampleAtom atom from the input bitstream.
            </summary>
            <param name="bitstream">The input bitstream.</param>
            <returns>The number of bytes loaded.</returns>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP4.MP4Atom.create_time_to_sample_atom(Weborb.Messaging.Server.IO.MP4.MP4DataStream)">
            <summary>
            Loads MP4TimeToSampleAtom atom from the input bitstream.
            </summary>
            <param name="bitstream">The input bitstream.</param>
            <returns>The number of bytes loaded.</returns>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP4.MP4Atom.create_sound_media_header_atom(Weborb.Messaging.Server.IO.MP4.MP4DataStream)">
            <summary>
            Loads MP4SoundMediaHeaderAtom atom from the input bitstream.
            </summary>
            <param name="bitstream">The input bitstream.</param>
            <returns>The number of bytes loaded.</returns>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP4.MP4Atom.create_track_header_atom(Weborb.Messaging.Server.IO.MP4.MP4DataStream)">
            <summary>
            Loads MP4TrackHeaderAtom atom from the input bitstream.
            </summary>
            <param name="bitstream">The input bitstream.</param>
            <returns>The number of bytes loaded.</returns>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP4.MP4Atom.create_video_media_header_atom(Weborb.Messaging.Server.IO.MP4.MP4DataStream)">
            <summary>
            Loads MP4VideoMediaHeaderAtom atom from the input bitstream.
            </summary>
            <param name="bitstream">The input bitstream.</param>
            <returns>The number of bytes loaded.</returns>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP4.MP4Atom.create_visual_sample_entry_atom(Weborb.Messaging.Server.IO.MP4.MP4DataStream)">
            <summary>
            Loads MP4VisualSampleEntryAtom atom from the input bitstream.
            </summary>
            <param name="bitstream">The input bitstream.</param>
            <returns>The number of bytes loaded.</returns>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP4.MP4Atom.create_video_sample_entry_atom(Weborb.Messaging.Server.IO.MP4.MP4DataStream)">
            <summary>
            Loads MP4VideoSampleEntryAtom atom from the input bitstream.
            </summary>
            <param name="bitstream">The input bitstream.</param>
            <returns>The number of bytes loaded.</returns>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP4.MP4Atom.create_avc_config_atom(Weborb.Messaging.Server.IO.MP4.MP4DataStream)">
            <summary>
            Loads AVCC atom from the input bitstream.
            <para>
            8+ bytes ISO/IEC 14496-10 or 3GPP AVC decode config box
             = long unsigned offset + long ASCII text string 'avcC'
            -> 1 byte version = 8-bit hex version  (current = 1)
            -> 1 byte H.264 profile = 8-bit unsigned stream profile
            -> 1 byte H.264 compatible profiles = 8-bit hex flags
            -> 1 byte H.264 level = 8-bit unsigned stream level
            -> 1 1/2 nibble reserved = 6-bit unsigned value set to 63
            -> 1/2 nibble NAL length = 2-bit length byte size type
             - 1 byte = 0 ; 2 bytes = 1 ; 4 bytes = 3
            -> 1 byte number of SPS = 8-bit unsigned total
            -> 2+ bytes SPS length = short unsigned length
            -> + SPS NAL unit = hexdump
            -> 1 byte number of PPS = 8-bit unsigned total
            -> 2+ bytes PPS length = short unsigned length
            -> + PPS NAL unit = hexdump 
            </para>
            </summary>
            <param name="bitstream">The input bitstream.</param>
            <returns>The number of bytes loaded.</returns>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP4.MP4Atom.create_pasp_atom(Weborb.Messaging.Server.IO.MP4.MP4DataStream)">
            <summary>
            Creates the PASP atom or Pixel Aspect Ratio. It is created by Quicktime
            when exporting an MP4 file. The atom is required for ipod's and acts as
            a container for the avcC atom in these cases.
            </summary>
            <param name="bitstream">The input bitstream.</param>
            <returns>The number of bytes loaded.</returns>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP4.MP4Atom.create_esd_atom(Weborb.Messaging.Server.IO.MP4.MP4DataStream)">
            <summary>
            Loads M4ESDAtom atom from the input bitstream.
            </summary>
            <param name="bitstream">The input bitstream.</param>
            <returns>The number of bytes loaded.</returns>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.MP4.MP4Atom.createDate(System.Int64)">
            <summary>
            Converts the time in seconds since midnight 1 Jan 1904.
            </summary>
            <param name="movieTime">The time in milliseconds since midnight 1 Jan 1904.</param>
            <returns>The DateTime object.</returns>
        </member>
        <member name="P:Weborb.Messaging.Server.IO.MP4.MP4Atom.EsdDescriptor">
            <summary>
            Gets the ESD descriptor.
            </summary>
        </member>
        <member name="P:Weborb.Messaging.Server.IO.MP4.MP4Atom.Children">
            <summary>
            Gets children from this atom.
            </summary>
        </member>
        <member name="P:Weborb.Messaging.Server.IO.MP4.MP4Atom.Size">
            <summary>
            Gets the size of this atom.
            </summary>
        </member>
        <member name="P:Weborb.Messaging.Server.IO.MP4.MP4Atom.Type">
            <summary>
            Gets the type of this atom.
            </summary>
        </member>
        <member name="T:Weborb.Messaging.Server.IO.MP3.Impl.MP3Service">
            <summary>
            Streamable file service extension for MP3.
            </summary>
        </member>
        <member name="M:Weborb.Messaging.Server.IO.ITag.getBody">
             Return the body ByteBuffer
            
             @return ByteBuffer
        </member>
        <member name="M:Weborb.Messaging.Server.IO.ITag.getBodySize">
             Return the size of the body
            
             @return int
        </member>
        <member name="M:Weborb.Messaging.Server.IO.ITag.getDataType">
             Get the data type
            
             @return byte
        </member>
        <member name="M:Weborb.Messaging.Server.IO.ITag.getTimestamp">
             Return the timestamp
            
             @return int
        </member>
        <member name="M:Weborb.Messaging.Server.IO.ITag.getData">
             Returns the data as a ByteBuffer
            
             @return ByteBuffer buf
        </member>
        <member name="M:Weborb.Messaging.Server.IO.ITag.getPreviousTagSize">
             Returns the data as a ByteBuffer
            
             @return ByteBuffer buf
        </member>
        <member name="M:Weborb.Messaging.Server.IO.ITag.setBody(Weborb.Messaging.Util.ByteBuffer)">
             Return the body ByteBuffer
            
             @return ByteBuffer
        </member>
        <member name="M:Weborb.Messaging.Server.IO.ITag.setBodySize(System.Int32)">
             Return the size of the body
            
             @return int
        </member>
        <member name="M:Weborb.Messaging.Server.IO.ITag.setDataType(System.Byte)">
             Get the data type
            
             @return byte
        </member>
        <member name="M:Weborb.Messaging.Server.IO.ITag.setTimestamp(System.Int32)">
             Return the timestamp
            
             @return int
        </member>
        <member name="M:Weborb.Messaging.Server.IO.ITag.setPreviousTagSize(System.Int32)">
             Returns the data as a ByteBuffer
            
             @return ByteBuffer buf
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.Tag.#ctor(System.Byte,System.Int32,System.Int32,Weborb.Messaging.Util.ByteBuffer,System.Int32)">
             TagImpl Constructor
            
             @param dataType
             @param timestamp
             @param bodySize
             @param body
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.Tag.getBody">
             Return the body ByteBuffer
            
             @return ByteBuffer
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.Tag.getBodySize">
             Return the size of the body
            
             @return int
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.Tag.getDataType">
             Get the data type
            
             @return byte
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.Tag.getTimestamp">
             Return the timestamp
            
             @return int
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.Tag.getPreviousTagSize">
             Return the timestamp
            
             @return int
        </member>
        <member name="M:Weborb.Messaging.Server.IO.FLV.Impl.Tag.ToString">
             Prints out the contents of the tag
            
             @return tag contents
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Event.VideoData.data">
            Video data
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Event.VideoData.frameType">
            Frame type, unknown by default
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.VideoData.#ctor">
            Constructs a new VideoData. 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.VideoData.#ctor(Weborb.Messaging.Util.ByteBuffer)">
            Create video data event with given data buffer
            @param data            Video data
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.VideoData.getDataType">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.VideoData.getData">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.VideoData.ToString">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.VideoData.getFrameType">
             Getter for frame type
            
             @return  Type of video frame
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Event.VideoData.releaseInternal">
            {@inheritDoc} 
        </member>
        <member name="M:Weborb.Messaging.Server.SO.FlexSharedObjectMessage.#ctor(System.String,System.Int32,System.Boolean)">
             Creates Flex2 Shared Object event with given name, version and persistence flag
            
             @param name          Event name
             @param version       SO version
             @param persistent    SO persistence flag
        </member>
        <member name="M:Weborb.Messaging.Server.SO.FlexSharedObjectMessage.#ctor(Weborb.Messaging.Api.Event.IEventListener,System.String,System.Int32,System.Boolean)">
             Creates Flex2 Shared Object event with given listener, name, SO version and persistence flag
            
             @param source         Event listener
             @param name           Event name
             @param version        SO version
             @param persistent     SO persistence flag
        </member>
        <!-- Badly formed XML comment ignored for member "M:Weborb.Messaging.Net.RTMP.RTMPUtils.compareTimestamps(System.Int32,System.Int32)" -->
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPUtils.diffTimestamps(System.Int32,System.Int32)">
            Calculates the delta between two time stamps, adjusting
            for time stamp wrapping.
            
            @param a First time stamp
            @param b Second time stamp
            @return the distance between a and b, which will be negative if a is less than b.
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.RTMPHandshake.random">
            ** Modulus bytes from flazr */
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPHandshake.generateUnversionedResponse(Weborb.Messaging.Util.ByteBuffer)">
            Generates response for non-versioned connections, such as those before FP9.
            
            @param input incoming RTMP bytes
            @return outgoing handshake
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPHandshake.generateResponse(Weborb.Messaging.Util.ByteBuffer)">
            Generates response for versioned connections.
            
            @param input incoming RTMP bytes
            @return outgoing handshake
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPHandshake.calculateHMAC_SHA256(System.Byte[],System.Byte[])">
            Calculates an HMAC SHA256 hash using a default key length.
            
            @param input
            @param key
            @return hmac hashed bytes
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPHandshake.calculateHMAC_SHA256(System.Byte[],System.Byte[],System.Int32)">
            Calculates an HMAC SHA256 hash using a set key length.
            
            @param input
            @param key
            @param length
            @return hmac hashed bytes
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPHandshake.validateClient(Weborb.Messaging.Util.ByteBuffer)">
            Determines the validation scheme for given input.
            
            @param input
            @return true if client used a supported validation scheme, false if unsupported
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPHandshake.getDHOffset0">
            Returns the DH byte offset.
            
            @return dh offset
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPHandshake.getDHOffset1">
            Returns the DH byte offset.
            
            @return dh offset
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPHandshake.getDigestOffset(System.Byte[])">
            Returns the digest offset using current validation scheme.
            
            @param pBuffer
            @return digest offset
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPHandshake.getDigestOffset0(System.Byte[])">
            Returns a digest byte offset.
            
            @param pBuffer source for digest data
            @return digest offset
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPHandshake.getDigestOffset1(System.Byte[])">
            Returns a digest byte offset.
            
            @param pBuffer source for digest data
            @return digest offset
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPHandshake.createServerInitialHandshakeBytes">
            Creates the servers handshake bytes
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPHandshake.prepareResponse">
            Gets the DH offset in the handshake bytes array based on validation scheme
            Generates DH keypair
            Adds public key to handshake bytes
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.RTMPHandshake.getHandshakeBytes">
            Returns the contained handshake bytes. These are just random bytes
            if the player is using an non-versioned player.
            
            @return handshake bytes
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.Message.StatusMessage.getBody">
             Getter for property 'body'.
            
             @return Value for property 'body'.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.Message.StatusMessage.setBody(Weborb.Messaging.Net.RTMP.Status.Status)">
             Setter for property 'body'.
            
             @param body Value to set for property 'body'.
        </member>
        <member name="T:Weborb.Messaging.Api.Stream.IProviderService">
            Central unit to get access to different types of provider inputs
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IProviderService.getProviderInput(Weborb.Messaging.Api.IScope,System.String)">
            Get a named provider as the source of input.
            Live stream first, VOD stream second.
            @param scope         Scope of provider
            @param name          Name of provider
            @return <tt>null</tt> if nothing found.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IProviderService.getLiveProviderInput(Weborb.Messaging.Api.IScope,System.String,System.Boolean)">
            Get a named Live provider as the source of input.
            
            @param scope         Scope of provider
            @param name          Name of provider
            @param needCreate    Whether there's need to create basic scope if that doesn't exist
            @return <tt>null</tt> if not found.
            @param needCreate    Whether there's need to create new live provider if this doesn't exist
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IProviderService.getVODProviderInput(Weborb.Messaging.Api.IScope,System.String)">
            Get a named VOD provider as the source of input.
            
            @param scope         Scope of provider
            @param name          Name of provider
            @return <tt>null</tt> if not found.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IProviderService.getVODProviderFile(Weborb.Messaging.Api.IScope,System.String)">
            Get a named VOD source file.
            
            @param scope         Scope of provider
            @param name          Name of provider
            @return <tt>null</tt> if not found.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IProviderService.registerBroadcastStream(Weborb.Messaging.Api.IScope,System.String,Weborb.Messaging.Api.Stream.IBroadcastStream)">
            Register a broadcast stream to a scope.
            
            @param scope         Scope
            @param name          Name of stream
            @param bs            Broadcast stream to register
            @return <tt>true</tt> if register successfully.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IProviderService.getBroadcastStreamNames(Weborb.Messaging.Api.IScope)">
            Get names of existing broadcast streams in a scope. 
            
            @param scope         Scope to get stream names from
            @return              List of stream names
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IProviderService.unregisterBroadcastStream(Weborb.Messaging.Api.IScope,System.String)">
            Unregister a broadcast stream of a specific name from a scope.
            
            @param scope         Scope
            @param name          Stream name
            @return <tt>true</tt> if unregister successfully.
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IProviderService.unregisterBroadcastStream(Weborb.Messaging.Api.IScope,System.String,Weborb.Messaging.Api.Stream.IBroadcastStream)">
            Unregister a broadcast stream of a specific name from a scope.
            
            @param scope         Scope
            @param name          Stream name
            @param stream		Broadcast stream
            @return <tt>true</tt> if unregister successfully.
        </member>
        <member name="T:Weborb.Client.ResponseHandler`1">
            <summary>
            Responsible for handling return value received from a remote method invocation
            </summary>
        </member>
        <member name="T:Weborb.Client.ErrorHandler">
            <summary>
            Responsible for handling errors/exceptions received from a remote method invocation
            </summary>
        </member>
        <member name="M:Weborb.Messaging.Util.HexDump.toHexString(System.Byte[])">
            Returns a string of hexadecimal digits from a byte array. Each byte is
            converted to 2 hex symbols.
            
            @param ba Description of Parameter
            @return Description of the Returned Value
        </member>
        <member name="M:Weborb.Messaging.Util.HexDump.toHexString(System.Byte[],System.Int32,System.Int32)">
            converts String to Hex String. Example: niko ->6E696B6F
            
            @param ba byte array
            @param offset offset in array
            @param length number of bytes
            @return Description of the Returned Value
        </member>
        <member name="T:Weborb.Messaging.Net.RTMP.Message.Packet">
            RTMP packet. Consists of packet header, data and event context.
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Message.Packet.header">
            Header
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Message.Packet.message">
            RTMP event
        </member>
        <member name="F:Weborb.Messaging.Net.RTMP.Message.Packet.data">
            Packet data
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Message.Packet.#ctor(Weborb.Messaging.Net.RTMP.Message.Header)">
            Create packet with given header
            @param header       Packet header
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Message.Packet.#ctor(Weborb.Messaging.Net.RTMP.Message.Header,Weborb.Messaging.Net.RTMP.Event.IRTMPEvent)">
            Create packet with given header and event context
            @param header     RTMP header
            @param event      RTMP message
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Message.Packet.getHeader">
             Getter for header
            
             @return  Packet header
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Message.Packet.setMessage(Weborb.Messaging.Net.RTMP.Event.IRTMPEvent)">
             Setter for event context
            
             @param message  RTMP event context
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Message.Packet.getMessage">
             Getter for event context
            
             @return RTMP event context
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Message.Packet.setData(Weborb.Messaging.Util.ByteBuffer)">
             Setter for data
            
             @param data Packet data
        </member>
        <member name="M:Weborb.Messaging.Net.RTMP.Message.Packet.getData">
             Getter for data
            
             @return Packet data
        </member>
        <member name="T:Weborb.Messaging.Api.Stream.IFlowControlService">
            A service that controls bandwidth of IFlowControllable objects based
            on token buckets.
            <p>
            1. Each FC is recommended to release itself by calling
            releaseFlowControllable on disposal.
            </p>
            <p>
            2. When parent FC has been released, child FC should be released or should
            not use any functional method like getAudioTokenBucket etc.
            </p>
            <p>
            TODO we should provide a cleaner cleanup with IEvent/IEventListener
            </p>
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IFlowControlService.releaseFlowControllable(Weborb.Messaging.Api.IFlowControllable)">
            Release a flow controllable and related resources when necessary.
            
            @param fc             Flow controllable
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IFlowControlService.updateBWConfigure(Weborb.Messaging.Api.IFlowControllable)">
            Update configuration of buckets according to BW configuration
            of the flow controllable.
            @param fc             Flow controllable
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IFlowControlService.resetTokenBuckets(Weborb.Messaging.Api.IFlowControllable)">
            Reset all token buckets that are assigned to the
            flow controllable.
            @param fc             Flow controllable
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IFlowControlService.getAudioTokenBucket(Weborb.Messaging.Api.IFlowControllable)">
            Get the audio bucket for a flow controllable.
            The bucket can be used till releasing regardless of
            BW configuration changes.
            @param fc             Flow controllable
            @return               Audio bucket
        </member>
        <member name="M:Weborb.Messaging.Api.Stream.IFlowControlService.getVideoTokenBucket(Weborb.Messaging.Api.IFlowControllable)">
            Get the video bucket for a flow controllable.
            The bucket can be used till releasing regardless of
            BW configuration changes.
            @param fc             Flow controllable
            @return               Video bucket
        </member>
        <member name="M:Weborb.Messaging.Api.IO.FLV.Meta.Resolver.main(System.String[])">
            @param args
        </member>
        <member name="T:Weborb.Client.Result">
            <summary>
            Contains return value returned from remote method invocation. Must be referenced as the generic type
            of the Responder object passed into WeborbClient.Invoke methods. 
            </summary>
            <example>
            <code>
            namespace Weborb.Examples
            {
              public class HelloWorldService
              {
                public string SayHello()
                {
                  return "Hello World";
                }
              }
            }
            </code>
            The SayHello method can be invoked using the following code:
            <code>
            WeborbClient client = new WeborbClient( "http://localhost/weborb30/weborb.aspx" );
            Responder&lt;Result&gt; responder = new Responder&lt;boolean&gt;( gotResult, gotFault );
            client.Invoke( "Weborb.Examples.HelloWorldService", "SayHello", null, responder );
            
            public void gotResult( Result resultValue )
            {
               string result = (string) resultValue.ReturnValue;
            }
            
            public void gotFault( Fault fault )
            {
            }
            </code>
            </example>
        </member>
        <member name="P:Weborb.Client.Result.RawReturnValue">
            <summary>
            Returns unadapted return value received from the remote server.
            </summary>
        </member>
        <member name="P:Weborb.Client.Result.ReturnValue">
            <summary>
            Returns adapted return value received from the remote server. Value created using default adaptation algorithm.
            </summary>
        </member>
        <member name="P:Weborb.Client.Result.Headers">
            <summary>
            Returns message headers returned from the remote server.
            </summary>
        </member>
    </members>
</doc>
